/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack:///./node_modules/base64-js/index.js?");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/buffer/index.js?");

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n//# sourceURL=webpack:///./node_modules/events/events.js?");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack:///./node_modules/ieee754/index.js?");

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n//# sourceURL=webpack:///./node_modules/isarray/index.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./src/gameboy/DMG_ROM.bin":
/*!*********************************!*\
  !*** ./src/gameboy/DMG_ROM.bin ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = new Buffer([49,254,255,175,33,255,159,50,203,124,32,251,33,38,255,14,17,62,128,50,226,12,62,243,226,50,62,119,119,62,252,224,71,17,4,1,33,16,128,26,205,149,0,205,150,0,19,123,254,52,32,243,17,216,0,6,8,26,19,34,35,5,32,249,62,25,234,16,153,33,47,153,14,12,61,40,8,50,13,32,249,46,15,24,243,103,62,100,87,224,66,62,145,224,64,4,30,2,14,12,240,68,254,144,32,250,13,32,247,29,32,242,14,19,36,124,30,131,254,98,40,6,30,193,254,100,32,6,123,226,12,62,135,226,240,66,144,224,66,21,32,210,5,32,79,22,32,24,203,79,6,4,197,203,17,23,193,203,17,23,5,32,245,34,35,34,35,201,206,237,102,102,204,13,0,11,3,115,0,131,0,12,0,13,0,8,17,31,136,137,0,14,220,204,110,230,221,221,217,153,187,187,103,99,110,14,236,204,221,220,153,159,187,185,51,62,60,66,185,165,185,165,66,60,33,4,1,17,168,0,26,19,190,32,254,35,125,254,52,32,245,6,25,120,134,35,5,32,251,134,32,254,62,1,224,80])\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack:///./src/gameboy/DMG_ROM.bin?");

/***/ }),

/***/ "./src/gameboy/Tetris (World).gb":
/*!***************************************!*\
  !*** ./src/gameboy/Tetris (World).gb ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = new Buffer([195,139,2,0,0,0,0,0,195,139,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,135,225,95,22,0,25,94,35,86,213,225,233,255,255,255,255,255,255,255,255,255,255,255,255,195,253,1,255,255,255,255,255,195,18,39,255,255,255,255,255,195,18,39,255,255,255,255,255,195,126,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,195,80,1,206,237,102,102,204,13,0,11,3,115,0,131,0,12,0,13,0,8,17,31,136,137,0,14,220,204,110,230,221,221,217,153,187,187,103,99,110,14,236,204,221,220,153,159,187,185,51,62,84,69,84,82,73,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,11,137,181,195,139,2,205,43,42,240,65,230,3,32,250,70,240,65,230,3,32,250,126,160,201,123,134,39,34,122,142,39,34,62,0,142,39,119,62,1,224,224,208,62,153,50,50,119,201,245,229,213,197,205,142,1,62,1,224,204,193,209,225,241,217,240,205,239,155,1,194,1,199,1,221,1,62,40,240,225,254,7,40,8,254,6,200,62,6,224,225,201,240,1,254,85,32,8,62,41,224,203,62,1,24,8,254,41,192,62,85,224,203,175,224,2,201,240,1,224,208,201,240,1,224,208,240,203,254,41,200,240,207,224,1,62,255,224,207,62,128,224,2,201,240,1,224,208,240,203,254,41,200,240,207,224,1,251,205,7,11,62,128,224,2,201,240,205,254,2,192,175,224,15,251,201,245,197,213,229,240,206,167,40,18,240,203,254,41,32,12,175,224,206,240,207,224,1,33,2,255,54,129,205,64,34,205,44,36,205,23,36,205,254,35,205,236,35,205,221,35,205,206,35,205,191,35,205,176,35,205,161,35,205,146,35,205,131,35,205,88,35,205,73,35,205,58,35,205,43,35,205,28,35,205,13,35,205,254,34,205,50,31,205,182,255,205,46,25,250,206,192,167,40,26,240,152,254,3,32,20,33,109,152,205,155,36,62,1,224,224,33,109,156,205,155,36,175,234,206,192,33,226,255,52,175,224,67,224,66,60,224,133,225,209,193,241,217,175,33,255,223,14,16,6,0,50,5,32,252,13,32,249,62,1,243,224,15,224,255,175,224,66,224,67,224,164,224,65,224,1,224,2,62,128,224,64,240,68,254,148,32,250,62,3,224,64,62,228,224,71,224,72,62,196,224,73,33,38,255,62,128,50,62,255,50,54,119,62,1,234,0,32,49,255,207,175,33,255,223,6,0,50,5,32,252,33,255,207,14,16,6,0,50,5,32,252,13,32,249,33,255,159,14,32,175,6,0,50,5,32,252,13,32,249,33,255,254,6,0,50,5,32,252,33,254,255,6,128,50,5,32,252,14,182,6,12,33,199,42,42,226,12,5,32,250,205,233,39,205,243,127,62,9,224,255,62,55,224,192,62,28,224,193,62,36,224,225,62,128,224,64,251,175,224,15,224,74,224,75,224,6,205,250,41,205,119,3,205,240,127,240,128,230,15,254,15,202,154,2,33,166,255,6,2,126,167,40,1,53,44,5,32,247,240,197,167,40,4,62,9,224,255,240,133,167,40,251,175,224,133,195,67,3,240,225,239,41,28,61,29,168,18,223,18,97,29,129,29,25,4,230,4,168,20,240,20,107,26,27,30,113,31,122,31,137,21,20,21,223,21,35,22,141,22,222,22,79,23,119,25,228,6,153,7,146,8,83,9,149,11,79,13,65,11,150,13,135,14,118,17,253,13,238,14,41,30,156,30,230,3,16,4,203,17,74,18,96,18,128,18,52,6,100,6,23,19,105,19,136,19,181,19,203,19,226,19,25,20,73,20,127,19,62,40,205,116,40,205,43,40,17,79,74,205,63,40,205,238,23,33,0,195,17,208,100,26,34,19,124,254,196,32,248,62,211,224,64,62,125,224,166,62,37,224,225,201,240,166,167,192,62,6,224,225,201,205,116,40,175,224,233,224,152,224,156,224,155,224,251,224,159,224,227,224,231,224,199,205,243,34,205,165,38,205,43,40,33,0,200,62,47,34,124,254,204,32,248,33,1,200,205,253,38,33,12,200,205,253,38,33,65,202,6,12,62,142,34,5,32,252,17,183,75,205,63,40,205,238,23,33,0,192,54,128,44,54,16,44,54,88,62,3,234,232,223,62,211,224,64,62,7,224,225,62,125,224,166,62,4,224,198,240,228,167,192,62,19,224,198,201,62,55,224,192,62,9,224,194,175,224,197,224,176,224,237,224,234,62,99,224,235,62,48,224,236,240,228,254,2,62,2,32,26,62,119,224,192,62,9,224,195,62,2,224,196,62,100,224,235,62,48,224,236,62,17,224,176,62,1,224,228,62,10,224,225,205,116,40,205,1,40,17,31,77,205,63,40,205,238,23,62,211,224,64,201,62,255,224,233,201,240,166,167,32,10,33,198,255,53,40,155,62,125,224,166,205,7,11,62,85,224,1,62,128,224,2,240,204,167,40,10,240,203,167,32,58,175,224,204,24,103,240,129,71,240,197,203,80,32,72,203,96,32,83,203,104,32,84,203,88,200,167,62,8,40,44,120,254,8,192,240,203,254,41,40,18,62,41,224,1,62,129,224,2,240,204,167,40,251,240,203,167,40,50,62,42,224,225,175,224,166,224,194,224,195,224,196,224,228,201,245,240,128,203,127,40,2,224,244,241,24,230,238,1,224,197,167,62,16,40,2,62,96,234,1,192,201,167,192,175,24,236,167,200,175,24,233,240,228,167,200,205,7,11,175,224,1,62,128,224,2,240,129,203,95,40,13,62,51,224,1,62,129,224,2,62,6,224,225,201,33,176,255,240,228,254,2,6,16,40,2,6,29,126,184,192,62,6,224,225,201,240,228,167,200,240,233,254,255,200,240,234,167,40,5,61,224,234,24,28,240,235,103,240,236,111,42,71,240,237,168,160,224,129,120,224,237,42,224,234,124,224,235,125,224,236,24,3,175,224,129,240,128,224,238,240,237,224,128,201,175,224,237,24,239,201,240,228,167,200,240,233,254,255,192,240,128,71,240,237,184,40,25,240,235,103,240,236,111,240,237,34,240,234,34,124,224,235,125,224,236,120,224,237,175,224,234,201,240,234,60,224,234,201,240,228,167,200,240,233,167,192,240,238,224,128,201,33,2,255,203,254,24,10,62,3,224,205,240,203,254,41,32,239,205,179,20,62,128,234,16,194,205,197,38,224,206,175,224,1,224,207,224,220,224,210,224,211,224,212,224,213,224,227,205,243,127,62,43,224,225,201,240,203,254,41,40,22,240,240,167,40,30,175,224,240,17,1,194,205,246,20,205,123,21,205,197,38,24,13,240,129,203,71,32,7,203,95,32,3,205,20,21,240,203,254,41,40,30,240,204,167,200,175,224,204,62,57,224,207,240,208,254,80,40,45,71,240,193,184,200,120,224,193,62,1,224,240,201,240,129,203,95,32,34,203,71,32,30,240,204,167,200,175,224,204,240,207,254,80,40,9,240,193,224,207,62,1,224,206,201,205,238,23,62,22,224,225,201,62,80,24,237,33,2,255,203,254,24,31,62,3,224,205,240,203,254,41,32,239,205,16,11,205,16,11,205,16,11,6,0,33,0,195,205,16,11,34,5,32,249,205,116,40,205,1,40,17,92,82,205,63,40,205,238,23,62,47,205,56,32,62,3,224,206,175,224,1,224,207,224,220,224,210,224,211,224,212,224,213,224,227,224,204,33,0,196,6,10,62,40,34,5,32,252,240,214,167,194,218,7,205,123,21,62,211,224,64,33,128,192,17,114,7,6,32,205,146,7,33,0,194,17,65,39,14,2,205,218,23,205,123,8,205,197,38,175,224,215,224,216,224,217,224,218,224,219,62,23,224,225,201,64,40,174,0,64,48,174,32,72,40,175,0,72,48,175,32,120,40,192,0,120,48,192,32,128,40,193,0,128,48,193,32,26,34,19,5,32,250,201,240,203,254,41,40,35,240,204,167,40,19,240,208,254,96,40,45,254,6,48,2,224,172,240,173,224,207,175,224,204,17,16,194,205,202,23,33,173,255,24,104,240,129,203,95,40,4,62,96,24,77,240,204,167,40,80,240,207,254,96,32,56,205,238,23,240,214,167,32,24,62,24,224,225,240,203,254,41,192,175,224,160,62,6,17,224,255,33,162,201,205,195,27,201,240,203,254,41,194,149,8,175,224,160,62,6,17,224,255,33,162,201,205,195,27,195,149,8,240,208,254,6,48,2,224,173,240,172,224,207,175,224,204,60,224,206,17,0,194,205,202,23,33,172,255,126,203,96,32,20,203,104,32,34,203,112,32,36,203,120,40,19,254,3,48,15,198,3,24,5,254,5,40,7,60,119,62,1,234,224,223,205,123,8,205,197,38,201,167,40,246,61,24,237,254,3,56,239,214,3,24,229,64,96,64,112,64,128,80,96,80,112,80,128,120,96,120,112,120,128,136,96,136,112,136,128,240,172,17,1,194,33,99,8,205,185,23,240,173,17,17,194,33,111,8,205,185,23,201,205,116,40,175,234,16,194,224,152,224,156,224,155,224,251,224,159,224,204,224,1,224,206,224,208,224,207,224,209,205,165,38,205,243,34,205,77,32,175,224,227,224,231,205,238,23,17,196,83,213,62,1,224,169,224,197,205,63,40,209,33,0,156,205,66,40,17,141,40,33,99,156,14,10,205,216,31,33,0,194,17,19,39,205,10,39,33,16,194,17,27,39,205,10,39,33,81,153,62,48,224,158,54,0,45,54,3,205,67,27,175,224,160,240,203,254,41,17,67,9,240,172,40,5,17,51,9,240,173,33,176,152,119,38,156,119,33,128,192,6,16,205,146,7,62,119,224,192,62,211,224,64,62,25,224,225,62,1,224,205,201,24,132,192,0,24,140,192,32,32,132,193,0,32,140,193,32,24,132,174,0,24,140,174,32,32,132,175,0,32,140,175,32,62,8,224,255,175,224,15,240,203,254,41,194,101,10,205,7,11,205,7,11,175,224,204,62,41,224,1,62,129,224,2,240,204,167,40,251,240,1,254,85,32,228,17,22,0,14,10,33,2,201,6,10,175,224,204,205,7,11,42,224,1,62,129,224,2,240,204,167,40,251,5,32,235,25,13,32,229,240,172,254,5,40,61,33,34,202,17,64,0,25,60,254,5,32,250,17,34,202,14,10,6,10,26,34,28,5,32,250,213,17,214,255,25,209,229,33,214,255,25,229,209,225,13,32,231,17,214,255,6,10,124,254,200,40,9,62,47,34,5,32,252,25,24,240,205,7,11,205,7,11,175,224,204,62,41,224,1,62,129,224,2,240,204,167,40,251,240,1,254,85,32,228,33,0,195,6,0,175,224,204,42,205,7,11,224,1,62,129,224,2,240,204,167,40,251,4,32,235,205,7,11,205,7,11,175,224,204,62,48,224,1,62,129,224,2,240,204,167,40,251,240,1,254,86,32,228,205,251,10,62,9,224,255,62,28,224,225,62,2,224,227,62,3,224,205,240,203,254,41,40,5,33,2,255,203,254,33,0,195,42,234,3,194,42,234,19,194,124,224,175,125,224,176,201,240,173,60,71,33,66,202,17,192,255,5,40,3,25,24,250,205,7,11,175,224,204,62,85,224,1,62,128,224,2,240,204,167,40,251,240,1,254,41,32,231,17,22,0,14,10,6,10,175,224,204,224,1,62,128,224,2,240,204,167,40,251,240,1,34,5,32,236,25,13,32,230,205,7,11,175,224,204,62,85,224,1,62,128,224,2,240,204,167,40,251,240,1,254,41,32,231,6,0,33,0,195,175,224,204,224,1,62,128,224,2,240,204,167,40,251,240,1,34,4,32,236,205,7,11,175,224,204,62,86,224,1,62,128,224,2,240,204,167,40,251,240,1,254,48,32,231,195,53,10,33,66,202,62,128,6,10,34,5,32,252,201,197,6,250,64,5,32,252,193,201,229,197,240,252,230,252,79,38,3,240,4,71,175,5,40,10,60,60,60,60,254,28,40,244,24,243,87,240,174,95,37,40,7,178,177,230,252,185,40,225,122,224,174,123,224,252,193,225,201,62,1,224,255,240,227,167,32,28,6,68,14,32,205,163,17,62,2,224,205,205,215,38,205,234,38,205,123,21,175,224,214,62,26,224,225,201,254,5,192,33,48,192,6,18,54,240,35,54,16,35,54,182,35,54,128,35,5,32,241,250,255,195,6,10,33,0,196,61,40,6,44,5,32,249,24,242,54,47,62,3,224,206,201,62,1,224,255,33,156,192,175,34,54,80,44,54,39,44,54,0,205,104,28,205,227,28,205,21,37,205,247,32,205,153,33,205,245,37,205,173,34,205,255,11,240,213,167,40,20,62,119,224,207,224,177,62,170,224,209,62,27,224,225,62,5,224,167,24,16,240,225,254,1,32,27,62,170,224,207,224,177,62,119,224,209,175,224,220,224,210,224,211,224,212,240,203,254,41,32,2,224,206,205,84,12,205,240,12,201,17,32,0,33,2,200,62,47,14,18,6,10,229,190,32,10,35,5,32,249,225,25,13,32,241,229,225,121,224,177,254,12,250,233,223,48,7,254,8,192,205,123,21,201,254,8,200,250,240,223,254,2,200,62,8,234,232,223,201,240,203,254,41,40,82,62,1,234,127,223,224,171,240,207,224,241,175,224,242,224,207,205,38,29,201,240,204,167,200,33,48,192,17,4,0,175,224,204,240,208,254,170,40,97,254,119,40,73,254,148,40,203,71,167,40,81,203,127,32,111,254,19,48,23,62,18,144,79,12,62,152,119,25,214,8,5,32,249,62,240,13,40,4,119,25,24,249,240,220,167,40,7,246,128,224,177,175,224,220,62,255,224,208,240,203,254,41,240,177,32,7,224,207,62,1,224,206,201,224,207,201,240,209,254,170,40,38,62,119,224,209,62,1,224,225,24,206,14,19,24,193,240,209,254,119,40,18,62,170,224,209,62,27,224,225,62,5,224,167,14,1,6,18,24,160,62,1,224,239,24,172,230,127,254,5,48,166,224,210,24,174,240,211,167,40,7,203,127,200,230,7,24,10,240,210,167,200,224,211,175,224,210,201,79,197,33,34,200,17,224,255,25,13,32,252,17,34,200,14,17,6,10,26,34,28,5,32,250,213,17,22,0,25,209,229,33,22,0,25,229,209,225,13,32,231,193,17,0,196,6,10,26,34,19,5,32,250,213,17,22,0,25,209,13,32,236,62,2,224,227,224,212,175,224,211,201,240,166,167,192,62,1,224,255,62,3,224,205,240,209,254,119,32,12,240,208,254,170,32,16,62,1,224,239,24,10,254,170,32,6,240,208,254,119,40,240,6,52,14,67,205,163,17,175,224,227,240,209,254,170,62,30,32,2,62,29,224,225,62,40,224,166,62,29,224,198,201,240,166,167,192,240,239,167,32,5,240,215,60,224,215,205,211,15,17,77,39,240,203,254,41,40,3,17,95,39,33,0,194,14,3,205,218,23,62,25,224,166,240,239,167,40,5,33,32,194,54,128,62,3,205,199,38,62,32,224,225,62,9,234,232,223,240,215,254,5,192,62,17,234,232,223,201,240,215,254,5,32,7,240,198,167,40,8,24,34,240,129,203,95,40,28,62,96,224,207,224,206,24,29,62,1,224,255,240,204,40,12,240,203,254,41,40,215,240,208,254,96,40,9,205,33,14,62,3,205,199,38,201,62,31,224,225,224,204,201,240,166,167,32,35,33,198,255,53,62,25,224,166,205,196,15,33,1,194,126,238,48,34,254,96,204,123,15,44,245,126,238,1,119,46,19,50,241,45,119,240,215,254,5,32,40,240,198,33,33,194,254,6,40,27,254,8,48,27,126,254,114,48,6,254,105,200,52,52,201,54,105,44,44,54,87,62,6,234,224,223,201,45,54,128,201,240,167,167,192,62,15,224,167,33,35,194,126,238,1,119,201,240,166,167,192,240,239,167,32,5,240,216,60,224,216,205,211,15,17,113,39,240,203,254,41,40,3,17,125,39,33,0,194,14,2,205,218,23,62,25,224,166,240,239,167,40,5,33,16,194,54,128,62,2,205,199,38,62,33,224,225,62,9,234,232,223,240,216,254,5,192,62,17,234,232,223,201,240,216,254,5,32,7,240,198,167,40,8,24,34,240,129,203,95,40,28,62,96,224,207,224,206,24,29,62,1,224,255,240,204,40,12,240,203,254,41,40,215,240,208,254,96,40,9,205,18,15,62,2,205,199,38,201,62,31,224,225,224,204,201,240,166,167,32,28,33,198,255,53,62,25,224,166,205,196,15,33,17,194,126,238,8,34,254,104,204,123,15,44,126,238,1,119,240,216,254,5,32,50,240,198,33,1,194,254,5,40,37,254,6,40,17,254,8,48,33,126,254,114,48,24,254,97,200,52,52,52,52,201,45,54,0,44,54,97,44,44,54,86,62,6,234,224,223,201,45,54,128,201,240,167,167,192,62,15,224,167,33,3,194,126,238,1,119,201,245,229,240,215,254,5,40,26,240,216,254,5,40,20,240,203,254,41,32,14,33,96,192,6,36,17,160,15,26,34,19,5,32,250,225,241,201,66,48,13,0,66,56,178,0,66,64,14,0,66,72,28,0,66,88,14,0,66,96,29,0,66,104,181,0,66,112,187,0,66,120,29,0,33,96,192,17,4,0,6,9,175,119,25,5,32,251,201,205,116,40,33,244,85,1,0,16,205,56,40,205,233,39,33,0,152,17,44,85,6,4,205,68,40,33,128,153,6,6,205,68,40,240,203,254,41,32,34,33,65,152,54,189,44,54,178,44,54,46,44,54,190,44,54,46,33,1,154,54,180,44,54,181,44,54,187,44,54,46,44,54,188,240,239,167,32,3,205,233,16,240,215,167,40,73,254,5,32,22,33,165,152,6,11,240,203,254,41,17,87,17,40,3,17,98,17,205,60,17,62,4,79,240,203,254,41,62,147,32,2,62,143,224,160,33,231,153,205,206,16,240,217,167,40,23,62,172,224,160,33,240,153,14,1,205,206,16,33,166,152,17,109,17,6,9,205,60,17,240,216,167,40,62,254,5,32,22,33,165,152,6,11,240,203,254,41,17,98,17,40,3,17,87,17,205,60,17,62,4,79,240,203,254,41,62,143,32,2,62,147,224,160,33,39,152,205,206,16,240,218,167,40,12,62,172,224,160,33,48,152,14,1,205,206,16,240,219,167,40,11,33,167,152,17,81,17,6,6,205,60,17,62,211,224,64,205,238,23,201,240,160,229,17,32,0,6,2,229,34,60,119,60,225,25,5,32,246,225,17,3,0,25,13,32,230,201,33,215,255,17,216,255,240,217,167,32,58,240,218,167,32,60,240,219,167,32,33,126,254,4,40,17,26,254,4,192,62,5,18,24,10,26,254,3,192,62,3,24,5,54,5,175,224,219,175,224,217,224,218,201,126,254,4,32,6,224,217,175,224,219,201,224,218,24,248,126,254,5,40,225,24,219,26,254,5,40,205,24,212,197,229,26,34,19,5,32,250,225,17,32,0,25,193,62,182,34,5,32,252,201,176,177,178,179,177,62,180,181,187,46,188,47,45,46,61,14,62,189,178,46,190,46,47,45,46,61,14,62,181,176,65,181,61,29,181,190,177,62,1,224,255,240,166,167,192,205,238,23,175,224,239,6,39,14,121,205,163,17,205,243,127,240,215,254,5,40,10,240,216,254,5,40,4,62,1,224,214,62,22,224,225,201,240,204,167,40,20,175,224,204,240,203,254,41,240,208,32,17,184,40,8,62,2,224,207,224,206,225,201,121,224,207,224,206,201,185,200,120,224,207,225,201,205,22,18,33,230,156,17,127,20,6,7,205,155,20,33,231,156,17,134,20,6,7,205,155,20,33,8,157,54,114,44,54,196,33,40,157,54,183,44,54,184,17,197,39,33,0,194,14,3,205,218,23,62,3,205,199,38,62,219,224,64,62,187,224,166,62,39,224,225,62,16,234,232,223,201,205,116,40,33,244,85,1,0,16,205,56,40,33,255,159,205,236,39,33,192,157,17,12,82,6,4,205,68,40,33,236,156,17,141,20,6,7,205,155,20,33,237,156,17,148,20,6,7,205,155,20,201,240,166,167,192,33,16,194,54,0,46,32,54,0,62,255,224,166,62,40,224,225,201,240,166,167,40,4,205,94,20,201,62,41,224,225,33,19,194,54,53,46,35,54,53,62,255,224,166,62,47,205,50,32,201,240,166,167,40,4,205,94,20,201,62,2,224,225,33,8,157,6,47,205,99,26,33,9,157,205,99,26,33,40,157,205,99,26,33,41,157,205,99,26,201,240,166,167,32,46,62,10,224,166,33,1,194,53,126,254,88,32,33,33,16,194,54,0,44,198,32,34,54,76,44,54,64,46,32,54,128,62,3,205,199,38,62,3,224,225,62,4,234,248,223,201,205,94,20,201,240,166,167,32,29,62,10,224,166,33,17,194,53,46,1,53,126,254,208,32,13,62,156,224,201,62,130,224,202,62,44,224,225,201,240,167,167,32,11,62,6,224,167,33,19,194,126,238,1,119,62,3,205,199,38,201,240,166,167,192,62,6,224,166,240,202,214,130,95,22,0,33,89,19,25,229,209,240,201,103,240,202,111,26,205,98,26,229,17,32,0,25,6,182,205,99,26,225,35,62,2,234,224,223,124,224,201,125,224,202,254,146,192,62,255,224,166,62,45,224,225,201,179,188,61,190,187,181,29,178,189,181,29,46,188,61,14,62,240,166,167,192,205,116,40,205,1,40,205,243,34,62,147,224,64,62,5,224,225,201,240,166,167,192,62,46,224,225,201,205,22,18,17,215,39,33,0,194,14,3,205,218,23,240,243,234,3,194,62,3,205,199,38,175,224,243,62,219,224,64,62,187,224,166,62,47,224,225,62,16,234,232,223,201,240,166,167,192,33,16,194,54,0,46,32,54,0,62,160,224,166,62,48,224,225,201,240,166,167,40,4,205,94,20,201,62,49,224,225,62,128,224,166,62,47,205,50,32,201,240,166,167,32,46,62,10,224,166,33,1,194,53,126,254,106,32,33,33,16,194,54,0,44,198,16,34,54,84,44,54,92,46,32,54,128,62,3,205,199,38,62,50,224,225,62,4,234,248,223,201,205,94,20,201,240,166,167,32,21,62,10,224,166,33,17,194,53,46,1,53,126,254,224,32,5,62,51,224,225,201,240,167,167,32,11,62,6,224,167,33,19,194,126,238,1,119,62,3,205,199,38,201,205,116,40,205,1,40,205,243,127,205,243,34,62,147,224,64,62,16,224,225,201,240,167,167,192,62,10,224,167,62,3,234,248,223,6,2,33,16,194,126,238,128,119,46,32,5,32,247,62,3,205,199,38,201,194,202,202,202,202,202,202,195,203,88,72,72,72,72,200,115,115,115,115,115,115,201,116,116,116,116,116,116,26,119,19,213,17,32,0,25,209,5,32,244,201,62,1,224,255,175,224,1,224,2,224,15,205,116,40,205,1,40,17,31,77,205,63,40,205,238,23,33,0,194,17,35,39,14,2,205,218,23,17,1,194,205,241,20,240,192,30,18,18,19,254,55,62,28,40,2,62,29,18,205,197,38,205,123,21,62,211,224,64,62,14,224,225,201,62,1,234,224,223,240,193,245,214,28,135,79,6,0,33,12,21,9,42,18,19,126,18,19,241,18,201,112,55,112,119,128,55,128,119,17,0,194,205,202,23,33,193,255,126,203,88,194,199,21,203,64,194,199,21,203,72,32,65,28,203,96,32,38,203,104,32,45,203,112,32,22,203,120,202,195,21,254,30,48,9,198,2,119,205,241,20,205,123,21,205,197,38,201,254,30,56,248,214,2,24,237,254,29,40,240,254,31,40,236,60,24,226,254,28,40,229,254,30,40,225,61,24,215,245,240,197,167,40,3,241,24,182,241,62,14,24,91,240,193,214,23,254,8,32,2,62,255,234,232,223,201,17,16,194,205,202,23,33,192,255,126,203,88,32,48,203,64,32,64,28,28,203,96,32,14,203,104,40,30,254,55,40,26,62,55,6,28,24,8,254,119,40,16,62,119,6,29,119,245,62,1,234,224,223,241,18,19,120,18,205,197,38,201,62,2,234,224,223,240,192,254,55,62,16,40,2,62,18,224,225,175,24,231,62,15,24,247,205,116,40,17,135,78,205,63,40,205,96,25,205,238,23,33,0,194,17,47,39,14,1,205,218,23,17,1,194,240,194,33,121,22,205,178,23,205,197,38,205,249,23,205,46,25,62,211,224,64,62,17,224,225,240,199,167,32,4,205,123,21,201,62,21,224,225,201,17,0,194,205,202,23,33,194,255,62,10,203,88,32,238,203,64,32,234,62,8,203,72,32,228,126,203,96,32,20,203,104,32,38,203,112,32,40,203,120,40,26,254,5,48,22,198,5,24,5,254,9,40,14,60,119,17,1,194,33,121,22,205,178,23,205,249,23,205,197,38,201,167,40,249,61,24,233,254,5,56,242,214,5,24,225,64,48,64,64,64,80,64,96,64,112,80,48,80,64,80,80,80,96,80,112,205,116,40,17,239,79,205,63,40,205,238,23,33,0,194,17,53,39,14,2,205,218,23,17,1,194,240,195,33,54,23,205,178,23,17,17,194,240,196,33,165,23,205,178,23,205,197,38,205,19,24,205,46,25,62,211,224,64,62,19,224,225,240,199,167,32,4,205,123,21,201,62,21,224,225,201,224,225,175,18,201,17,0,194,205,202,23,33,195,255,62,10,203,88,32,236,62,20,203,64,32,230,62,8,203,72,32,224,126,203,96,32,20,203,104,32,38,203,112,32,40,203,120,40,26,254,5,48,22,198,5,24,5,254,9,40,14,60,119,17,1,194,33,54,23,205,178,23,205,19,24,205,197,38,201,167,40,249,61,24,233,254,5,56,242,214,5,24,225,64,24,64,40,64,56,64,72,64,88,80,24,80,40,80,56,80,72,80,88,224,225,175,18,201,17,16,194,205,202,23,33,196,255,62,10,203,88,32,236,203,64,32,232,62,19,203,72,32,226,126,203,96,32,20,203,104,32,38,203,112,32,40,203,120,40,26,254,3,48,22,198,3,24,5,254,5,40,14,60,119,17,17,194,33,165,23,205,178,23,205,19,24,205,197,38,201,167,40,249,61,24,233,254,3,56,242,214,3,24,225,64,112,64,128,64,144,80,112,80,128,80,144,0,245,62,1,234,224,223,241,245,135,79,6,0,9,42,18,19,126,18,19,241,198,32,18,201,240,129,71,240,166,167,192,62,16,224,166,26,238,128,18,201,229,6,6,26,34,19,5,32,250,225,62,16,133,111,13,32,239,54,128,201,175,33,0,192,6,160,34,5,32,252,201,205,96,25,240,194,33,84,214,17,27,0,167,40,4,61,25,24,249,35,35,229,209,205,100,24,201,205,96,25,240,195,33,0,208,17,162,0,167,40,4,61,25,24,249,240,196,17,27,0,167,40,4,61,25,24,249,35,35,229,209,205,100,24,201,6,3,126,230,240,32,11,28,58,230,15,32,15,28,5,32,241,201,126,230,240,203,55,18,28,58,230,15,18,28,5,32,241,201,6,3,58,18,27,5,32,250,201,122,224,251,123,224,252,14,3,33,162,192,213,6,3,26,150,56,16,32,5,45,27,5,32,245,209,19,19,19,13,32,232,24,94,209,240,251,87,240,252,95,213,197,33,6,0,25,229,209,43,43,43,13,40,5,205,91,24,24,248,33,162,192,6,3,58,18,29,5,32,250,193,209,121,224,200,33,18,0,25,229,17,6,0,25,229,209,225,13,40,7,6,6,205,93,24,24,246,62,96,6,5,18,27,5,32,251,62,10,18,122,224,201,123,224,202,175,224,156,224,198,62,1,234,232,223,224,199,17,172,201,240,251,103,240,252,111,6,3,229,213,197,205,57,24,193,209,33,32,0,25,229,209,225,213,17,3,0,25,209,5,32,232,43,43,6,3,17,164,201,213,14,6,42,167,40,5,18,19,13,32,247,209,229,33,32,0,25,229,209,225,5,32,232,205,165,38,62,1,224,232,201,240,232,167,200,33,164,153,17,164,201,14,6,229,6,6,26,34,28,5,32,250,28,44,28,44,13,40,17,203,65,32,237,225,17,32,0,25,229,209,62,48,130,87,24,223,225,175,224,232,201,33,164,201,17,32,0,62,96,14,3,6,14,229,34,5,32,252,225,25,13,32,244,201,240,200,33,228,153,17,224,255,61,40,3,25,24,250,240,198,95,22,0,25,240,201,87,240,202,95,240,166,167,32,18,62,7,224,166,240,156,238,1,224,156,26,40,2,62,47,205,98,26,240,129,71,240,128,79,62,23,203,112,32,55,203,113,32,43,203,120,32,88,203,121,32,76,203,64,32,108,203,72,194,82,26,203,88,200,26,205,98,26,205,123,21,175,224,199,240,192,254,55,62,17,40,2,62,19,224,225,201,240,170,61,224,170,192,62,9,224,170,6,38,240,244,167,40,2,6,39,26,184,32,10,62,46,60,18,62,1,234,224,223,201,254,47,32,244,62,10,24,241,240,170,61,224,170,192,62,9,224,170,6,38,240,244,167,40,2,6,39,26,254,10,32,5,62,48,61,24,212,254,47,32,249,120,24,205,26,205,98,26,62,2,234,224,223,240,198,60,254,6,40,140,224,198,19,26,254,96,32,3,62,10,18,122,224,201,123,224,202,201,240,198,167,200,26,205,98,26,240,198,61,224,198,27,24,233,71,240,65,230,3,32,250,112,201,205,116,40,175,234,16,194,224,152,224,156,224,155,224,251,224,159,62,47,205,50,32,205,77,32,205,165,38,175,224,227,224,231,205,238,23,240,192,17,63,64,33,195,255,254,119,62,80,40,8,62,241,33,194,255,17,215,62,213,224,230,126,224,169,205,63,40,209,33,0,156,205,66,40,17,141,40,33,99,156,14,10,205,216,31,38,152,240,230,111,240,169,119,38,156,119,240,244,167,40,7,35,54,39,38,152,54,39,33,0,194,17,19,39,205,10,39,33,16,194,17,27,39,205,10,39,33,81,153,240,192,254,119,62,37,40,1,175,224,158,230,15,50,40,2,54,2,205,67,27,205,98,32,205,98,32,205,98,32,205,215,38,175,224,160,240,192,254,119,32,37,62,52,224,153,240,196,33,176,152,119,38,156,119,167,40,21,71,240,228,167,40,5,205,118,27,24,10,120,17,192,255,33,2,154,205,195,27,62,211,224,64,175,224,225,201,240,169,95,240,244,167,40,10,62,10,131,254,21,56,2,62,20,95,33,97,27,22,0,25,126,224,153,224,154,201,52,48,44,40,36,32,27,21,16,10,9,8,7,6,5,5,4,4,3,3,2,33,194,153,17,155,27,14,4,6,10,229,26,119,229,124,198,48,103,26,119,225,44,19,5,32,241,225,213,17,32,0,25,209,13,32,228,201,133,47,130,134,131,47,47,128,130,133,47,130,132,130,131,47,131,47,135,47,47,133,47,131,47,134,130,128,129,47,131,47,134,131,47,133,47,133,47,47,71,5,40,3,25,24,250,240,4,71,62,128,5,40,8,254,128,32,247,62,47,24,245,254,47,40,8,240,4,230,7,246,128,24,2,224,160,245,125,230,15,254,11,32,11,240,160,254,47,40,5,241,62,47,24,1,241,119,229,245,240,197,167,32,4,17,0,48,25,241,119,225,35,125,230,15,254,12,32,183,175,224,160,124,230,15,254,10,40,6,17,22,0,25,24,167,125,254,44,32,245,201,205,104,28,240,171,167,192,205,121,5,205,175,5,205,240,5,205,21,37,205,247,32,205,153,33,205,245,37,205,173,34,205,236,31,205,32,6,201,203,87,200,250,222,192,238,1,234,222,192,40,9,62,128,234,16,194,205,234,38,201,175,24,246,240,128,230,15,254,15,202,154,2,240,228,167,192,240,129,203,95,40,212,240,197,167,32,69,33,64,255,240,171,238,1,224,171,40,42,203,222,62,1,234,127,223,33,78,153,17,78,157,6,4,240,65,230,3,32,250,42,18,19,5,32,244,62,128,234,16,194,234,0,194,205,215,38,205,234,38,201,203,158,62,2,234,127,223,250,222,192,167,40,230,175,24,230,240,203,254,41,192,240,171,238,1,224,171,40,51,62,1,234,127,223,240,208,224,242,240,207,224,241,205,38,29,201,240,171,167,200,240,204,40,57,175,224,204,240,203,254,41,32,8,62,148,224,207,224,206,225,201,175,224,207,240,208,254,148,40,31,240,242,224,208,240,241,224,207,62,2,234,127,223,175,224,171,33,238,152,6,142,14,5,205,99,26,44,13,32,249,201,225,201,33,238,152,14,5,17,56,29,26,205,98,26,19,44,13,32,247,201,25,10,30,28,14,62,128,234,0,194,234,16,194,205,215,38,205,234,38,175,224,152,224,156,205,243,34,62,135,205,50,32,62,70,224,166,62,13,224,225,201,240,129,203,71,32,3,203,95,200,175,224,227,240,197,167,62,22,32,10,240,192,254,55,62,16,40,2,62,18,224,225,201,240,166,167,192,33,2,200,17,221,40,205,88,40,240,195,167,40,46,17,64,0,33,39,200,205,223,29,17,0,1,33,135,200,205,223,29,17,0,3,33,231,200,205,223,29,17,0,18,33,71,201,205,223,29,33,160,192,6,3,175,34,5,32,252,62,128,224,166,62,128,234,0,194,234,16,194,205,215,38,205,234,38,205,243,127,62,37,224,158,62,11,224,225,201,229,33,160,192,6,3,175,34,5,32,252,240,195,71,4,33,160,192,205,102,1,5,32,247,225,6,3,17,162,192,26,230,240,32,10,26,230,15,32,11,29,5,32,242,201,26,230,240,203,55,34,26,230,15,34,29,5,32,242,201,240,166,167,192,62,1,234,198,192,62,5,224,166,201,240,166,167,192,33,2,200,17,87,81,205,88,40,205,238,23,33,0,194,17,137,39,14,10,205,218,23,62,16,33,102,194,119,46,118,119,33,14,194,17,140,30,6,10,26,34,34,19,213,17,14,0,25,209,5,32,243,240,196,254,5,32,2,62,9,60,71,33,0,194,17,16,0,175,119,25,5,32,251,240,196,198,10,234,232,223,62,37,224,158,62,27,224,166,62,35,224,225,201,28,15,30,50,32,24,38,29,40,43,62,10,205,199,38,201,240,166,254,20,40,244,167,192,33,14,194,17,16,0,6,10,229,53,32,21,44,58,119,125,230,240,246,3,111,126,238,1,119,254,80,40,35,254,81,40,37,225,25,5,32,226,62,10,205,199,38,250,233,223,167,192,205,238,23,240,196,254,5,62,38,40,2,62,5,224,225,201,45,45,54,103,24,219,45,45,54,93,24,213,175,234,198,192,17,192,192,26,111,19,26,103,181,202,142,38,43,124,18,27,125,18,17,1,0,33,194,192,213,205,102,1,17,196,192,33,165,153,205,126,42,175,224,166,209,33,160,192,205,102,1,17,162,192,33,37,154,205,130,42,62,2,234,224,223,201,250,198,192,167,200,250,197,192,254,4,40,178,17,64,0,1,35,152,33,172,192,167,40,35,17,0,1,1,131,152,33,177,192,254,1,40,22,17,0,3,1,227,152,33,182,192,254,2,40,9,17,0,18,1,67,153,33,187,192,205,45,38,201,240,129,167,200,62,2,224,225,201,240,166,167,192,62,4,234,232,223,240,197,167,40,10,62,63,224,166,62,27,224,204,24,55,62,47,205,50,32,33,67,200,17,146,41,14,7,205,216,31,33,131,201,17,202,41,14,6,205,216,31,240,192,254,55,32,20,33,162,192,126,6,88,254,21,48,15,4,254,16,48,10,4,254,5,48,5,62,4,224,225,201,120,224,243,62,144,224,166,62,52,224,225,201,6,8,229,26,34,19,5,32,250,225,213,17,32,0,25,209,13,32,237,201,240,192,254,55,192,240,225,167,192,240,227,254,5,192,33,172,192,1,5,0,126,17,64,0,167,32,23,9,126,17,0,1,167,32,15,9,126,17,0,3,167,32,7,9,17,0,18,126,167,200,54,0,240,169,71,4,197,213,33,160,192,205,102,1,209,193,5,32,243,201,245,62,2,224,227,241,33,2,200,14,18,17,32,0,229,6,10,34,5,32,252,225,25,13,32,244,201,33,194,203,17,22,0,14,2,62,47,6,10,34,5,32,252,25,13,32,246,201,33,0,194,54,0,44,54,24,44,54,63,44,250,19,194,119,230,252,79,240,228,167,32,5,240,197,167,40,29,38,195,240,176,111,94,35,124,254,196,32,3,33,0,195,125,224,176,240,211,167,40,42,246,128,224,211,24,36,38,3,240,4,71,175,5,40,10,60,60,60,60,254,28,40,244,24,243,87,240,174,95,37,40,7,178,177,230,252,185,40,225,122,224,174,123,234,19,194,205,234,38,240,154,224,153,201,250,199,192,167,40,12,240,129,230,176,254,128,32,37,175,234,199,192,240,167,167,32,41,240,152,167,32,36,240,227,167,32,31,62,3,224,167,33,229,255,52,24,38,240,128,230,176,254,128,40,205,33,229,255,54,0,240,153,167,40,7,61,224,153,205,215,38,201,240,152,254,3,200,240,227,167,192,240,154,224,153,33,1,194,126,224,160,198,8,119,205,215,38,205,199,37,167,200,240,160,33,1,194,119,205,215,38,62,1,224,152,234,199,192,240,229,167,40,27,79,240,192,254,55,40,55,17,192,192,26,111,19,26,103,6,0,13,9,124,18,125,27,18,175,224,229,250,1,194,254,24,192,250,2,194,254,63,192,33,251,255,126,254,1,32,13,205,243,127,62,1,224,225,62,2,234,240,223,201,52,201,175,13,40,4,60,39,24,249,95,22,0,33,160,192,205,102,1,62,1,234,206,192,24,194,240,152,254,2,192,62,2,234,248,223,175,224,160,17,163,192,33,66,200,6,16,14,10,229,42,254,47,202,56,34,13,32,247,225,124,18,19,125,18,19,240,160,60,224,160,213,17,32,0,25,209,5,32,223,62,3,224,152,61,224,166,240,160,167,200,71,33,158,255,240,192,254,119,40,23,240,231,128,224,231,120,134,39,34,62,0,142,39,119,48,22,54,153,43,54,153,24,15,126,183,144,40,59,56,57,39,119,230,240,254,144,40,49,120,14,6,33,172,192,6,0,254,1,40,25,33,177,192,6,1,254,2,40,16,33,182,192,6,2,254,3,40,7,33,187,192,6,4,14,7,52,120,224,220,121,234,224,223,201,225,24,139,175,224,158,24,202,240,152,254,3,192,240,166,167,192,17,163,192,240,156,203,71,32,60,26,167,40,82,214,48,103,19,26,111,240,156,254,6,62,140,32,2,62,47,14,10,34,13,32,252,19,26,167,32,229,240,156,60,224,156,254,7,40,5,62,10,224,166,201,175,224,156,62,13,224,166,62,1,224,227,175,224,152,201,26,103,214,48,79,19,26,111,6,10,126,229,97,119,225,35,5,32,247,19,26,167,32,232,24,201,205,98,32,24,221,240,166,167,192,240,227,254,1,192,17,163,192,26,103,19,26,111,213,229,1,224,255,9,209,229,6,10,42,18,19,5,32,250,225,229,209,1,224,255,9,124,254,199,32,235,209,19,26,167,32,218,33,2,200,62,47,6,10,34,5,32,252,205,243,34,62,2,224,227,201,33,163,192,175,6,9,34,5,32,252,201,240,227,254,2,192,33,34,154,17,34,202,205,6,37,201,240,227,254,3,192,33,2,154,17,2,202,205,6,37,201,240,227,254,4,192,33,226,153,17,226,201,205,6,37,201,240,227,254,5,192,33,194,153,17,194,201,205,6,37,201,240,227,254,6,192,33,162,153,17,162,201,205,6,37,201,240,227,254,7,192,33,130,153,17,130,201,205,6,37,201,240,227,254,8,192,33,98,153,17,98,201,205,6,37,240,197,167,240,225,32,8,167,192,62,1,234,248,223,201,254,26,192,240,212,167,40,242,62,5,234,224,223,201,240,227,254,9,192,33,66,153,17,66,201,205,6,37,201,240,227,254,10,192,33,34,153,17,34,201,205,6,37,201,240,227,254,11,192,33,2,153,17,2,201,205,6,37,201,240,227,254,12,192,33,226,152,17,226,200,205,6,37,201,240,227,254,13,192,33,194,152,17,194,200,205,6,37,201,240,227,254,14,192,33,162,152,17,162,200,205,6,37,201,240,227,254,15,192,33,130,152,17,130,200,205,6,37,201,240,227,254,16,192,33,98,152,17,98,200,205,6,37,205,171,36,201,240,227,254,17,192,33,66,152,17,66,200,205,6,37,33,109,156,205,155,36,62,1,224,224,201,240,227,254,18,192,33,34,152,17,34,200,205,6,37,33,109,152,205,155,36,201,240,227,254,19,192,234,199,192,33,2,152,17,2,200,205,6,37,175,224,227,240,197,167,240,225,32,72,167,192,33,78,153,17,159,255,14,2,240,192,254,55,40,8,33,80,153,17,158,255,14,1,205,132,42,240,192,254,55,40,35,240,158,167,32,30,62,100,224,166,62,2,234,232,223,240,197,167,40,3,224,213,201,240,195,254,9,62,5,32,2,62,34,224,225,201,205,98,32,201,254,26,192,240,212,167,40,178,175,224,212,201,240,225,167,192,240,192,254,55,192,17,162,192,205,126,42,201,240,225,167,192,240,192,254,55,192,33,169,255,126,254,9,48,65,240,231,254,10,216,214,10,224,231,52,126,254,21,32,2,54,20,70,175,183,60,39,5,40,2,24,248,71,230,15,79,33,241,152,113,38,156,113,120,230,240,40,13,203,55,79,125,254,240,40,5,33,240,152,24,234,62,2,234,224,223,205,67,27,201,240,231,254,20,216,214,20,24,189,6,10,26,119,44,28,5,32,249,240,227,60,224,227,201,33,3,194,126,224,160,240,129,71,203,72,32,18,203,64,40,55,126,230,3,40,3,53,24,20,126,246,3,119,24,14,126,230,3,254,3,40,3,52,24,4,126,230,252,119,62,3,234,224,223,205,215,38,205,199,37,167,40,13,175,234,224,223,33,3,194,240,160,119,205,215,38,33,2,194,240,129,71,240,128,79,126,224,160,203,96,62,23,32,12,203,97,40,45,240,170,61,224,170,192,62,9,224,170,126,198,8,119,205,215,38,62,4,234,224,223,205,199,37,167,200,33,2,194,175,234,224,223,240,160,119,205,215,38,62,1,224,170,201,203,104,62,23,32,12,203,105,40,243,240,170,61,224,170,192,62,9,224,170,126,214,8,119,62,4,234,224,223,205,215,38,205,199,37,167,200,24,199,33,16,192,6,4,42,224,178,42,167,40,23,224,179,229,197,205,43,42,124,198,48,103,126,254,47,32,11,193,225,44,44,5,32,226,175,224,155,201,193,225,62,1,224,155,201,240,152,254,1,192,33,16,192,6,4,42,224,178,42,167,40,29,224,179,229,197,205,43,42,229,209,193,225,240,65,230,3,32,250,126,18,122,198,48,87,42,18,44,5,32,220,62,2,224,152,33,0,194,54,128,201,250,198,192,254,2,40,70,213,126,183,40,84,61,34,126,60,39,119,230,15,2,13,42,203,55,230,15,40,1,2,197,240,195,71,4,229,205,102,1,225,5,32,248,193,35,35,229,33,35,0,9,209,205,130,42,209,240,195,71,4,33,160,192,229,205,102,1,225,5,32,248,62,2,234,198,192,201,17,162,192,33,37,154,205,130,42,62,2,234,224,223,175,234,198,192,201,209,62,33,224,166,175,234,198,192,250,197,192,60,234,197,192,254,5,192,62,4,224,225,201,33,172,192,6,27,175,34,5,32,252,33,160,192,6,3,34,5,32,252,201,126,230,240,203,55,18,126,230,15,28,18,201,62,2,224,143,175,224,142,62,192,224,141,33,0,194,205,209,42,201,62,1,224,143,62,16,224,142,62,192,224,141,33,0,194,205,209,42,201,62,1,224,143,62,32,224,142,62,192,224,141,33,16,194,205,209,42,201,6,32,62,142,17,32,0,119,25,5,32,251,201,26,254,255,200,34,19,24,248,217,0,24,63,0,128,0,0,255,0,128,143,0,128,0,0,255,0,112,55,28,0,0,0,56,55,28,0,0,0,64,52,32,0,0,0,64,28,32,0,0,0,64,116,32,0,0,0,64,104,33,0,0,0,120,104,33,0,0,0,96,96,42,128,0,0,96,114,42,128,32,0,104,56,62,128,0,0,96,96,54,128,0,0,96,114,54,128,32,0,104,56,50,128,0,0,96,96,46,128,0,0,104,56,60,128,0,0,96,96,58,128,0,0,104,56,48,128,0,128,63,64,68,0,0,128,63,32,74,0,0,128,63,48,70,0,0,128,119,32,72,0,0,128,135,72,76,0,0,128,135,88,78,0,0,128,103,77,80,0,0,128,103,93,82,0,0,128,143,136,84,0,0,128,143,152,85,0,0,0,95,87,44,0,0,128,128,80,52,0,0,128,128,96,52,0,32,0,111,87,88,0,0,128,128,85,52,0,0,128,128,91,52,0,32,33,255,155,1,0,4,62,47,50,11,120,177,32,248,201,42,18,19,11,120,177,32,248,201,205,23,40,1,160,0,205,248,39,33,135,50,17,0,131,1,0,13,205,248,39,201,33,167,65,1,56,1,17,0,128,42,18,19,18,19,11,120,177,32,246,201,205,23,40,1,160,13,205,248,39,201,1,0,16,17,0,128,205,248,39,201,33,0,152,6,18,229,14,20,26,34,19,13,32,250,225,213,17,32,0,25,209,5,32,237,201,6,10,229,26,254,255,40,14,34,19,5,32,246,225,213,17,32,0,25,209,24,234,225,62,2,224,227,201,240,255,224,161,203,135,224,255,240,68,254,145,32,250,240,64,230,127,224,64,240,161,224,255,201,47,47,17,18,29,47,47,47,47,47,41,41,41,47,47,47,47,28,29,10,27,29,47,47,47,41,41,41,41,41,47,47,47,47,47,29,24,47,47,47,47,47,47,41,41,47,47,47,12,24,23,29,18,23,30,14,41,41,41,41,41,41,41,41,47,47,16,10,22,14,47,47,47,47,41,41,41,41,47,47,28,18,23,16,21,14,47,47,47,47,47,0,47,38,47,4,0,47,47,47,47,47,47,47,47,47,47,47,0,47,13,24,30,11,21,14,47,47,47,47,47,0,47,38,47,1,0,0,47,47,47,47,47,47,47,47,47,47,0,47,29,27,18,25,21,14,47,47,47,47,47,0,47,38,47,3,0,0,47,47,47,47,47,47,47,47,47,47,0,47,29,14,29,27,18,28,47,47,47,47,47,0,47,38,47,1,2,0,0,47,47,47,47,47,47,47,47,47,0,47,13,27,24,25,28,47,47,47,47,47,47,47,47,47,47,47,47,47,0,47,47,47,47,47,47,47,47,47,47,47,41,41,41,41,41,41,41,41,41,41,29,17,18,28,47,28,29,10,16,14,47,47,47,47,47,47,47,47,0,47,255,97,98,98,98,98,98,98,99,100,47,47,47,47,47,47,101,100,47,16,10,22,14,47,101,100,47,173,173,173,173,47,101,100,47,24,31,14,27,47,101,100,47,173,173,173,173,47,101,102,105,105,105,105,105,105,106,25,21,14,10,28,14,47,47,41,41,41,41,41,41,47,47,47,29,27,34,47,47,47,47,47,41,41,41,47,47,47,47,47,47,10,16,10,18,23,39,47,47,41,41,41,41,41,47,62,32,224,0,240,0,240,0,47,230,15,203,55,71,62,16,224,0,240,0,240,0,240,0,240,0,240,0,240,0,47,230,15,176,79,240,128,169,161,224,129,121,224,128,62,48,224,0,201,240,178,214,16,203,63,203,63,203,63,17,0,0,95,33,0,152,6,32,25,5,32,252,240,179,214,8,203,63,203,63,203,63,17,0,0,95,25,124,224,181,125,224,180,201,240,181,87,240,180,95,6,4,203,26,203,27,5,32,249,123,214,132,230,254,7,7,198,8,224,178,240,180,230,31,23,23,23,198,8,224,179,201,240,224,167,200,14,3,175,224,224,26,71,203,55,230,15,32,40,240,224,167,62,0,32,2,62,47,34,120,230,15,32,33,240,224,167,62,0,32,9,62,1,185,62,0,40,2,62,47,34,29,13,32,212,175,224,224,201,245,62,1,224,224,241,24,217,245,62,1,224,224,241,24,231,62,192,224,70,62,40,61,32,253,201,124,224,150,125,224,151,126,167,40,29,254,128,40,23,240,150,103,240,151,111,17,16,0,25,240,143,61,224,143,200,24,224,175,224,149,24,233,224,149,6,7,17,134,255,42,18,19,5,32,250,240,137,33,172,43,7,95,22,0,25,94,35,86,26,111,19,26,103,19,26,224,144,19,26,224,145,94,35,86,35,240,140,224,148,126,254,255,40,199,254,253,32,14,240,140,238,32,224,148,35,126,24,8,19,19,24,228,254,254,40,248,224,137,240,135,71,26,79,240,139,203,119,32,6,240,144,128,137,24,10,120,245,240,144,71,241,144,153,222,8,224,147,240,136,71,19,26,19,79,240,139,203,111,32,6,240,145,128,137,24,10,120,245,240,145,71,241,144,153,222,8,224,146,229,240,141,103,240,142,111,240,149,167,40,4,62,255,24,2,240,147,34,240,146,34,240,137,34,240,148,71,240,139,176,71,240,138,176,34,124,224,141,125,224,142,225,195,32,43,104,44,108,44,112,44,116,44,120,44,124,44,128,44,132,44,136,44,140,44,144,44,148,44,152,44,156,44,160,44,164,44,168,44,172,44,176,44,180,44,184,44,188,44,192,44,196,44,200,44,204,44,208,44,212,44,216,44,220,44,224,44,228,44,232,44,236,44,240,44,244,44,248,44,252,44,0,45,4,45,8,45,12,45,16,45,20,45,15,49,20,45,24,45,28,45,32,45,36,45,40,45,44,45,50,49,54,49,48,45,52,45,58,49,62,49,56,45,60,45,64,45,68,45,72,45,76,45,66,49,70,49,76,45,80,45,80,45,84,45,88,45,92,45,96,45,100,45,104,45,108,45,112,45,116,45,120,45,124,45,128,45,132,45,136,45,140,45,144,45,148,45,152,45,156,45,82,49,86,49,90,49,90,49,74,49,78,49,160,45,239,240,176,45,239,240,194,45,239,240,209,45,239,240,226,45,239,240,244,45,239,240,5,46,239,240,19,46,239,240,36,46,239,240,51,46,239,240,68,46,239,240,83,46,239,240,100,46,239,240,118,46,239,240,136,46,239,240,154,46,239,240,172,46,239,240,190,46,239,240,206,46,239,240,224,46,239,240,240,46,239,240,1,47,239,240,18,47,239,240,35,47,239,240,83,47,239,240,100,47,239,240,52,47,239,240,66,47,239,240,117,47,0,232,126,47,0,232,135,47,0,232,144,47,0,232,153,47,0,0,157,47,0,0,161,47,0,0,165,47,0,0,169,47,0,0,173,47,0,0,177,47,0,0,181,47,0,0,185,47,0,0,189,47,0,0,193,47,240,248,204,47,240,248,215,47,240,240,235,47,240,240,0,48,248,248,9,48,248,248,18,48,248,248,25,48,248,248,32,48,240,248,43,48,240,248,54,48,240,240,75,48,240,240,97,48,248,248,106,48,248,248,115,48,248,248,122,48,248,248,129,48,248,248,136,48,248,248,143,48,248,248,150,48,248,248,157,48,248,248,164,48,248,248,175,48,248,248,182,48,248,248,189,48,248,248,196,48,248,248,203,48,248,248,212,48,248,248,221,48,248,248,230,48,248,248,239,48,248,248,248,48,248,248,1,49,248,248,8,49,248,248,142,49,240,240,165,49,248,248,241,49,254,254,254,254,254,254,254,254,132,132,132,254,132,255,241,49,254,254,254,254,254,132,254,254,254,132,254,254,254,132,132,255,241,49,254,254,254,254,254,254,132,254,132,132,132,254,255,241,49,254,254,254,254,132,132,254,254,254,132,254,254,254,132,255,241,49,254,254,254,254,254,254,254,254,129,129,129,254,254,254,129,255,241,49,254,254,254,254,254,129,129,254,254,129,254,254,254,129,255,241,49,254,254,254,254,129,254,254,254,129,129,129,255,241,49,254,254,254,254,254,129,254,254,254,129,254,254,129,129,255,241,49,254,254,254,254,254,254,254,254,138,139,139,143,255,241,49,254,128,254,254,254,136,254,254,254,136,254,254,254,137,255,241,49,254,254,254,254,254,254,254,254,138,139,139,143,255,241,49,254,128,254,254,254,136,254,254,254,136,254,254,254,137,255,241,49,254,254,254,254,254,254,254,254,254,131,131,254,254,131,131,255,241,49,254,254,254,254,254,254,254,254,254,131,131,254,254,131,131,255,241,49,254,254,254,254,254,254,254,254,254,131,131,254,254,131,131,255,241,49,254,254,254,254,254,254,254,254,254,131,131,254,254,131,131,255,241,49,254,254,254,254,254,254,254,254,130,130,254,254,254,130,130,255,241,49,254,254,254,254,254,130,254,254,130,130,254,254,130,255,241,49,254,254,254,254,254,254,254,254,130,130,254,254,254,130,130,255,241,49,254,254,254,254,254,130,254,254,130,130,254,254,130,255,241,49,254,254,254,254,254,254,254,254,254,134,134,254,134,134,255,241,49,254,254,254,254,134,254,254,254,134,134,254,254,254,134,255,241,49,254,254,254,254,254,254,254,254,254,134,134,254,134,134,255,241,49,254,254,254,254,134,254,254,254,134,134,254,254,254,134,255,241,49,254,254,254,254,254,133,254,254,133,133,133,255,241,49,254,254,254,254,254,133,254,254,133,133,254,254,254,133,255,241,49,254,254,254,254,254,254,254,254,133,133,133,254,254,133,255,241,49,254,254,254,254,254,133,254,254,254,133,133,254,254,133,255,17,50,10,37,29,34,25,14,255,17,50,11,37,29,34,25,14,255,17,50,12,37,29,34,25,14,255,17,50,47,24,15,15,47,47,255,17,50,0,255,17,50,1,255,17,50,2,255,17,50,3,255,17,50,4,255,17,50,5,255,17,50,6,255,17,50,7,255,17,50,8,255,17,50,9,255,33,50,47,1,47,17,32,33,48,49,255,33,50,47,3,18,19,34,35,50,51,255,241,49,47,5,253,5,47,47,21,4,23,36,37,38,39,52,53,54,47,255,241,49,8,55,253,55,253,8,24,25,20,27,40,41,42,43,96,112,54,47,255,33,50,185,253,185,186,253,186,255,33,50,130,253,130,131,253,131,255,33,50,9,10,58,59,255,33,50,11,64,124,111,255,33,50,47,15,47,31,95,44,47,63,255,33,50,108,60,75,76,91,92,107,47,255,241,49,47,77,253,77,47,47,93,94,78,95,109,110,47,47,125,253,125,47,255,241,49,8,119,253,119,253,8,24,120,67,83,122,123,80,47,47,2,253,125,47,255,33,50,185,253,185,186,253,186,255,33,50,130,253,130,131,253,131,255,33,50,9,10,58,59,255,33,50,11,64,124,111,255,33,50,220,221,224,225,255,33,50,222,223,224,225,255,33,50,222,226,224,228,255,33,50,220,238,224,227,255,33,50,229,230,231,232,255,33,50,253,230,253,229,253,232,253,231,255,33,50,233,234,235,236,255,33,50,237,234,235,236,255,33,50,242,244,243,191,255,33,50,244,242,191,243,255,33,50,194,253,194,195,253,195,255,33,50,196,253,196,197,253,197,255,33,50,220,253,220,239,253,239,255,33,50,240,253,240,241,253,241,255,33,50,220,253,240,241,253,239,255,33,50,240,253,220,239,253,241,255,33,50,189,190,187,188,255,33,50,185,186,218,219,255,19,49,224,240,61,50,192,193,197,198,204,205,117,118,164,165,166,167,84,85,86,87,68,69,70,71,160,161,162,163,156,157,158,159,255,94,49,248,232,100,49,240,232,109,49,0,0,115,49,0,0,121,49,0,0,130,49,0,0,229,49,0,0,235,49,0,0,172,49,216,248,196,49,232,248,214,49,240,248,117,50,99,100,101,255,117,50,99,100,101,102,103,104,255,117,50,65,65,65,255,117,50,66,66,66,255,117,50,82,82,82,98,98,98,255,117,50,81,81,81,97,97,97,113,113,113,255,241,49,47,47,47,47,47,47,47,47,99,100,253,100,253,99,102,103,253,103,253,102,255,33,50,47,47,99,100,255,33,50,0,253,0,16,253,16,79,253,79,128,253,128,128,253,128,129,253,129,151,253,151,255,33,50,152,253,152,153,253,153,128,253,128,154,253,154,155,253,155,255,33,50,168,253,168,169,253,169,170,253,170,171,253,171,255,33,50,65,47,47,255,33,50,82,47,98,255,0,0,0,8,0,16,0,24,8,0,8,8,8,16,8,24,16,0,16,8,16,16,16,24,24,0,24,8,24,16,24,24,0,0,0,8,0,16,0,24,0,32,0,40,0,48,0,56,0,0,0,8,8,0,8,8,16,0,16,8,24,0,24,8,32,0,32,8,40,0,40,8,48,0,48,8,0,8,0,16,8,8,8,16,16,0,16,8,16,16,16,24,24,0,24,8,24,16,24,24,32,0,32,8,32,16,32,24,40,0,40,8,40,16,40,24,48,0,48,8,48,16,48,24,56,0,56,8,56,16,56,24,0,0,0,8,0,16,8,0,8,8,8,16,16,0,16,8,16,16,127,127,127,127,127,127,127,127,127,127,124,124,120,121,120,123,255,255,255,255,255,255,255,255,255,255,0,0,0,255,0,0,255,255,255,255,255,255,255,255,255,255,63,63,31,159,31,223,120,123,120,121,124,124,127,127,127,127,127,127,127,127,127,127,0,0,0,255,0,0,255,255,255,255,255,255,255,255,255,255,31,223,31,159,63,63,255,255,255,255,255,255,255,255,255,255,120,122,120,122,120,122,120,122,120,122,120,122,120,122,120,122,31,95,31,95,31,95,31,95,31,95,31,95,31,95,31,95,255,255,255,255,255,255,255,248,248,240,242,225,245,227,242,230,255,255,255,255,255,255,255,0,0,0,0,255,255,255,0,0,255,255,255,255,255,255,255,31,31,15,79,135,175,199,79,103,242,230,242,230,242,230,242,230,242,230,242,230,242,230,242,230,79,103,79,103,79,103,79,103,79,103,79,103,79,103,79,103,242,230,245,227,242,225,248,240,255,248,255,255,255,255,255,255,0,0,255,255,0,255,0,0,255,0,255,255,255,255,255,255,79,103,175,199,79,135,31,15,255,31,255,255,255,255,255,255,120,123,120,121,124,124,127,127,127,127,124,124,120,121,120,123,31,223,31,159,63,63,255,255,255,255,63,63,31,159,31,223,0,0,0,255,0,0,255,255,255,255,0,0,0,255,0,0,0,0,0,127,0,0,127,127,127,127,127,127,127,127,127,127,120,122,120,122,120,122,120,122,120,122,0,2,0,122,0,122,31,95,31,95,31,95,31,95,31,95,0,64,0,95,0,95,0,0,0,255,0,0,0,255,0,255,0,0,0,255,0,0,0,0,0,0,63,63,63,63,48,48,48,48,51,50,51,48,0,0,0,0,255,255,255,255,0,0,0,0,255,2,255,32,0,0,0,0,252,252,252,252,12,12,12,12,204,12,204,12,51,48,51,48,51,48,51,48,51,48,51,48,51,50,51,48,204,12,204,76,204,12,204,12,204,12,204,140,204,12,204,12,51,48,51,48,48,48,48,48,63,63,63,63,0,0,0,0,255,4,255,64,0,0,0,0,255,255,255,255,0,0,0,0,204,12,204,76,12,12,12,12,252,252,252,252,0,0,0,0,0,0,255,255,255,0,255,2,255,32,255,0,255,4,255,0,255,0,255,2,255,64,255,0,255,8,255,1,255,67,255,7,255,4,255,64,255,2,255,0,255,0,255,255,255,255,0,0,255,0,255,64,255,2,255,0,255,16,255,128,255,194,255,224,254,6,254,70,254,6,254,6,254,22,254,134,254,6,254,6,127,100,127,96,127,98,127,96,127,96,127,104,127,98,127,96,255,2,255,64,255,0,255,0,255,8,255,128,255,31,240,16,255,2,255,32,255,0,255,0,255,4,255,0,255,255,0,0,255,7,255,19,255,1,255,0,255,64,255,0,255,255,8,8,0,0,255,255,255,255,255,0,255,2,255,32,255,255,0,0,255,224,255,200,255,128,255,0,255,2,255,0,255,255,8,8,255,0,255,2,255,64,255,0,255,2,255,0,255,248,15,8,240,16,240,16,240,16,240,80,240,16,240,16,240,16,240,16,15,8,15,10,15,8,15,8,15,8,15,8,15,9,15,8,0,0,0,127,0,0,127,127,127,127,124,124,120,121,120,123,0,0,0,255,0,0,255,255,255,255,63,63,31,159,31,223,127,127,127,127,127,127,127,127,127,127,0,0,0,127,0,0,0,0,0,0,0,0,170,170,0,0,0,0,0,0,0,0,0,0,0,0,15,15,31,31,56,56,51,48,54,48,52,48,0,0,0,0,255,255,255,255,0,0,255,0,0,0,0,0,0,0,0,0,240,240,248,248,28,28,204,12,108,12,44,12,52,48,52,48,52,48,52,48,52,48,52,48,52,48,52,48,44,12,44,12,44,12,44,12,44,12,44,12,44,12,44,12,52,48,54,48,51,48,56,56,31,31,15,15,0,0,0,0,0,123,0,121,0,124,0,127,0,127,0,0,0,127,0,0,0,223,0,159,0,63,0,255,0,255,0,0,0,255,0,0,0,0,0,0,255,0,0,0,255,255,255,255,0,0,0,0,44,12,108,12,204,12,28,28,248,248,240,240,0,0,0,0,8,8,255,255,255,2,255,0,255,32,255,0,255,2,255,0,0,0,255,255,255,255,255,0,255,2,255,32,255,255,8,8,255,7,255,19,255,1,255,0,255,64,255,0,255,255,0,0,255,224,255,200,255,128,255,0,255,2,255,0,255,255,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,255,0,255,2,255,0,255,32,255,2,255,0,255,255,8,8,240,16,255,31,240,31,240,31,240,31,240,31,255,95,240,16,0,0,255,255,0,255,0,255,0,255,0,255,255,255,0,0,8,8,255,255,0,255,0,255,0,255,0,255,255,255,8,8,15,8,255,248,15,248,15,248,15,248,15,248,255,250,15,8,255,7,255,67,255,1,255,0,255,0,255,128,255,31,240,16,255,224,255,194,255,128,255,0,255,34,255,0,255,248,15,8,0,0,0,0,0,0,60,0,60,0,0,0,0,0,0,0,0,0,60,0,78,0,78,0,126,0,78,0,78,0,0,0,0,0,124,0,102,0,124,0,102,0,102,0,124,0,0,0,0,0,60,0,102,0,96,0,96,0,102,0,60,0,0,0,221,68,255,68,255,255,119,17,255,17,255,255,221,68,255,68,255,255,119,17,255,17,255,255,221,68,255,68,255,255,119,17,255,17,255,255,221,68,255,68,255,255,119,17,255,17,255,255,0,0,126,0,24,0,24,0,24,0,24,0,24,0,0,0,0,0,102,0,102,0,60,0,24,0,24,0,24,0,0,0,255,255,247,137,221,163,255,129,183,201,253,131,215,169,255,129,255,255,255,129,255,189,231,165,231,165,255,189,255,129,255,255,255,255,255,129,255,129,255,153,255,153,255,129,255,129,255,255,255,255,129,129,189,189,189,189,189,189,189,189,129,129,255,255,255,255,129,255,129,255,129,255,129,255,129,255,129,255,255,255,255,255,255,129,195,129,223,133,223,133,255,189,255,129,255,255,255,255,129,255,189,255,165,231,165,231,189,255,129,255,255,255,255,255,129,129,189,131,189,131,189,131,189,131,129,255,255,255,237,147,191,193,245,139,223,161,253,131,175,209,251,133,223,161,253,131,239,145,187,197,239,145,189,195,247,137,223,161,255,255,255,255,219,164,255,128,181,202,255,128,221,162,247,136,255,255,255,255,87,168,253,2,223,32,123,132,238,17,187,68,255,255,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,119,137,223,33,251,5,175,81,253,3,215,41,255,255,0,0,60,0,102,0,102,0,102,0,102,0,60,0,0,0,0,0,24,0,56,0,24,0,24,0,24,0,60,0,0,0,0,0,60,0,78,0,14,0,60,0,112,0,126,0,0,0,0,0,124,0,14,0,60,0,14,0,14,0,124,0,0,0,0,0,60,0,108,0,76,0,78,0,126,0,12,0,0,0,0,0,124,0,96,0,124,0,14,0,78,0,60,0,0,0,0,0,60,0,96,0,124,0,102,0,102,0,60,0,0,0,0,0,126,0,6,0,12,0,24,0,56,0,56,0,0,0,0,0,60,0,78,0,60,0,78,0,78,0,60,0,0,0,0,0,60,0,78,0,78,0,62,0,14,0,60,0,0,0,0,0,124,0,102,0,102,0,124,0,96,0,96,0,0,0,0,0,126,0,96,0,124,0,96,0,96,0,126,0,0,0,0,0,126,0,96,0,96,0,124,0,96,0,96,0,0,0,0,0,60,0,102,0,102,0,102,0,102,0,60,0,0,0,0,0,60,0,102,0,96,0,110,0,102,0,62,0,0,0,0,0,70,0,110,0,126,0,86,0,70,0,70,0,0,0,0,0,70,0,70,0,70,0,70,0,78,0,60,0,0,0,0,0,60,0,96,0,60,0,14,0,78,0,60,0,0,0,0,0,60,0,24,0,24,0,24,0,24,0,60,0,0,0,0,0,96,0,96,0,96,0,96,0,96,0,126,0,0,0,0,0,70,0,70,0,70,0,70,0,44,0,24,0,0,0,0,0,124,0,102,0,102,0,124,0,104,0,102,0,0,0,0,0,70,0,102,0,118,0,94,0,78,0,70,0,0,0,0,0,124,0,78,0,78,0,78,0,78,0,124,0,0,0,255,255,255,0,255,0,255,0,255,16,255,128,255,2,255,0,0,0,255,255,255,255,255,0,255,2,255,32,255,255,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,255,255,0,255,0,255,0,255,0,255,255,255,128,128,128,128,255,255,255,0,255,2,255,32,255,0,255,0,255,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,24,31,33,62,71,127,95,127,57,48,123,98,251,178,255,160,255,194,127,84,127,92,63,46,127,99,191,248,55,255,1,1,1,1,1,1,1,1,1,1,1,1,1,1,131,131,1,1,1,1,1,1,1,1,1,1,1,1,1,1,255,255,255,255,1,1,1,1,1,1,1,1,1,1,1,1,131,131,255,255,217,135,217,135,217,135,217,135,217,135,217,135,217,135,217,135,217,135,217,135,217,135,217,135,217,135,217,135,255,255,217,135,217,135,217,135,217,135,217,135,217,135,217,135,217,135,0,56,0,56,0,56,0,56,0,56,0,56,0,56,0,56,124,0,124,0,124,0,124,0,124,0,124,0,127,0,255,0,0,0,0,0,8,0,8,0,8,0,8,0,28,0,28,0,0,0,0,14,1,29,30,6,42,42,39,39,16,19,12,13,0,0,192,192,32,32,16,208,208,16,240,48,200,232,8,232,4,7,3,3,12,12,16,16,53,32,42,32,63,63,12,12,40,232,216,192,64,64,32,32,80,16,176,16,240,240,192,192,0,224,1,113,50,66,52,53,85,84,79,78,33,39,24,27,0,0,128,128,64,64,32,160,160,32,224,96,144,240,8,200,184,184,132,132,132,132,252,252,146,146,146,146,108,108,238,238,7,7,31,24,62,32,127,79,127,95,112,112,162,162,176,176,180,180,100,100,60,60,46,46,39,39,16,16,108,124,207,179,3,3,3,3,3,2,7,6,9,9,22,23,18,17,14,15,8,9,8,8,15,15,8,8,9,9,10,10,6,6,14,14,3,3,3,3,3,2,31,30,33,33,74,85,74,117,10,53,10,21,8,8,15,15,8,8,9,9,10,10,6,6,14,14,0,0,102,0,108,0,120,0,120,0,108,0,102,0,0,0,0,0,70,0,44,0,24,0,56,0,100,0,66,0,0,0,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,248,0,224,0,192,0,128,0,128,0,0,0,0,0,0,0,127,0,31,0,15,0,7,0,7,0,3,0,3,0,3,0,0,0,128,0,128,0,192,0,224,0,248,0,255,0,255,0,3,0,7,0,7,0,15,0,31,0,127,0,255,0,255,0,255,255,255,255,0,255,255,255,0,255,255,0,0,255,255,0,255,0,255,0,255,1,254,2,254,2,252,4,252,4,252,4,255,2,255,1,255,1,1,1,255,1,1,1,255,1,1,1,2,2,2,2,3,3,4,5,8,9,17,18,33,38,67,76,0,0,1,1,2,2,4,4,8,9,16,19,32,39,32,47,135,152,6,57,14,113,30,225,60,195,60,195,120,135,120,135,64,79,64,79,128,159,128,159,128,159,128,159,128,159,128,159,248,7,240,15,240,15,240,15,240,15,240,15,240,15,248,7,64,95,64,79,32,47,32,39,16,17,15,15,4,4,7,7,120,135,124,131,60,195,30,225,15,240,255,255,255,0,255,255,255,0,255,0,255,0,0,0,255,0,0,0,255,0,0,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,16,0,56,0,124,0,254,0,254,0,254,0,124,0,0,0,2,3,1,1,2,2,4,4,13,8,10,8,15,15,3,3,40,232,240,208,48,48,8,8,84,4,172,4,252,252,48,48,0,0,3,3,3,3,3,2,7,6,9,9,8,8,11,11,0,0,192,192,196,196,232,104,144,240,168,248,72,120,248,184,0,0,7,7,7,7,7,4,7,4,11,11,16,16,23,23,0,0,128,128,128,128,224,224,144,240,168,248,72,120,184,184,8,8,15,15,8,8,15,15,9,9,9,9,6,6,14,14,228,228,34,34,32,32,224,224,32,32,32,32,192,192,224,224,24,24,152,152,152,152,248,248,156,152,60,60,60,60,126,126,127,0,254,254,126,126,254,218,126,90,126,126,252,252,248,248,254,14,254,254,126,126,254,218,126,90,126,126,252,252,248,248,128,128,131,131,131,131,195,2,239,46,151,151,71,68,36,36,0,0,192,192,192,192,192,64,224,96,248,248,228,36,52,52,23,20,23,20,23,20,28,31,23,23,15,15,30,30,0,0,244,36,248,40,232,40,56,248,232,232,144,144,112,112,120,120,3,3,3,3,3,2,15,14,17,17,55,55,113,82,125,78,192,192,192,192,192,64,192,64,160,160,16,16,255,255,207,51,127,64,63,63,8,8,15,15,9,9,9,9,6,6,14,14,252,252,32,32,32,32,224,224,32,32,32,32,192,192,224,224,3,3,3,3,3,2,7,6,9,9,51,51,119,84,115,76,24,24,216,216,216,216,248,120,220,88,188,188,60,60,126,126,9,14,7,7,8,15,8,15,9,15,10,14,6,6,14,14,0,0,3,3,3,3,3,2,255,126,201,63,120,127,9,15,4,4,7,7,184,191,192,255,255,255,0,0,0,0,0,0,0,0,120,120,120,120,123,72,96,95,182,176,132,132,184,184,132,132,132,132,132,132,250,250,146,146,158,158,103,103,224,224,0,0,0,0,120,120,120,120,120,72,64,126,180,176,132,132,42,123,47,47,47,47,47,47,47,47,47,47,123,48,49,49,49,49,49,50,42,124,47,47,47,47,47,47,47,47,47,47,124,68,28,12,24,27,14,69,42,125,47,47,47,47,47,47,47,47,47,47,125,103,70,70,70,70,70,104,42,123,47,47,47,47,47,47,47,47,47,47,123,47,47,47,47,47,0,47,42,124,47,47,47,47,47,47,47,47,47,47,124,67,52,52,52,52,52,52,42,125,47,47,47,47,47,47,47,47,47,47,125,48,49,49,49,49,49,50,42,123,47,47,47,47,47,47,47,47,47,47,123,54,21,14,31,14,21,55,42,124,47,47,47,47,47,47,47,47,47,47,124,54,47,47,47,47,47,55,42,125,47,47,47,47,47,47,47,47,47,47,125,64,66,66,66,66,66,65,42,123,47,47,47,47,47,47,47,47,47,47,123,54,21,18,23,14,28,55,42,124,47,47,47,47,47,47,47,47,47,47,124,54,47,47,47,47,47,55,42,125,47,47,47,47,47,47,47,47,47,47,125,51,52,52,52,52,52,53,42,123,47,47,47,47,47,47,47,47,47,47,123,43,56,57,57,57,57,58,42,124,47,47,47,47,47,47,47,47,47,47,124,43,59,47,47,47,47,60,42,125,47,47,47,47,47,47,47,47,47,47,125,43,59,47,47,47,47,60,42,123,47,47,47,47,47,47,47,47,47,47,123,43,59,47,47,47,47,60,42,124,47,47,47,47,47,47,47,47,47,47,124,43,59,47,47,47,47,60,42,125,47,47,47,47,47,47,47,47,47,47,125,43,61,62,62,62,62,63,42,123,47,47,47,47,47,47,47,47,47,47,123,48,49,49,49,49,49,50,42,124,47,47,47,47,47,47,47,47,47,47,124,54,21,14,31,14,21,55,42,125,47,47,47,47,47,47,47,47,47,47,125,54,47,47,47,47,47,55,42,123,47,47,47,47,47,47,47,47,47,47,123,64,66,66,66,66,66,65,42,124,47,47,47,47,47,47,47,47,47,47,124,54,17,18,16,17,47,55,42,125,47,47,47,47,47,47,47,47,47,47,125,54,47,47,47,47,47,55,42,123,47,47,47,47,47,47,47,47,47,47,123,51,52,52,52,52,52,53,42,124,47,47,47,47,47,47,47,47,47,47,124,43,142,142,142,142,142,142,42,125,47,47,47,47,47,47,47,47,47,47,125,48,49,49,49,49,49,50,42,123,47,47,47,47,47,47,47,47,47,47,123,54,21,18,23,14,28,55,42,124,47,47,47,47,47,47,47,47,47,47,124,54,47,47,2,5,47,55,42,125,47,47,47,47,47,47,47,47,47,47,125,51,52,52,52,52,52,53,42,123,47,47,47,47,47,47,47,47,47,47,123,43,56,57,57,57,57,58,42,124,47,47,47,47,47,47,47,47,47,47,124,43,59,47,47,47,47,60,42,125,47,47,47,47,47,47,47,47,47,47,125,43,59,47,47,47,47,60,42,123,47,47,47,47,47,47,47,47,47,47,123,43,59,47,47,47,47,60,42,124,47,47,47,47,47,47,47,47,47,47,124,43,59,47,47,47,47,60,42,125,47,47,47,47,47,47,47,47,47,47,125,43,61,62,62,62,62,63,0,60,102,102,102,102,60,0,0,24,56,24,24,24,60,0,0,60,78,14,60,112,126,0,0,124,14,60,14,14,124,0,0,60,108,76,78,126,12,0,0,124,96,124,14,78,60,0,0,60,96,124,102,102,60,0,0,126,6,12,24,56,56,0,0,60,78,60,78,78,60,0,0,60,78,78,62,14,60,0,0,60,78,78,126,78,78,0,0,124,102,124,102,102,124,0,0,60,102,96,96,102,60,0,0,124,78,78,78,78,124,0,0,126,96,124,96,96,126,0,0,126,96,96,124,96,96,0,0,60,102,96,110,102,62,0,0,70,70,126,70,70,70,0,0,60,24,24,24,24,60,0,0,30,12,12,108,108,56,0,0,102,108,120,120,108,102,0,0,96,96,96,96,96,126,0,0,70,110,126,86,70,70,0,0,70,102,118,94,78,70,0,0,60,102,102,102,102,60,0,0,124,102,102,124,96,96,0,0,60,98,98,106,100,58,0,0,124,102,102,124,104,102,0,0,60,96,60,14,78,60,0,0,126,24,24,24,24,24,0,0,70,70,70,70,78,60,0,0,70,70,70,70,44,24,0,0,70,70,86,126,110,70,0,0,70,44,24,56,100,66,0,0,102,102,60,24,24,24,0,0,126,14,28,56,112,126,0,0,0,0,0,0,96,96,0,0,0,0,60,60,0,0,0,0,0,34,20,8,20,34,0,0,0,54,54,95,73,95,65,127,65,62,34,28,20,8,8,255,255,255,129,193,191,193,191,193,191,193,191,129,255,255,255,170,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,255,0,255,64,255,2,255,0,255,16,255,128,255,2,255,0,240,16,255,31,255,0,255,64,255,0,255,2,255,64,255,0,15,8,255,248,255,0,255,2,255,0,255,64,255,2,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,24,56,56,24,24,24,24,24,24,60,60,0,0,0,0,60,60,78,78,78,78,62,62,14,14,60,60,0,0,0,0,60,60,78,78,60,60,78,78,78,78,60,60,0,0,56,56,68,68,186,186,162,162,186,186,68,68,56,56,198,198,230,230,230,230,214,214,214,214,206,206,206,206,198,198,192,192,192,192,0,0,219,219,221,221,217,217,217,217,217,217,0,0,48,48,120,120,51,51,182,182,183,183,182,182,179,179,0,0,0,0,0,0,205,205,110,110,236,236,12,12,236,236,1,1,1,1,1,1,143,143,217,217,217,217,217,217,207,207,128,128,128,128,128,128,158,158,179,179,179,179,179,179,158,158,255,0,255,0,255,0,239,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,231,0,231,0,255,0,255,0,255,0,0,255,255,255,0,255,0,255,255,0,0,255,255,0,255,0,0,255,255,255,1,255,2,254,254,2,4,252,252,4,252,4,0,255,255,255,128,255,64,127,255,64,224,63,255,32,191,96,255,0,255,0,255,1,254,2,254,2,252,4,252,4,252,4,255,0,255,0,255,128,127,64,255,64,255,32,255,32,191,96,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,255,2,255,1,255,1,255,1,255,1,255,1,255,1,255,1,127,192,255,128,255,128,255,128,255,128,255,128,255,128,255,128,254,2,254,2,255,3,252,5,248,9,241,18,225,38,195,76,127,192,127,192,255,192,191,96,159,112,175,88,39,220,51,206,255,0,255,1,254,2,252,4,248,9,240,19,224,39,224,47,135,152,6,57,14,113,30,225,60,195,60,195,120,135,120,135,53,203,50,205,58,197,121,134,120,135,120,135,124,131,124,131,255,0,255,128,127,192,63,224,159,112,79,184,103,156,55,204,192,79,192,79,128,159,128,159,128,159,128,159,128,159,128,159,248,7,240,15,240,15,240,15,240,15,240,15,240,15,248,7,124,131,126,129,126,129,62,193,63,192,31,224,31,224,31,224,51,206,27,230,9,247,13,243,13,243,13,243,13,243,9,247,192,95,192,79,224,47,224,39,240,17,191,79,12,244,7,255,120,135,124,131,60,195,30,225,15,240,255,255,255,0,255,255,15,240,15,240,14,241,14,241,6,249,255,255,197,63,255,255,27,230,19,238,55,204,39,220,79,184,252,243,252,163,224,255,254,2,254,2,191,67,28,229,184,73,177,82,161,102,67,204,255,0,255,0,255,0,255,0,255,0,255,0,239,16,199,56,255,0,251,4,251,4,251,4,251,4,241,14,241,14,241,14,131,124,1,254,1,254,1,254,131,124,255,0,131,124,131,124,241,14,224,31,224,31,224,31,224,31,224,31,128,127,128,127,247,8,235,20,247,8,247,8,227,28,227,28,99,156,1,254,0,0,96,96,112,112,120,120,120,120,112,112,96,96,0,0,0,0,48,48,112,112,48,48,48,48,48,48,120,120,0,0,224,224,240,224,251,224,252,224,252,225,252,225,252,225,252,225,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,7,7,15,7,223,7,63,7,63,135,63,135,63,135,63,135,252,225,252,225,252,225,252,225,252,225,252,225,252,225,252,225,63,135,63,135,63,135,63,135,63,135,63,135,63,135,63,135,252,225,252,225,252,225,252,225,252,224,255,231,255,239,224,255,0,0,0,0,0,0,0,255,0,0,255,255,255,255,0,255,63,135,63,135,63,135,63,135,63,7,255,231,255,247,7,255,248,0,224,0,192,0,128,0,128,0,0,0,0,0,0,0,127,0,31,0,15,0,7,0,7,0,3,0,3,0,3,0,0,0,128,0,128,0,192,0,224,0,248,0,255,0,255,0,3,0,7,0,7,0,15,0,31,0,127,0,255,0,255,0,1,1,1,1,129,129,193,193,193,193,225,225,241,241,249,249,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,126,126,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,63,63,159,159,143,143,207,207,231,231,243,243,247,247,224,224,224,224,224,224,224,224,224,224,192,192,192,192,128,128,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,0,0,124,124,71,71,65,65,64,64,64,64,64,64,127,64,0,0,1,1,1,1,129,129,193,193,65,65,97,97,225,97,0,0,254,254,6,6,6,6,6,6,6,6,6,6,254,6,0,0,27,27,50,50,89,89,76,76,140,140,134,134,255,131,0,0,255,255,1,1,1,1,129,129,65,65,65,65,63,33,0,0,190,190,136,136,136,136,136,136,136,136,128,128,128,128,0,0,136,136,216,216,168,168,136,136,136,136,0,0,0,0,127,64,127,64,127,64,127,64,127,64,127,64,127,64,71,127,225,97,225,97,225,97,225,97,225,97,193,193,193,193,129,129,254,6,254,6,254,6,254,6,254,6,254,6,254,6,6,254,255,131,255,129,127,64,127,64,127,64,63,32,63,32,16,31,31,17,159,145,207,201,199,197,227,99,243,51,249,25,8,248,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,95,127,120,120,96,96,80,112,80,112,72,120,68,124,126,126,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,254,6,254,6,254,6,254,6,254,6,254,6,254,254,254,8,15,68,71,100,103,114,115,81,113,89,121,76,124,126,126,12,252,6,254,3,255,1,255,1,255,0,255,128,255,127,127,0,0,0,0,0,0,128,128,128,128,192,192,192,192,224,224,126,126,127,127,127,127,127,127,127,127,127,127,127,127,127,127,0,0,3,3,2,2,2,2,2,2,2,2,2,2,3,2,0,0,251,251,10,10,18,18,34,34,34,34,66,66,195,66,0,0,253,253,13,13,12,12,12,12,12,12,12,12,252,12,0,0,252,252,12,12,140,140,76,76,76,76,44,44,60,44,3,2,3,2,3,3,3,3,2,2,0,0,0,0,0,0,131,130,131,130,3,2,3,2,3,2,3,2,3,2,2,3,252,12,252,12,252,12,252,12,252,12,252,12,252,12,12,252,28,28,28,28,12,12,12,12,4,4,0,0,0,0,0,0,2,3,2,3,2,3,2,3,2,3,2,3,2,3,3,3,12,252,12,252,12,252,12,252,12,252,12,252,12,252,252,252,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,1,1,3,3,7,7,15,15,31,31,63,63,127,127,0,0,255,255,131,131,131,131,131,131,131,131,131,131,255,131,0,0,127,127,32,32,16,16,8,8,4,4,2,2,1,1,0,0,243,243,50,50,50,50,50,50,50,50,50,50,243,50,255,131,255,131,255,131,255,131,255,131,255,131,255,131,131,255,0,0,0,0,1,1,3,3,7,7,15,11,31,19,35,63,243,178,115,114,51,51,19,19,2,2,0,0,0,0,0,0,131,255,131,255,131,255,131,255,131,255,131,255,131,255,255,255,67,127,35,63,19,31,11,15,7,7,3,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,16,16,48,48,112,112,0,0,120,120,156,156,28,28,120,120,224,224,252,252,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,27,27,27,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,96,96,96,32,32,0,0,27,27,27,27,9,9,0,0,0,0,96,96,96,96,0,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,155,29,22,47,10,23,13,47,51,1,9,8,7,47,14,21,24,27,16,156,47,29,14,29,27,18,28,47,21,18,12,14,23,28,14,13,47,29,24,47,47,47,47,47,11,30,21,21,14,29,47,25,27,24,24,15,47,47,47,47,47,47,47,47,28,24,15,29,32,10,27,14,47,10,23,13,47,47,47,47,47,47,47,28,30,11,37,21,18,12,14,23,28,14,13,47,29,24,47,47,47,47,47,47,47,47,23,18,23,29,14,23,13,24,36,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,51,1,9,8,9,47,11,30,21,21,14,29,47,25,27,24,24,15,47,47,47,47,47,47,47,28,24,15,29,32,10,27,14,36,47,47,47,47,47,47,47,47,51,48,49,50,49,47,52,53,54,55,56,57,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,10,21,21,47,27,18,16,17,29,28,47,27,14,28,14,27,31,14,13,36,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,24,27,18,16,18,23,10,21,47,12,24,23,12,14,25,29,156,47,47,13,14,28,18,16,23,47,10,23,13,47,25,27,24,16,27,10,22,47,11,34,47,10,21,14,33,14,34,47,25,10,35,17,18,29,23,24,31,157,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,90,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,92,93,128,129,130,131,144,145,146,129,130,131,144,108,109,110,111,112,113,114,94,93,132,133,134,135,147,148,149,133,134,135,147,115,116,117,118,119,120,47,94,93,47,136,137,47,150,151,152,136,137,47,150,121,122,123,124,125,126,47,94,93,47,138,139,47,142,143,107,138,139,47,142,127,102,103,104,105,106,47,94,95,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,97,142,60,60,60,60,60,60,60,60,60,60,60,60,60,61,62,60,60,60,142,142,140,140,98,99,140,140,58,140,140,140,140,140,58,66,67,59,140,140,142,142,58,140,100,101,140,140,140,140,59,140,140,140,140,68,69,140,140,140,142,142,140,140,140,140,140,140,140,140,140,140,140,140,70,71,72,73,63,64,142,142,140,140,140,140,58,140,140,140,140,83,84,140,74,75,76,77,66,67,142,142,140,140,140,140,140,140,140,140,84,85,86,87,78,79,80,81,82,69,142,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,47,47,89,25,21,10,34,14,27,47,47,47,153,25,21,10,34,14,27,47,47,47,154,154,154,154,154,154,154,47,47,47,154,154,154,154,154,154,154,47,47,47,47,47,51,48,49,50,49,47,52,53,54,55,56,57,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,71,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,73,74,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,75,74,44,44,44,80,81,81,81,81,81,81,81,81,81,82,44,44,44,44,75,74,44,44,44,83,16,10,22,14,47,29,34,25,14,84,44,44,44,44,75,74,44,85,86,109,88,88,88,88,88,169,88,88,88,110,86,86,90,44,75,74,44,91,120,119,126,127,154,155,47,170,121,119,126,127,154,155,92,44,75,74,44,45,79,79,79,79,79,79,79,172,79,79,79,79,79,79,46,44,75,74,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,75,74,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,75,74,44,44,44,80,81,81,81,81,81,81,81,81,81,81,82,44,44,44,75,74,44,44,44,83,22,30,28,18,12,47,29,34,25,14,84,44,44,44,75,74,44,85,86,109,88,88,88,88,88,169,88,88,88,88,110,86,90,44,75,74,44,91,120,119,126,127,154,155,47,170,121,119,126,127,154,155,92,44,75,74,44,113,114,114,114,114,114,114,114,171,114,114,114,114,114,114,116,44,75,74,44,91,122,119,126,127,154,155,47,170,47,157,156,156,47,47,92,44,75,74,44,45,79,79,79,79,79,79,79,172,79,79,79,79,79,79,46,44,75,74,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,75,76,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,78,71,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,73,74,47,10,37,29,34,25,14,47,44,44,44,44,44,44,44,44,44,44,75,74,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,75,74,44,44,44,44,44,80,81,81,81,81,81,82,44,44,44,44,44,44,75,74,44,44,44,44,44,83,21,14,31,14,21,84,44,44,44,44,44,44,75,74,44,44,44,85,86,87,88,108,88,108,88,89,86,90,44,44,44,44,75,74,44,44,44,91,144,111,145,111,146,111,147,111,148,92,44,44,44,44,75,74,44,44,44,113,114,115,114,115,114,115,114,115,114,116,44,44,44,44,75,74,44,44,44,91,149,111,150,111,151,111,152,111,153,92,44,44,44,44,75,74,44,44,44,45,79,107,79,107,79,107,79,107,79,46,44,44,44,44,75,74,44,44,44,80,81,81,81,81,81,81,81,81,81,82,44,44,44,44,75,74,44,44,44,83,29,24,25,37,28,12,24,27,14,84,44,44,44,44,75,74,85,86,112,109,88,88,88,88,88,88,88,88,88,110,86,86,86,90,75,74,91,1,111,96,96,96,96,96,96,47,47,96,96,96,96,96,96,92,75,74,91,2,111,96,96,96,96,96,96,47,47,96,96,96,96,96,96,92,75,74,91,3,111,96,96,96,96,96,96,47,47,96,96,96,96,96,96,92,75,74,45,79,107,79,79,79,79,79,79,79,79,79,79,79,79,79,79,46,75,76,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,78,71,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,73,74,47,11,37,29,34,25,14,47,44,44,44,44,44,44,44,44,44,44,75,74,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,75,74,44,44,80,81,81,81,81,81,82,44,44,80,81,81,81,81,82,44,75,74,44,44,83,21,14,31,14,21,84,44,44,83,17,18,16,17,84,44,75,74,85,86,87,88,108,88,108,88,89,86,90,117,88,108,88,108,110,90,75,74,91,144,111,145,111,146,111,147,111,148,92,91,144,111,145,111,146,92,75,74,113,114,115,114,115,114,115,114,115,114,116,113,114,115,114,115,114,116,75,74,91,149,111,150,111,151,111,152,111,153,92,91,147,111,148,111,149,92,75,74,45,79,107,79,107,79,107,79,107,79,46,45,79,107,79,107,79,46,75,74,44,44,44,80,81,81,81,81,81,81,81,81,81,82,44,44,44,44,75,74,44,44,44,83,29,24,25,37,28,12,24,27,14,84,44,44,44,44,75,74,85,86,112,109,88,88,88,88,88,88,88,88,88,110,86,86,86,90,75,74,91,1,111,96,96,96,96,96,96,47,47,96,96,96,96,96,96,92,75,74,91,2,111,96,96,96,96,96,96,47,47,96,96,96,96,96,96,92,75,74,91,3,111,96,96,96,96,96,96,47,47,96,96,96,96,96,96,92,75,74,45,79,107,79,79,79,79,79,79,79,79,79,79,79,79,79,79,46,75,76,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,78,205,205,205,205,205,205,205,205,205,205,140,201,202,140,140,140,140,140,140,140,140,203,204,140,140,140,140,140,140,206,215,215,215,215,215,215,215,215,215,207,47,47,47,47,47,47,47,47,47,208,47,47,47,47,47,47,47,47,209,210,47,47,47,47,47,47,47,47,211,212,124,124,124,124,124,124,47,47,213,214,125,125,125,125,47,47,47,47,216,47,123,123,123,123,47,47,47,47,216,47,124,124,124,124,47,47,47,47,216,47,47,47,47,47,47,47,47,47,216,47,47,47,47,47,47,47,124,124,124,124,47,47,47,47,47,47,47,47,47,124,125,125,47,47,47,47,47,47,47,125,47,47,47,217,47,47,47,47,47,123,183,184,217,183,47,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,255,74,74,74,74,74,74,89,105,105,105,105,105,105,73,74,74,74,74,74,74,90,90,90,90,90,90,133,133,133,133,133,133,133,133,90,90,56,57,56,90,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,71,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,73,74,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,75,74,44,44,22,10,27,18,24,47,31,28,36,21,30,18,16,18,44,44,75,74,44,44,44,44,44,44,44,44,44,80,81,81,81,81,82,44,44,44,75,74,44,44,44,44,44,44,44,44,44,83,17,18,16,17,84,44,44,44,75,74,44,44,85,86,86,90,44,44,44,117,88,108,88,108,110,90,44,44,75,74,44,44,91,47,47,92,44,44,44,91,144,111,145,111,146,92,44,44,75,74,44,44,91,47,47,92,44,44,44,113,114,115,114,115,114,116,44,44,75,74,44,44,45,79,79,46,44,44,44,91,147,111,148,111,149,92,44,44,75,74,44,44,22,10,27,18,24,44,44,45,79,107,79,107,79,46,44,44,75,74,44,44,44,44,44,44,44,44,44,80,81,81,81,81,82,44,44,44,75,74,44,44,44,44,44,44,44,44,44,83,17,18,16,17,84,44,44,44,75,74,44,44,85,86,86,90,44,44,44,117,88,108,88,108,110,90,44,44,75,74,44,44,91,47,47,92,44,44,44,91,144,111,145,111,146,92,44,44,75,74,44,44,91,47,47,92,44,44,44,113,114,115,114,115,114,116,44,44,75,74,44,44,45,79,79,46,44,44,44,91,147,111,148,111,149,92,44,44,75,74,44,44,21,30,18,16,18,44,44,45,79,107,79,107,79,46,44,44,75,76,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,78,142,178,47,47,47,47,47,47,47,47,47,47,179,48,49,49,49,49,49,50,142,176,47,47,47,47,47,47,47,47,47,47,181,54,47,47,47,47,47,55,142,176,47,47,47,47,47,47,47,47,47,47,181,54,47,47,47,47,47,55,142,176,47,47,47,47,47,47,47,47,47,47,181,64,66,66,66,66,66,65,142,176,47,47,47,47,47,47,47,47,47,47,181,54,17,18,16,17,47,55,142,176,47,47,47,47,47,47,47,47,47,47,181,54,47,47,47,47,47,55,142,176,47,47,47,47,47,47,47,47,47,47,181,51,52,52,52,52,52,53,142,176,47,47,47,47,47,47,47,47,47,47,181,43,142,142,142,142,142,142,142,176,47,47,47,47,47,47,47,47,47,47,181,48,49,49,49,49,49,50,142,176,47,47,47,47,47,47,47,47,47,47,181,54,21,18,23,14,28,55,142,176,47,47,47,47,47,47,47,47,47,47,181,54,47,47,47,47,47,55,142,176,47,47,47,47,47,47,47,47,47,47,181,51,52,52,52,52,52,53,142,176,47,47,47,47,47,47,47,47,47,47,181,43,56,57,57,57,57,58,142,176,47,47,47,47,47,47,47,47,47,47,181,43,59,47,47,47,47,60,142,176,47,47,47,47,47,47,47,47,47,47,181,43,59,47,47,47,47,60,142,176,47,47,47,47,47,47,47,47,47,47,181,43,59,47,47,47,47,60,142,176,47,47,47,47,47,47,47,47,47,47,181,43,59,47,47,47,47,60,142,177,47,47,47,47,47,47,47,47,47,47,180,43,61,62,62,62,62,63,7,7,7,7,7,7,132,135,135,140,135,135,140,135,135,140,135,135,134,7,7,30,30,30,30,30,121,47,47,141,47,47,141,47,47,141,47,47,136,7,7,180,181,187,46,188,121,47,47,141,47,47,141,47,47,141,47,47,136,7,7,191,191,191,191,191,137,138,138,142,138,138,142,138,138,142,138,138,139,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,7,7,7,7,7,7,132,135,135,140,135,135,140,135,135,140,135,135,134,7,7,30,30,30,30,30,121,47,47,141,47,47,141,47,47,141,47,47,136,7,7,189,178,46,190,46,121,47,47,141,47,47,141,47,47,141,47,47,136,7,7,191,191,191,191,191,137,138,138,142,138,138,142,138,138,142,138,138,139,7,1,1,1,1,1,1,2,2,3,3,1,1,1,1,2,2,0,0,0,0,0,0,0,0,7,7,24,31,33,62,71,127,242,254,18,30,18,30,18,30,126,126,255,131,255,129,255,255,0,0,0,0,0,0,0,0,7,7,24,31,33,62,71,127,4,252,2,254,2,254,7,253,7,253,31,255,255,255,255,250,0,0,0,0,0,0,0,0,0,0,0,0,7,7,24,31,255,255,119,17,255,17,255,255,221,68,255,68,255,255,119,17,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,3,3,5,4,3,3,0,0,24,24,44,36,26,26,8,8,64,64,7,7,24,31,160,191,59,63,124,68,124,68,16,16,2,2,224,224,24,248,5,253,140,252,120,72,108,116,0,0,7,7,24,31,32,63,48,63,31,29,62,34,62,34,128,128,128,128,128,128,128,128,0,0,192,192,224,224,224,224,0,0,124,124,102,102,102,102,124,124,96,96,96,96,0,0,0,0,60,60,96,96,60,60,14,14,78,78,60,60,0,0,7,7,31,24,62,32,127,79,127,95,112,112,162,162,176,176,4,4,7,4,4,4,4,13,4,13,4,4,4,4,3,2,95,127,57,48,123,98,251,178,255,160,255,194,127,84,127,92,0,0,0,0,0,0,3,3,4,4,8,8,9,9,4,4,95,127,57,48,123,98,251,178,255,160,255,194,127,84,127,92,24,248,4,252,2,254,2,254,7,253,7,253,255,255,255,250,32,63,64,127,64,127,224,191,224,191,248,255,127,127,127,95,255,17,255,255,221,68,255,68,255,255,119,17,255,17,255,255,0,0,0,0,0,0,0,0,0,0,0,0,128,128,192,64,0,0,0,0,0,0,4,4,8,8,28,20,20,20,8,8,24,31,32,63,64,127,64,127,224,191,224,191,127,127,127,95,221,68,255,68,255,255,119,17,255,17,255,255,221,68,255,68,0,0,0,0,0,0,32,32,16,16,56,40,40,40,144,144,0,0,70,70,70,70,126,126,70,70,70,70,70,70,0,0,0,0,126,126,24,24,24,24,24,24,24,24,24,24,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,238,180,180,100,100,60,60,46,46,39,39,112,112,252,156,247,159,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,63,46,127,99,255,152,247,31,247,28,247,215,52,63,172,191,3,3,1,1,1,1,0,0,0,0,6,6,5,5,7,7,255,174,255,35,255,24,247,159,247,156,119,87,52,63,108,127,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,63,47,127,124,247,156,243,31,240,31,240,223,48,63,160,191,255,244,255,62,239,56,207,248,15,251,14,250,12,252,4,252,224,32,224,32,224,32,192,64,128,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,63,47,63,60,119,92,243,159,240,31,240,31,240,255,32,63,255,244,255,62,239,56,207,249,14,250,14,250,12,252,4,252,192,64,192,64,192,64,128,128,0,0,0,0,0,0,0,0,247,28,247,52,247,191,108,127,16,31,80,95,50,63,241,255,0,0,70,70,70,70,86,86,126,126,110,110,70,70,0,0,0,0,60,60,24,24,24,24,24,24,24,24,60,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,64,127,192,255,32,63,34,63,17,31,114,126,191,191,255,255,7,7,6,7,6,7,6,7,7,7,0,0,0,0,0,0,192,255,0,255,0,255,2,255,255,255,0,0,0,0,0,0,2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,64,127,192,255,32,63,32,63,17,31,114,126,255,255,255,255,2,254,2,254,4,252,4,252,136,248,78,126,255,255,255,255,0,0,0,0,128,128,64,64,0,0,0,0,0,0,7,7,0,0,0,0,255,0,253,2,205,50,9,246,8,247,0,255,0,0,0,0,255,0,255,0,255,0,252,3,204,51,8,247,124,68,63,63,16,31,16,31,18,31,25,31,63,63,62,62,206,242,142,218,9,249,9,249,78,254,152,248,252,252,124,124,7,7,31,24,62,32,127,79,127,95,112,112,162,162,176,176,0,0,70,70,102,102,118,118,94,94,78,78,70,70,0,0,0,0,24,24,24,24,24,24,24,24,0,0,24,24,0,0,18,30,18,30,18,30,18,30,126,126,191,131,255,129,255,255,0,0,224,224,24,248,4,252,12,252,248,200,44,52,46,50,0,0,70,70,70,70,70,70,70,70,44,44,24,24,0,0,0,0,54,54,95,73,95,65,127,65,62,34,28,20,8,8,254,2,253,5,253,5,255,31,255,252,255,254,239,56,239,57,0,4,0,4,0,4,1,5,1,5,3,7,6,6,12,12,202,192,200,192,202,192,136,128,136,135,8,0,10,0,8,0,111,19,47,19,111,19,47,17,45,209,44,16,108,16,44,16,160,32,160,32,160,32,160,160,160,160,224,224,96,96,48,48,8,168,8,24,8,168,8,72,8,168,8,24,8,168,8,72,0,254,0,255,127,255,127,193,127,193,127,235,127,193,1,255,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,16,16,11,11,7,4,7,4,3,2,1,1,0,0,0,0,180,180,228,228,188,188,238,110,231,39,240,16,252,156,119,95,0,0,0,0,7,7,31,24,63,32,127,64,127,64,127,64,0,0,0,0,0,0,128,128,192,64,192,64,192,64,128,128,2,3,5,4,7,4,4,7,4,7,4,6,4,5,4,7,206,250,12,252,8,248,8,248,8,248,8,248,8,248,136,248,0,60,0,126,16,103,36,195,36,195,36,195,36,195,52,195,0,60,0,102,0,231,44,195,60,195,60,195,60,66,24,102,0,0,0,0,0,0,32,32,144,144,184,168,168,168,16,16,10,16,6,8,2,4,0,4,0,4,0,4,0,4,0,4,23,80,40,96,42,96,40,96,42,96,40,96,40,103,104,96,222,43,46,23,110,23,46,23,110,23,46,23,46,215,46,23,152,72,176,80,160,96,160,32,160,32,160,32,160,32,160,32,8,168,8,24,8,168,8,72,8,184,8,63,8,191,9,127,0,127,0,255,126,255,126,193,126,193,126,235,126,193,0,255,0,0,0,0,255,0,255,0,255,0,255,0,255,0,255,0,0,0,56,56,52,36,60,36,63,39,60,39,60,39,63,47,55,60,23,20,23,31,28,31,240,255,0,255,2,255,255,255,191,160,191,160,191,184,127,127,47,47,127,127,247,156,247,156,253,5,253,5,253,29,255,255,247,244,255,254,239,56,239,56,1,1,1,1,1,1,2,2,2,2,2,2,1,1,0,0,2,2,2,2,1,1,0,0,0,0,0,0,0,0,0,0,52,195,60,67,60,67,24,102,24,102,8,118,8,54,8,52,24,38,24,36,24,36,8,52,0,24,0,8,0,8,0,8,0,0,15,15,31,16,60,32,112,64,115,67,103,76,63,40,0,0,128,128,220,92,62,34,50,226,177,193,195,75,39,124,0,0,0,0,0,0,0,0,224,224,208,16,208,208,224,32,92,80,124,80,57,48,124,76,238,130,192,132,96,67,49,38,31,60,187,98,241,65,97,65,195,3,247,4,238,8,156,96,144,16,8,8,24,24,60,100,242,194,227,96,57,32,242,0,0,255,0,255,255,255,255,0,255,0,255,0,0,255,0,255,255,255,255,0,255,255,0,255,0,255,255,255,255,255,255,255,56,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,14,17,17,17,17,18,18,243,31,240,63,240,191,96,127,16,31,80,95,48,63,241,255,207,251,12,252,8,248,8,248,8,248,8,248,8,248,136,248,78,122,201,217,9,249,14,254,72,248,152,248,252,252,124,124,160,191,64,127,224,255,32,63,17,31,114,126,255,255,255,255,0,60,0,28,0,28,0,24,0,8,0,0,0,0,0,0,0,255,0,171,0,85,0,255,0,0,0,0,0,0,0,0,0,21,0,24,0,21,0,18,0,21,0,24,0,21,0,18,64,64,64,192,64,64,64,64,64,64,64,192,64,64,64,64,14,50,14,50,14,50,14,50,15,51,143,179,206,243,238,115,0,0,0,0,0,0,0,0,0,0,0,0,128,128,192,64,0,0,0,0,128,128,71,71,31,24,63,32,127,64,127,64,127,64,191,160,191,160,191,184,127,127,63,63,119,124,247,156,242,230,242,230,242,230,242,230,242,230,242,230,242,230,242,230,0,0,1,1,1,1,1,1,2,2,2,2,2,2,1,1,243,159,240,31,240,63,224,191,112,127,16,31,80,95,49,63,62,34,31,31,16,31,16,31,18,31,25,31,63,63,62,62,18,30,18,30,18,30,18,30,126,126,255,131,255,129,255,255,1,1,1,1,1,1,2,2,2,2,2,2,1,1,0,0,96,224,128,128,128,128,128,128,128,128,128,128,128,128,128,128,7,4,7,4,7,4,7,4,7,4,7,4,7,4,7,4,11,9,11,10,15,10,23,18,23,28,20,23,23,20,47,36,0,0,112,112,143,143,152,159,224,255,240,159,120,87,127,76,59,47,208,223,240,255,192,255,192,255,255,255,0,0,0,0,255,255,255,255,255,255,255,248,248,240,242,225,245,227,242,230,255,255,255,129,195,129,223,133,223,133,255,189,255,129,255,255,255,255,255,255,255,255,255,31,31,15,79,135,175,199,79,103,255,255,255,255,255,255,255,0,0,0,0,255,255,255,0,0,79,103,79,103,79,103,79,103,79,103,79,103,79,103,79,103,242,230,245,227,242,225,248,240,255,248,255,255,255,255,255,255,0,0,255,255,0,255,0,0,255,0,255,255,255,255,255,255,79,103,175,199,79,135,31,15,255,31,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,239,231,207,36,12,36,12,36,12,36,12,36,12,36,12,36,12,36,12,36,12,36,12,231,207,0,239,0,0,255,0,255,255,255,255,255,255,7,7,24,31,33,62,71,127,95,127,57,48,123,98,251,178,224,224,24,248,132,124,226,254,250,254,156,12,222,70,223,77,255,160,255,194,127,84,127,92,63,46,63,35,31,24,7,7,255,5,255,67,254,42,254,58,252,116,252,196,248,24,224,224,7,7,31,24,62,32,127,79,127,95,112,112,162,162,176,176,224,224,248,24,124,4,254,242,254,250,14,14,69,69,13,13,180,180,100,100,60,60,46,46,39,39,16,16,12,12,3,3,45,45,38,38,60,60,116,116,228,228,8,8,48,48,192,192,47,36,47,36,47,36,47,36,103,124,188,167,255,228,27,27,0,0,0,0,1,1,1,1,3,3,3,3,3,2,7,4,4,7,7,4,7,4,4,4,6,6,5,5,5,5,6,6,7,4,7,4,4,7,4,4,4,4,7,7,7,7,6,6,6,6,6,6,4,4,7,7,5,5,3,3,5,5,14,14,15,31,1,16,1,16,1,16,1,8,1,7,4,9,0,15,8,1,248,241,78,193,2,199,140,189,132,173,98,207,126,254,236,144,239,159,250,247,218,231,189,189,181,173,210,239,127,127,248,248,24,232,56,136,184,8,176,16,224,224,208,48,240,240,24,24,48,48,96,96,192,192,192,192,255,255,131,131,96,98,10,0,8,0,8,7,8,0,8,1,248,241,248,241,8,1,108,16,44,16,44,209,44,17,172,144,239,159,239,159,236,144,24,24,12,12,6,198,3,195,3,3,255,255,193,193,6,70,0,4,0,12,2,16,2,16,2,16,2,16,2,16,2,16,12,76,12,76,9,73,11,75,10,74,16,80,18,82,16,80,126,51,126,51,190,147,254,211,126,83,62,11,126,75,62,11,160,32,144,48,152,72,152,72,152,72,152,72,152,72,152,72,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,2,0,1,2,2,2,2,2,2,2,3,2,3,2,2,2,2,2,3,2,2,6,6,14,10,14,10,11,10,11,10,15,10,10,10,6,6,10,10,26,18,31,31,0,0,0,0,31,31,63,32,127,71,124,76,124,76,124,76,0,0,0,0,224,224,240,48,248,24,248,152,248,152,248,152,127,79,127,64,127,79,124,76,124,76,124,124,0,0,0,0,248,152,248,24,248,152,248,152,248,152,248,248,0,0,0,0,0,0,124,124,78,78,78,78,78,78,78,78,124,124,0,0,0,0,126,126,96,96,124,124,96,96,96,96,126,126,0,0,0,0,70,70,70,70,70,70,70,70,78,78,60,60,0,0,0,0,60,60,102,102,96,96,96,96,102,102,60,60,0,0,0,0,70,70,110,110,126,126,86,86,70,70,70,70,0,0,0,0,60,60,78,78,78,78,126,126,78,78,78,78,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,255,1,1,255,255,255,0,0,0,0,0,0,0,0,240,240,240,176,240,176,240,240,0,0,0,0,7,7,24,31,32,63,48,63,24,23,63,44,123,79,112,95,144,159,144,159,112,127,17,31,62,62,62,62,0,0,124,124,102,102,102,102,124,124,104,104,102,102,0,0,0,0,60,60,102,102,102,102,102,102,102,102,60,60,0,0,0,0,96,96,96,96,96,96,96,96,96,96,126,126,0,0,0,0,60,60,102,102,96,96,110,110,102,102,62,62,0,0,0,238,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,1,0,2,0,2,0,4,0,8,0,8,0,16,0,16,128,128,192,64,192,64,224,32,48,80,48,80,56,72,24,40,0,0,0,0,0,0,0,0,0,3,0,3,0,2,0,2,0,0,0,0,0,0,0,0,8,248,8,24,8,168,8,72,0,128,0,128,0,128,0,128,0,0,0,0,0,0,0,0,0,32,0,32,0,32,31,32,0,64,0,64,0,64,0,64,28,36,12,52,12,52,4,252,14,50,14,50,14,50,14,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,24,0,21,0,18,0,0,0,0,0,0,0,0,64,192,64,192,64,64,64,64,0,2,0,3,0,2,0,2,0,2,0,3,0,2,0,2,8,175,8,26,8,173,8,79,8,168,8,24,8,168,8,72,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,64,21,64,21,64,21,64,21,192,21,193,23,67,22,70,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,42,32,1,0,29,1,9,0,7,1,11,0,3,32,4,0,32,32,6,0,10,128,23,0,6,1,6,0,4,1,5,0,30,128,11,0,6,128,28,0,10,16,8,17,4,1,2,0,4,1,6,0,0,16,6,0,4,16,5,0,26,128,36,0,21,1,7,0,32,16,4,0,5,16,3,0,13,16,6,0,3,16,5,0,37,128,21,0,27,16,4,0,19,128,3,0,28,128,25,0,26,1,6,0,10,32,1,0,9,32,2,0,20,16,3,0,14,128,22,0,10,16,10,17,6,16,22,0,19,128,37,0,28,1,6,0,3,32,2,0,14,32,3,0,4,32,2,0,3,32,5,0,13,128,33,0,19,1,7,0,5,1,6,0,4,1,5,0,6,32,3,0,5,32,2,0,28,32,3,0,14,128,18,0,12,16,4,0,2,1,8,0,16,1,8,0,30,128,25,0,16,16,3,0,4,16,5,0,36,128,28,0,5,1,5,0,17,32,3,0,18,128,32,0,10,16,1,17,6,1,0,0,4,16,4,0,4,16,3,0,2,16,25,0,4,16,7,0,10,0,0,0,0,0,0,0,77,32,8,33,6,32,11,0,7,32,6,0,100,16,0,17,6,16,5,0,47,128,22,0,23,32,5,0,6,32,6,0,16,128,24,0,52,1,5,0,1,16,14,17,6,16,32,0,10,128,10,0,43,32,6,0,6,32,5,0,5,32,6,0,10,128,12,0,10,1,7,0,2,16,11,0,5,16,4,0,13,128,28,0,117,1,6,0,14,128,31,0,26,1,6,0,0,16,7,0,5,16,6,0,4,16,8,0,3,16,8,0,12,128,15,0,10,1,7,0,0,16,61,0,5,128,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,24,0,4,8,0,4,8,8,0,4,20,16,8,16,16,20,24,20,0,12,4,24,0,20,20,8,4,4,12,0,24,4,0,8,12,12,24,0,12,8,0,24,16,20,20,24,8,36,102,65,102,61,103,163,102,113,103,244,102,108,102,188,102,44,102,73,102,81,103,73,102,73,102,4,103,114,102,196,102,17,104,25,104,218,103,226,103,33,104,33,104,33,104,234,103,112,111,123,111,134,111,145,111,156,111,167,111,178,111,189,111,200,111,211,111,222,111,233,111,244,111,255,111,10,112,21,112,32,112,201,245,197,213,229,250,127,223,254,1,40,70,254,2,40,123,250,126,223,167,32,123,240,228,167,40,13,175,234,224,223,234,232,223,234,240,223,234,248,223,205,82,101,205,14,106,205,46,106,205,121,104,205,82,106,205,117,108,205,150,106,175,234,224,223,234,232,223,234,240,223,234,248,223,234,127,223,225,209,193,241,201,205,248,105,175,234,225,223,234,241,223,234,249,223,33,191,223,203,190,33,159,223,203,190,33,175,223,203,190,33,207,223,203,190,33,26,111,205,201,105,62,48,234,126,223,33,251,101,205,142,105,24,183,33,255,101,24,246,175,234,126,223,24,133,33,126,223,53,126,254,40,40,236,254,32,40,224,254,24,40,228,254,16,32,151,52,24,148,178,227,131,199,178,227,193,199,250,241,223,254,1,201,250,225,223,254,5,201,250,225,223,254,7,201,0,181,208,64,199,0,181,32,64,199,0,182,161,128,199,62,5,33,21,102,195,103,105,205,188,105,167,192,33,228,223,52,126,254,2,202,78,102,33,26,102,195,135,105,62,3,33,31,102,195,103,105,205,188,105,167,192,175,234,225,223,224,16,62,8,224,18,62,128,224,20,33,159,223,203,190,201,0,128,225,193,135,0,128,225,172,135,33,98,102,195,103,105,33,228,223,52,126,254,4,40,23,254,11,40,25,254,15,40,15,254,24,202,137,102,201,62,1,33,240,223,119,195,78,102,33,103,102,195,135,105,33,98,102,195,135,105,72,188,66,102,135,205,3,102,200,205,15,102,200,205,9,102,200,62,2,33,158,102,195,103,105,0,176,225,176,199,62,7,33,183,102,195,103,105,205,188,105,167,192,33,183,102,205,135,105,33,228,223,52,126,254,3,202,78,102,201,62,128,227,0,196,147,131,131,115,99,83,67,51,35,19,0,0,35,67,99,131,163,195,211,227,255,205,3,102,200,205,15,102,200,62,6,33,218,102,195,103,105,205,188,105,167,192,33,228,223,78,52,6,0,33,223,102,9,126,167,202,78,102,95,33,234,102,9,126,87,6,134,14,18,123,226,12,122,226,12,120,226,201,59,128,178,135,135,162,147,98,67,35,0,128,64,128,64,128,205,3,102,200,205,15,102,200,205,9,102,200,62,3,33,45,103,195,103,105,205,188,105,167,192,33,228,223,78,52,6,0,33,50,103,9,126,167,202,78,102,95,33,56,103,9,126,87,6,135,24,177,205,15,102,200,62,40,33,125,103,195,103,105,183,128,144,255,131,0,209,69,128,0,241,84,128,0,213,101,128,0,112,102,128,101,101,101,100,87,86,85,84,84,84,84,84,71,70,70,69,69,69,68,68,68,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,112,96,112,112,112,128,144,160,208,240,224,208,192,176,160,144,128,112,96,80,64,48,48,32,32,32,32,32,32,32,32,32,32,32,16,16,62,48,33,138,103,195,103,105,62,48,33,142,103,195,103,105,205,188,105,167,192,33,252,223,126,79,254,36,202,38,104,52,6,0,197,33,146,103,9,126,224,34,193,33,182,103,9,126,224,33,62,128,224,35,201,62,32,33,134,103,195,103,105,62,18,33,130,103,195,103,105,205,188,105,167,192,175,234,249,223,62,8,224,33,62,128,224,35,33,207,223,203,190,201,128,58,32,96,198,33,10,111,205,62,105,240,4,230,31,71,62,208,128,234,245,223,33,56,104,195,149,105,240,4,230,15,71,33,244,223,52,126,33,245,223,254,14,48,10,52,52,126,230,240,176,14,29,226,201,254,30,202,31,105,53,53,53,24,238,250,240,223,254,1,202,168,104,254,2,202,61,104,250,241,223,254,1,202,243,104,254,2,202,84,104,201,128,128,32,157,135,128,248,32,152,135,128,251,32,150,135,128,246,32,149,135,33,218,110,205,62,105,33,151,104,126,234,246,223,62,1,234,245,223,33,148,104,195,149,105,62,0,234,245,223,33,156,104,126,234,246,223,33,153,104,24,236,62,1,234,245,223,33,161,104,126,234,246,223,33,158,104,24,219,62,2,234,245,223,33,166,104,126,234,246,223,33,163,104,24,202,33,244,223,52,42,254,9,40,196,254,19,40,209,254,23,40,222,254,32,40,23,42,254,0,200,254,1,40,5,254,2,40,5,201,52,52,24,2,53,53,126,224,29,201,175,234,241,223,224,26,33,191,223,203,190,33,159,223,203,190,33,175,223,203,190,33,207,223,203,190,33,26,111,24,37,229,234,241,223,33,191,223,203,254,175,234,244,223,234,245,223,234,246,223,224,26,33,159,223,203,254,33,175,223,203,254,33,207,223,203,254,225,205,201,105,201,245,29,250,113,223,18,28,241,28,18,29,175,18,28,28,18,28,18,123,254,229,40,9,254,245,40,19,254,253,40,22,201,197,14,16,6,5,24,19,197,14,22,6,4,24,12,197,14,26,6,5,24,5,197,14,32,6,4,42,226,12,5,32,250,193,201,28,234,113,223,28,61,203,39,79,6,0,9,78,35,70,105,96,124,201,213,107,98,52,42,190,32,3,45,175,119,209,201,197,14,48,42,226,12,121,254,64,32,248,193,201,175,234,225,223,234,233,223,234,241,223,234,249,223,234,159,223,234,175,223,234,191,223,234,207,223,62,255,224,37,62,3,234,120,223,62,8,224,18,224,23,224,33,62,128,224,20,224,25,224,35,175,224,16,224,26,201,17,224,223,26,167,40,12,33,159,223,203,254,33,0,101,205,169,105,233,28,26,167,40,7,33,16,101,205,173,105,233,201,17,248,223,26,167,40,12,33,207,223,203,254,33,32,101,205,169,105,233,28,26,167,40,7,33,40,101,205,173,105,233,201,205,214,105,201,33,232,223,42,167,200,254,255,40,242,119,71,33,48,101,230,31,205,173,105,205,68,107,205,109,106,201,250,233,223,167,200,33,239,106,61,40,6,35,35,35,35,24,247,42,234,120,223,42,234,118,223,42,234,121,223,42,234,122,223,175,234,117,223,234,119,223,201,250,233,223,167,40,61,33,117,223,250,120,223,254,1,40,55,254,3,40,47,52,42,190,32,51,45,54,0,44,44,52,250,121,223,203,70,202,192,106,250,122,223,71,250,241,223,167,40,4,203,208,203,240,250,249,223,167,40,4,203,216,203,248,120,224,37,201,62,255,24,249,250,121,223,24,222,250,249,223,167,32,241,250,241,223,167,32,235,201,1,36,239,86,1,0,229,0,1,32,253,0,1,32,222,247,2,24,127,247,3,24,247,127,3,72,223,91,1,24,219,231,1,0,253,247,3,32,127,247,1,32,237,247,1,32,237,247,1,32,237,247,1,32,237,247,1,32,237,247,1,32,239,247,1,32,239,247,42,79,126,71,10,18,28,3,10,18,201,42,18,28,42,18,201,205,248,105,175,234,117,223,234,119,223,17,128,223,6,0,42,18,28,205,62,107,17,144,223,205,62,107,17,160,223,205,62,107,17,176,223,205,62,107,17,192,223,205,62,107,33,144,223,17,148,223,205,51,107,33,160,223,17,164,223,205,51,107,33,176,223,17,180,223,205,51,107,33,192,223,17,196,223,205,51,107,1,16,4,33,146,223,54,1,121,133,111,5,32,248,175,234,158,223,234,174,223,234,190,223,201,229,175,224,26,107,98,205,201,105,225,24,42,205,234,107,205,255,107,95,205,234,107,205,255,107,87,205,234,107,205,255,107,79,44,44,115,44,114,44,113,45,45,45,45,229,33,112,223,126,225,254,3,40,202,205,234,107,195,143,108,213,42,95,58,87,19,123,34,122,50,209,201,213,42,95,58,87,19,19,24,241,42,79,58,71,10,71,201,225,24,44,250,112,223,254,3,32,16,250,184,223,203,127,40,9,126,254,6,32,4,62,64,224,28,229,125,198,9,111,126,167,32,221,125,198,4,111,203,126,32,213,225,205,152,109,45,45,195,106,109,45,45,45,45,205,246,107,125,198,4,95,84,205,51,107,254,0,40,31,254,255,40,4,44,195,141,108,45,229,205,246,107,205,255,107,95,205,234,107,205,255,107,87,225,123,34,122,50,24,213,33,233,223,54,0,205,214,105,201,33,233,223,126,167,200,62,1,234,112,223,33,144,223,44,42,167,202,53,108,53,194,9,108,44,44,205,255,107,254,0,202,58,108,254,157,202,186,107,230,240,254,160,32,26,120,230,15,79,6,0,229,17,129,223,26,111,19,26,103,9,126,225,45,34,205,234,107,205,255,107,120,79,6,0,205,234,107,250,112,223,254,4,202,237,108,229,125,198,5,111,93,84,44,44,121,254,1,40,15,54,0,33,51,110,9,42,18,28,126,18,225,195,4,109,54,1,225,24,23,229,17,198,223,33,197,110,9,42,18,28,123,254,203,32,248,14,32,33,196,223,24,46,229,250,112,223,254,1,40,33,254,2,40,25,14,26,250,191,223,203,127,32,5,175,226,62,128,226,12,44,44,44,44,42,95,22,0,24,21,14,22,24,5,14,16,62,0,12,44,44,44,58,167,32,79,42,95,44,42,87,229,44,44,42,167,40,2,30,1,44,44,54,0,44,126,225,203,127,32,19,122,226,12,123,226,12,42,226,12,126,246,128,226,125,246,5,111,203,134,225,45,58,50,45,17,112,223,26,254,4,40,9,60,18,17,16,0,25,195,131,108,33,158,223,52,33,174,223,52,33,190,223,52,201,6,0,229,225,44,24,172,120,203,63,111,38,0,25,94,201,229,125,198,6,111,126,230,15,40,24,234,113,223,250,112,223,14,19,254,1,40,14,14,24,254,2,40,8,14,29,254,3,40,2,225,201,44,42,95,126,87,213,125,198,4,111,70,250,113,223,254,1,24,9,254,3,24,0,33,255,255,24,28,17,252,109,205,143,109,203,64,32,2,203,51,123,230,15,203,95,40,6,38,255,246,240,24,2,38,0,111,209,25,125,226,12,124,226,24,190,0,0,0,0,0,0,16,0,15,0,0,17,0,15,240,1,18,16,255,239,1,18,16,255,239,1,18,16,255,239,1,18,16,255,239,1,18,16,255,239,1,18,16,255,239,1,18,16,255,239,1,18,16,255,239,0,15,44,0,156,0,6,1,107,1,201,1,35,2,119,2,198,2,18,3,86,3,155,3,218,3,22,4,78,4,131,4,181,4,229,4,17,5,59,5,99,5,137,5,172,5,206,5,237,5,10,6,39,6,66,6,91,6,114,6,137,6,158,6,178,6,196,6,214,6,231,6,247,6,6,7,20,7,33,7,45,7,57,7,68,7,79,7,89,7,98,7,107,7,115,7,123,7,131,7,138,7,144,7,151,7,157,7,162,7,167,7,172,7,177,7,182,7,186,7,190,7,193,7,196,7,200,7,203,7,206,7,209,7,212,7,214,7,217,7,219,7,221,7,223,7,0,0,0,0,0,192,161,0,58,0,192,177,0,41,1,192,97,0,58,0,192,18,52,69,103,154,188,222,254,152,122,183,190,168,118,84,49,1,35,68,85,103,136,154,187,169,136,118,85,68,51,34,17,1,35,69,103,137,171,205,239,254,220,186,152,118,84,50,16,161,130,35,52,69,86,103,120,137,154,171,188,205,100,50,16,17,35,86,120,153,152,118,103,154,223,254,201,133,66,17,49,2,4,8,16,32,64,12,24,48,5,0,1,3,5,10,20,40,80,15,30,60,3,6,12,24,48,96,18,36,72,8,16,0,7,14,28,56,112,21,42,84,4,8,16,32,64,128,24,48,96,4,9,18,36,72,144,27,54,108,12,24,4,10,20,40,80,160,30,60,120,0,63,111,244,124,250,124,12,125,28,125,0,54,111,67,126,63,126,69,126,71,126,0,63,111,54,118,46,118,60,118,94,118,0,42,111,251,117,247,117,253,117,0,0,0,63,111,141,113,115,113,167,113,193,113,0,63,111,193,114,179,114,207,114,253,114,0,63,111,57,112,43,112,0,0,0,0,0,54,111,152,126,140,126,164,126,176,126,0,63,111,35,124,31,124,37,124,39,124,0,63,111,0,0,251,121,0,0,0,0,0,63,111,0,0,33,122,37,122,0,0,0,63,111,110,122,106,122,112,122,0,0,0,63,111,218,122,222,122,224,122,226,122,0,63,111,96,123,102,123,106,123,110,123,0,63,111,103,120,113,120,121,120,129,120,0,92,111,62,117,70,117,76,117,0,0,0,63,111,136,117,144,117,150,117,0,0,71,112,101,112,71,112,126,112,196,112,255,255,43,112,147,112,165,112,147,112,182,112,37,113,255,255,57,112,157,116,0,65,162,68,76,86,76,66,76,68,76,62,76,60,76,68,76,86,76,66,76,68,76,62,76,60,76,0,68,76,68,62,78,72,66,72,66,58,76,68,62,76,72,68,66,62,60,52,60,66,76,72,0,68,76,68,62,78,72,66,72,66,58,82,72,76,82,76,68,58,66,168,68,0,157,100,0,65,163,38,62,60,38,44,52,62,54,52,62,44,52,0,38,62,48,34,58,44,30,54,48,162,52,54,52,48,44,42,0,163,38,62,48,34,58,42,44,52,52,44,34,20,0,162,82,78,76,72,68,66,68,72,76,68,72,78,76,78,163,82,66,162,68,72,163,76,72,76,86,80,162,86,90,163,92,90,162,86,82,80,76,80,74,168,76,167,82,161,86,88,163,86,162,82,78,82,76,78,72,167,86,161,90,92,163,90,162,86,84,86,80,84,76,90,84,76,84,90,96,102,84,100,84,96,84,163,92,162,96,92,90,92,161,86,90,164,86,162,1,0,162,52,58,68,58,48,58,52,58,44,58,42,58,44,58,68,58,48,58,52,58,44,58,42,58,44,52,44,38,62,56,50,56,42,56,50,56,163,52,66,42,162,52,58,66,58,48,58,46,52,38,52,46,52,168,48,162,50,56,42,56,50,56,168,52,163,52,42,36,28,32,36,44,48,52,168,38,0,199,113,214,113,15,114,214,113,65,114,164,114,214,113,15,114,199,113,214,113,118,114,255,255,115,113,204,113,238,113,39,114,238,113,85,114,169,114,238,113,39,114,204,113,238,113,138,114,255,255,141,113,209,113,252,113,52,114,252,113,100,114,174,114,252,113,52,114,209,113,252,113,151,114,255,255,167,113,10,114,255,255,193,113,157,132,0,128,0,157,84,0,128,0,157,26,111,160,0,162,68,72,68,66,68,72,76,78,163,82,162,1,86,163,92,1,169,88,92,88,168,72,0,163,1,62,62,1,68,68,1,72,72,1,64,64,0,163,78,78,78,68,86,86,82,88,88,64,82,82,0,163,6,11,11,0,162,64,68,64,62,64,68,72,76,163,78,162,1,82,163,88,1,169,86,88,86,168,68,0,1,58,58,1,64,64,1,68,68,1,64,64,0,68,76,76,68,82,82,78,86,86,68,76,76,0,163,88,167,86,162,82,163,86,167,78,162,72,76,76,163,76,78,168,82,0,1,70,70,1,68,68,162,64,64,163,64,64,168,64,0,70,78,78,68,86,86,162,82,82,163,82,72,76,167,72,162,70,0,163,82,167,88,162,86,163,86,167,92,162,102,96,96,163,96,100,168,102,0,1,70,70,1,68,68,1,64,58,1,70,68,0,70,78,78,68,86,86,64,82,68,78,88,86,0,157,99,0,128,0,157,68,0,128,0,157,26,111,160,0,6,115,58,115,98,115,98,115,196,115,255,255,179,114,3,115,55,115,137,115,137,115,70,116,255,255,193,114,26,115,78,115,176,115,176,115,176,115,176,115,176,115,176,115,187,116,217,116,217,116,217,116,233,116,249,116,249,116,9,117,9,117,25,117,25,117,9,117,41,117,255,255,207,114,46,115,255,255,253,114,165,1,0,157,98,0,128,162,58,161,58,58,162,48,48,58,161,58,58,162,48,48,0,157,26,111,160,162,58,161,58,58,162,48,48,58,161,58,58,162,48,48,0,162,6,161,6,6,162,6,6,0,165,1,0,157,50,0,128,162,58,161,58,58,162,48,48,58,161,58,58,162,48,48,0,157,26,111,160,162,58,161,58,58,162,48,48,58,161,58,58,162,48,48,0,157,130,0,128,162,58,72,82,80,82,161,72,72,162,74,68,72,161,64,64,162,68,62,64,161,58,58,162,62,56,58,48,50,56,58,48,50,62,0,157,83,0,64,162,48,64,64,68,64,161,62,64,162,68,62,64,161,56,58,162,62,56,58,161,46,48,162,56,48,48,40,44,44,48,40,44,56,0,157,26,111,160,162,58,161,58,58,162,48,48,58,161,58,58,162,48,48,0,168,58,162,62,56,168,58,163,62,162,64,161,64,64,162,68,62,64,161,64,64,162,68,62,168,64,163,68,162,72,161,72,72,162,74,68,72,161,72,72,162,74,68,168,72,163,76,162,78,161,78,78,162,78,78,82,78,78,76,78,161,78,78,162,78,78,82,78,78,76,78,161,78,78,162,78,78,76,161,76,76,162,76,76,74,161,74,74,162,74,68,62,64,68,54,68,161,64,64,162,54,163,64,161,54,58,162,54,48,68,161,64,64,162,54,163,64,161,54,58,162,54,46,165,54,168,1,163,56,0,168,48,162,48,48,168,48,163,54,165,1,168,1,163,62,162,64,161,64,64,162,68,62,64,161,64,64,162,68,62,168,54,163,58,162,62,161,64,68,162,62,68,72,72,72,58,62,161,64,68,162,62,68,70,70,70,58,62,161,64,68,162,62,68,58,161,62,64,162,58,64,58,161,62,64,162,62,62,44,58,62,38,48,161,48,48,162,48,163,48,161,48,52,162,48,40,46,161,46,46,162,46,163,46,161,46,50,162,46,40,165,38,168,1,163,44,0,162,58,161,58,58,162,50,44,58,161,58,58,162,56,48,58,161,58,58,162,50,44,58,161,58,58,162,44,30,0,162,40,161,64,40,162,30,54,40,161,64,40,162,30,54,0,162,40,161,64,40,162,30,54,40,161,64,40,162,44,68,0,162,30,161,54,30,162,30,54,40,161,64,40,162,40,64,0,162,30,161,54,30,162,30,54,30,161,54,30,162,30,54,0,162,34,161,58,34,162,34,58,34,161,58,34,162,34,58,0,162,30,161,54,30,162,30,54,30,161,54,30,162,164,62,0,54,62,68,164,68,82,117,93,117,255,255,64,117,89,117,255,255,70,117,119,117,255,255,76,117,157,32,0,129,170,1,0,157,112,0,129,162,66,50,56,66,70,52,60,70,74,56,66,74,76,60,66,76,70,52,60,70,64,46,52,64,0,157,26,111,33,168,66,163,42,168,66,163,42,168,66,163,42,0,156,117,167,117,255,255,138,117,163,117,255,255,144,117,233,117,255,255,150,117,157,32,0,129,170,1,0,157,112,0,129,162,76,66,80,66,84,66,80,66,86,66,84,66,80,66,84,66,76,66,80,66,84,66,80,66,86,66,84,66,80,66,84,66,90,70,86,70,84,70,80,70,78,70,80,70,84,70,80,70,80,62,76,62,76,62,74,62,74,62,70,62,74,62,80,62,0,157,26,111,33,165,76,74,70,66,56,62,66,66,0,255,117,0,0,15,118,30,118,157,178,0,128,162,96,92,96,92,96,98,96,92,164,96,0,157,146,0,128,162,82,78,82,78,82,84,82,78,164,82,157,26,111,32,162,98,96,98,96,98,102,98,96,163,98,1,106,118,100,119,100,119,0,0,186,118,165,119,55,120,7,119,230,119,230,119,240,119,230,119,230,119,249,119,240,119,230,119,230,119,249,119,240,119,2,120,12,120,249,119,240,119,230,119,86,119,86,119,21,120,21,120,21,120,21,120,157,195,0,128,162,60,62,60,62,56,80,163,1,162,60,62,60,62,56,80,163,1,162,1,72,1,70,1,66,1,70,161,66,70,162,66,66,56,163,60,1,162,62,66,62,66,60,84,163,1,162,62,66,62,66,60,84,163,1,162,1,86,1,84,1,84,1,80,162,1,161,80,84,162,80,78,163,80,1,0,157,116,0,128,162,54,56,54,56,46,62,163,1,162,54,56,54,56,46,62,163,1,162,1,54,1,54,1,50,1,54,54,50,50,48,163,54,1,162,56,60,56,60,54,78,163,1,162,56,60,56,60,54,78,163,1,162,1,80,1,78,1,70,1,70,162,1,161,72,78,162,72,70,163,64,1,0,157,26,111,32,162,72,70,72,70,62,32,163,1,162,72,70,72,70,62,32,163,1,162,46,60,46,36,36,36,36,60,42,62,42,62,166,46,163,1,161,1,162,72,70,72,70,46,46,163,1,162,72,70,72,70,46,46,163,1,162,42,60,42,60,46,62,46,62,46,66,46,66,166,56,163,1,161,1,0,168,1,162,6,11,168,1,162,6,11,165,1,1,0,157,197,0,128,161,70,74,164,70,162,1,163,80,168,74,163,1,161,66,70,164,66,162,1,163,78,161,78,80,164,70,167,1,161,64,70,164,64,162,1,163,70,161,70,74,164,66,167,1,161,54,56,164,54,162,1,163,60,167,66,164,64,162,1,0,157,132,0,65,161,64,66,164,64,162,1,163,64,168,66,163,1,161,60,64,164,60,162,1,163,60,161,60,64,164,64,167,1,161,54,50,164,46,162,1,163,64,161,54,56,164,50,167,1,161,46,50,164,46,162,1,163,42,167,48,164,46,162,1,0,162,56,56,1,56,56,56,1,56,0,46,46,1,46,46,46,1,46,0,42,42,1,42,42,42,1,42,0,162,56,56,1,56,54,54,1,54,0,50,50,1,50,46,46,1,46,0,162,6,11,1,6,6,11,1,6,6,11,1,6,6,11,1,6,6,11,1,6,6,11,1,6,6,11,1,6,1,11,1,11,0,157,102,0,129,167,88,90,163,88,167,94,164,90,162,1,167,80,84,163,88,167,90,164,88,162,1,167,80,163,78,167,78,88,84,163,74,167,90,94,163,90,167,84,164,80,162,1,0,137,120,12,121,137,120,145,121,0,0,168,120,51,121,168,120,181,121,208,120,89,121,208,120,216,121,249,120,127,121,249,120,127,121,157,209,0,128,162,92,161,92,90,162,92,92,86,82,78,86,162,82,161,82,80,162,82,82,76,72,68,161,76,82,0,157,178,0,128,162,82,161,82,82,162,82,161,82,82,162,68,161,68,68,162,68,1,76,161,76,76,162,76,161,76,76,162,58,161,58,58,162,58,1,0,157,26,111,32,162,92,161,92,92,162,92,161,92,92,162,78,161,82,82,162,86,1,162,92,161,92,92,162,92,161,92,92,162,68,161,72,72,162,76,1,0,162,6,167,1,162,11,11,11,1,162,6,167,1,162,11,11,11,1,0,162,72,161,72,82,162,68,161,68,82,162,66,161,66,82,162,72,161,72,82,162,76,161,76,82,162,68,161,68,82,162,72,68,161,72,82,86,90,0,58,161,58,58,162,58,161,58,58,162,58,161,58,58,162,58,161,58,58,162,58,161,58,58,162,58,161,58,58,162,54,161,54,54,162,54,1,0,72,161,72,72,162,72,161,72,72,162,72,161,72,72,162,72,161,72,72,162,68,161,68,68,162,68,161,68,68,162,66,161,66,66,162,66,1,0,162,1,11,1,11,1,11,1,11,1,11,1,11,1,11,11,1,0,162,72,161,72,82,162,68,161,68,82,162,66,161,66,82,162,72,161,72,82,162,76,161,76,82,162,72,161,72,82,162,68,82,163,92,0,58,161,58,58,162,58,161,58,58,162,58,161,58,58,162,58,161,58,58,162,58,161,58,58,162,58,161,58,58,162,1,58,163,76,0,72,161,72,72,162,72,161,72,72,162,72,161,72,72,162,72,161,72,72,162,68,161,68,68,162,68,161,68,68,162,1,76,163,68,0,255,121,0,0,157,194,0,64,162,92,161,92,90,162,92,92,86,82,78,86,162,82,161,82,80,162,82,82,76,72,161,68,66,162,68,164,1,0,39,122,0,0,70,122,157,194,0,128,162,92,161,92,90,162,92,92,86,82,78,86,162,82,161,82,80,162,82,76,68,82,163,92,164,1,0,157,26,111,32,162,92,161,92,92,162,92,161,92,92,162,78,82,86,1,162,92,161,92,92,162,92,161,92,92,162,82,76,68,1,165,1,114,122,0,0,145,122,175,122,157,194,0,128,162,92,161,92,90,162,92,92,86,82,78,86,162,82,161,82,80,162,82,76,68,82,163,92,164,1,0,157,194,0,64,162,78,161,78,82,162,86,78,163,72,72,162,76,161,76,74,162,76,68,52,76,163,76,165,1,0,157,26,111,32,162,92,161,92,92,162,92,161,92,92,162,78,82,161,86,86,162,86,162,92,161,92,92,162,92,161,92,92,162,82,76,161,68,68,162,1,165,1,0,228,122,0,0,3,123,32,123,74,123,157,194,0,128,162,92,161,92,90,162,92,92,86,82,78,86,162,82,161,82,80,162,82,76,68,82,163,92,164,1,0,157,178,0,128,162,78,161,78,82,162,86,78,163,72,72,162,76,161,76,74,162,76,68,52,76,163,76,165,1,157,26,111,32,162,92,161,92,92,162,92,161,92,92,78,86,92,86,78,68,62,68,162,92,161,92,92,162,92,161,92,92,82,76,68,76,92,1,162,1,165,1,162,11,11,11,11,162,11,11,11,1,162,11,11,11,11,162,11,11,11,1,165,1,114,123,201,123,0,0,145,123,237,123,163,123,253,123,182,123,13,124,157,209,0,128,162,92,161,92,90,162,92,92,86,82,78,86,162,82,161,82,80,162,82,82,76,72,68,161,76,82,0,162,82,167,1,162,68,68,68,1,76,167,1,162,58,58,58,1,0,162,92,167,1,162,78,82,86,1,162,92,167,1,162,68,72,76,1,0,162,6,167,1,162,11,11,11,1,162,6,167,1,162,11,11,11,1,0,162,72,161,72,82,162,68,161,68,82,162,66,161,66,82,162,72,161,72,82,162,76,161,76,82,162,72,161,72,82,162,92,82,163,92,0,1,58,1,58,1,58,1,58,1,58,1,58,1,58,163,52,1,72,1,72,1,72,1,72,1,68,1,68,1,76,163,68,162,1,11,1,11,1,11,1,11,1,11,1,11,162,1,11,11,1,41,124,0,0,94,124,146,124,198,124,157,179,0,128,166,82,161,80,166,82,161,80,166,82,161,72,163,1,166,76,161,74,166,76,161,74,166,76,161,66,163,1,166,62,161,66,166,68,161,72,166,76,161,80,166,82,161,86,166,82,161,106,0,157,147,0,192,166,66,161,64,166,66,161,64,166,66,161,66,163,1,166,58,161,56,166,58,161,56,166,58,161,58,163,1,166,56,161,56,166,58,161,62,166,66,161,68,166,72,161,76,166,66,161,66,157,26,111,160,166,72,161,70,166,72,161,70,166,72,161,82,163,1,166,68,161,66,166,68,161,66,166,68,161,76,163,1,166,72,161,58,166,62,161,66,166,68,161,72,166,76,161,80,166,82,161,58,166,11,161,6,166,11,161,6,166,11,161,6,163,1,166,11,161,6,166,11,161,6,166,11,161,6,163,1,166,11,161,6,166,11,161,6,166,11,161,6,163,1,166,11,161,6,41,125,255,255,252,124,36,125,48,125,86,125,125,125,86,125,159,125,193,125,255,255,254,124,54,125,103,125,142,125,103,125,176,125,2,126,255,255,14,125,57,125,60,125,255,255,30,125,157,96,0,129,0,157,32,0,129,170,1,0,163,1,80,84,88,0,165,1,0,165,1,0,163,1,6,1,6,1,162,6,6,163,1,6,163,1,6,1,6,1,162,6,6,1,1,6,6,0,167,90,162,94,167,90,162,88,167,88,162,84,167,88,162,84,0,157,250,110,32,162,90,98,104,112,90,98,104,112,90,100,102,108,90,100,102,108,0,167,84,162,80,167,84,162,80,167,80,162,76,167,74,162,80,0,88,94,100,108,88,94,100,108,80,84,88,94,80,88,94,100,0,167,84,162,80,167,84,162,80,167,80,162,76,167,74,162,70,0,88,94,100,108,88,94,100,108,80,84,88,94,80,88,94,100,0,167,74,162,76,167,74,162,70,167,70,162,68,167,70,162,74,167,76,162,80,167,76,162,74,167,74,162,70,167,74,162,76,167,80,162,78,167,80,162,82,167,88,162,84,167,90,162,84,167,82,162,80,167,76,162,74,162,66,56,60,74,163,66,1,0,74,82,88,94,74,88,94,98,84,98,104,108,84,98,104,108,70,76,84,94,70,76,84,90,80,88,94,100,80,94,100,108,74,80,88,94,74,88,94,98,78,84,90,98,78,84,90,102,80,88,94,100,80,94,100,104,168,90,163,1,0,73,126,0,0,89,126,104,126,120,126,157,177,0,128,167,1,161,94,94,166,104,161,94,164,104,0,157,145,0,128,167,1,161,84,84,166,94,161,88,164,94,157,26,111,32,167,1,161,78,78,166,88,161,80,163,88,1,167,1,161,6,6,166,11,161,6,160,6,6,6,6,6,6,6,6,163,1,182,126,35,127,182,126,110,127,255,255,140,126,224,126,74,127,224,126,145,127,255,255,152,126,246,126,92,127,246,126,169,127,255,255,164,126,12,127,255,255,176,126,157,130,0,128,162,84,161,84,84,84,74,70,74,162,84,161,84,84,84,88,92,88,162,84,161,84,84,88,84,82,84,161,88,92,88,92,162,88,161,86,88,0,157,98,0,128,162,1,68,1,64,1,68,1,70,1,68,1,68,1,64,1,64,0,157,26,111,32,162,84,84,74,82,84,84,74,88,84,84,82,84,78,84,74,82,0,162,6,11,6,11,6,11,6,11,6,11,6,11,6,161,11,11,6,162,11,161,6,0,162,94,161,94,94,94,84,80,84,162,94,161,94,94,94,98,102,98,162,94,161,94,92,162,88,161,88,84,161,82,84,82,84,162,82,161,78,82,0,162,1,70,1,74,1,70,1,74,1,70,1,70,1,70,1,70,0,162,70,84,84,84,70,84,84,84,70,84,82,88,68,82,74,88,0,162,98,161,98,98,98,94,90,94,162,98,161,98,98,98,94,90,94,162,98,161,74,78,162,82,161,74,92,163,88,161,84,166,108,0,162,1,74,1,74,1,74,1,74,1,161,70,70,162,70,161,70,70,163,70,162,68,1,0,162,66,90,80,90,66,90,80,90,74,161,82,82,162,82,161,82,82,163,82,162,84,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,83,101,195,214,105,0,0,0,0,0,0,0,0,0,0])\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack:///./src/gameboy/Tetris_(World).gb?");

/***/ }),

/***/ "./src/gameboy/gameboy.js":
/*!********************************!*\
  !*** ./src/gameboy/gameboy.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar EventEmitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\n\nvar Z80 = __webpack_require__(/*! ./z80/z80.js */ \"./src/gameboy/z80/z80.js\");\nvar LCD = __webpack_require__(/*! ./lcd.js */ \"./src/gameboy/lcd.js\");\n\nvar bootstrap = __webpack_require__(/*! ./DMG_ROM.bin */ \"./src/gameboy/DMG_ROM.bin\");\n\nvar GameBoy = function (_EventEmitter) {\n  _inherits(GameBoy, _EventEmitter);\n\n  function GameBoy() {\n    _classCallCheck(this, GameBoy);\n\n    var _this = _possibleConstructorReturn(this, (GameBoy.__proto__ || Object.getPrototypeOf(GameBoy)).call(this));\n\n    _this.z80 = new Z80();\n    _this.lcd = new LCD(_this.z80);\n    _this.z80.initializeMemory();\n    _this.z80.loadBootstrap(bootstrap);\n    return _this;\n  }\n\n  _createClass(GameBoy, [{\n    key: 'performanceChecker',\n    value: function performanceChecker() {\n      var scanlineCount = 0;\n      var renderScreenCount = 0;\n      while (true) {\n        if (this.z80.registers.pc === 0x031F) {\n          this.z80.printRegisters();\n        }\n        this.z80.fetch();\n        this.z80.execute();\n        if (scanlineCount + 1 === ~~(this.z80.getCurrentCycle() / 465)) {\n          this.lcd.updateGraphics();\n          scanlineCount = ~~(this.z80.getCurrentCycle() / 465);\n        }\n        if (renderScreenCount + 1 === ~~(this.z80.getCurrentCycle() / 69905)) {\n          renderScreenCount = ~~(this.z80.getCurrentCycle() / 69905);\n        }\n      }\n    }\n  }, {\n    key: 'start',\n    value: function start() {\n      var _this2 = this;\n\n      var run = function run() {\n        if (_this2.z80.registers.pc > 0x0300) {\n          console.log(_this2.z80.registers.pc.toString(16));\n          _this2.z80.printRegisters();\n          console.log('done');\n          return;\n        }\n        setTimeout(run, 0);\n        var renderScreenCount = ~~(_this2.z80.getCurrentCycle() / 69905);\n        var scanlineCount = ~~(_this2.z80.getCurrentCycle() / 465);\n        // ~~ used instead of parseInt for performance gains\n        while (renderScreenCount + 1 !== ~~(_this2.z80.getCurrentCycle() / 69905)) {\n          if (_this2.z80.registers.pc === 0x187) {\n            _this2.z80.printRegisters();\n          }\n          _this2.z80.fetch();\n          _this2.z80.execute();\n          if (scanlineCount + 1 === ~~(_this2.z80.getCurrentCycle() / 465)) {\n            _this2.lcd.updateGraphics();\n            scanlineCount = ~~(_this2.z80.getCurrentCycle() / 465);\n          }\n        }\n        _this2.emit('screen-update');\n      };\n      setTimeout(run, 0);\n    }\n  }, {\n    key: 'loadCartridge',\n    value: function loadCartridge(data) {\n      this.z80.loadCartridge(data);\n    }\n  }]);\n\n  return GameBoy;\n}(EventEmitter);\n\nexports.default = GameBoy;\n\n//# sourceURL=webpack:///./src/gameboy/gameboy.js?");

/***/ }),

/***/ "./src/gameboy/lcd.js":
/*!****************************!*\
  !*** ./src/gameboy/lcd.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Resolution = 160×144 (20×18 tiles)\n// tiles =\n// Max sprites – Max 40 per screen, 10 per line\n// Sprite sizes – 8×8 or 8×16\n\nfunction getBit(value, bitNumber) {\n  return value >> bitNumber & 0x1;\n}\n\nfunction getTileAddress(tileIdentifier, tileDataSelect) {\n  if (tileDataSelect === 0 && tileIdentifier <= 0x7F) {\n    return 0x9000 + 16 * tileIdentifier;\n  }\n  return 0x8000 + 16 * tileIdentifier;\n}\n\nvar LCD = function () {\n  function LCD(z80) {\n    _classCallCheck(this, LCD);\n\n    this.z80 = z80;\n    this.screen = new Array(23040); // 160x144 pixels\n\n    this.currentLine = 0;\n  }\n\n  _createClass(LCD, [{\n    key: \"updateGraphics\",\n    value: function updateGraphics() {\n      // setLCDStatus() Not sure what this is yet\n\n      this.currentLine = this.z80.readMemory(0xFF44);\n      this.z80.writeMemory(0xFF44, this.currentLine + 1);\n\n      if (this.currentLine >= 144 && this.currentLine <= 153) {\n        // requestInterupt();\n      } else if (this.currentLine > 153) {\n        this.z80.writeMemory(0xFF44, 0);\n      } else {\n        this.renderScanline();\n      }\n    }\n  }, {\n    key: \"getPixelData\",\n    value: function getPixelData(pixelRow, pixelCol, tileDataSelect, bgTileMapSelect) {\n      var tileRow = ~~(pixelRow / 8);\n      var tileCol = ~~(pixelCol / 8);\n\n      var tileMapAddress = bgTileMapSelect === 0 ? 0x9800 : 0x9C00;\n\n      var tileIndex = tileRow * 32 + tileCol;\n      var tileIdentifier = this.z80.readMemory(tileMapAddress + tileIndex);\n      var relativePixelIndex = (pixelRow % 8 << 3) + pixelCol % 8;\n      var relativeByteIndex = ~~(relativePixelIndex / 8) << 1;\n      var relativeBitIndex = relativePixelIndex % 8;\n\n      var tileDataAddress = getTileAddress(tileIdentifier, tileDataSelect);\n\n      var pixelByte1 = this.z80.readMemory(tileDataAddress + relativeByteIndex);\n      var pixelByte2 = this.z80.readMemory(tileDataAddress + relativeByteIndex + 1);\n\n      var pixelBit1 = getBit(pixelByte1, -1 * relativeBitIndex + 7);\n      var pixelBit2 = getBit(pixelByte2, -1 * relativeBitIndex + 7);\n\n      return pixelBit1 << 1 + pixelBit2;\n    }\n  }, {\n    key: \"renderScanline\",\n    value: function renderScanline() {\n      var lcdControlReg = this.z80.readMemory(0xFF40);\n      var lcdDisplayEnable = getBit(lcdControlReg, 7);\n      // const winTileMapSelect = getBit(lcdControlReg, 6);\n      var winDisplayEnable = getBit(lcdControlReg, 5);\n      var tileDataSelect = getBit(lcdControlReg, 4);\n      var bgTileMapSelect = getBit(lcdControlReg, 3);\n      // const spriteSizeSelect = getBit(lcdControlReg, 2);\n      var spriteDisplayEnable = getBit(lcdControlReg, 1);\n      var bgDisplayEnable = getBit(lcdControlReg, 0);\n\n      if (lcdDisplayEnable === 0) {\n        return;\n      }\n      if (bgDisplayEnable === 1) {\n        this.renderBackgroundScanline(tileDataSelect, bgTileMapSelect);\n      }\n      if (winDisplayEnable === 1) {\n        // this.renderWindowScanline();\n      }\n      if (spriteDisplayEnable === 1) {\n        // this.renderSpriteScaneline();\n      }\n    }\n  }, {\n    key: \"renderBackgroundScanline\",\n    value: function renderBackgroundScanline(tileDataSelect, bgTileMapSelect) {\n      var scrollY = this.z80.readMemory(0xFF42);\n      var scrollX = this.z80.readMemory(0xFF43);\n      // const bgY = this.z80.readMemory(0xFF4A);\n      // const bgX = this.z80.readMemory(0xFF4B);\n\n      var bgPalleteData = this.z80.readMemory(0xFF47);\n\n      var colorMap = {\n        0: getBit(bgPalleteData, 1) << 1 + getBit(bgPalleteData, 0),\n        1: getBit(bgPalleteData, 3) << 1 + getBit(bgPalleteData, 2),\n        2: getBit(bgPalleteData, 5) << 1 + getBit(bgPalleteData, 4),\n        3: getBit(bgPalleteData, 7) << 1 + getBit(bgPalleteData, 6)\n      };\n\n      var colors = {\n        0: 255,\n        1: 170,\n        2: 85,\n        3: 0\n      };\n\n      for (var i = 0; i < 160; i += 1) {\n        var pixelRow = this.currentLine + scrollY & 0xFF;\n        var pixelCol = i + scrollX & 0xFF;\n        var pixelData = this.getPixelData(pixelRow, pixelCol, tileDataSelect, bgTileMapSelect);\n        var pixelIndex = this.currentLine * 160 + pixelCol;\n\n        if (pixelData === 3) {\n          this.screen[pixelIndex] = colors[colorMap[3]];\n        } else if (pixelData === 2) {\n          this.screen[pixelIndex] = colors[colorMap[2]];\n        } else if (pixelData === 1) {\n          this.screen[pixelIndex] = colors[colorMap[1]];\n        } else {\n          this.screen[pixelIndex] = colors[colorMap[0]];\n        }\n      }\n    }\n  }]);\n\n  return LCD;\n}();\n\nmodule.exports = LCD;\n\n//# sourceURL=webpack:///./src/gameboy/lcd.js?");

/***/ }),

/***/ "./src/gameboy/z80/bytesUtil.js":
/*!**************************************!*\
  !*** ./src/gameboy/z80/bytesUtil.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction combineBytes(highByte, lowByte) {\n  return (highByte << 8 | lowByte) & 0xFFFF;\n}\n\nfunction seperateBytes(word) {\n  var highByte = word >> 8 & 0xFF;\n  var lowByte = word & 0xFF;\n  return { highByte: highByte, lowByte: lowByte };\n}\n\nmodule.exports = { combineBytes: combineBytes, seperateBytes: seperateBytes };\n\n//# sourceURL=webpack:///./src/gameboy/z80/bytesUtil.js?");

/***/ }),

/***/ "./src/gameboy/z80/execute.js":
/*!************************************!*\
  !*** ./src/gameboy/z80/execute.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction execute() {\n  if (this.prefix === 0xCB) {\n    switch (this.opcode) {\n      case 0x7C:\n        {\n          // BIT 7,H\n          this.BITn3r8(7, 'h');\n          break;\n        }\n      case 0x11:\n        {\n          // RL C\n          this.RLr8('c');\n          break;\n        }\n      case 0x37:\n        {\n          // SWAP A\n          this.SWAPr8('a');\n          break;\n        }\n      default:\n        {\n          console.log('Non-implemented extended instruction:');\n          console.log('PCHex: ', '0x' + this.originalpc.toString(16).padStart(4, '0').toUpperCase());\n          console.log('PrefixHex: ', '0x' + this.prefix.toString(16).padStart(2, '0').toUpperCase());\n          console.log('OpcodeHex: ', '0x' + this.opcode.toString(16).padStart(2, '0').toUpperCase());\n          console.log();\n          break;\n        }\n    }\n  } else {\n    switch (this.opcode) {\n      case 0x00:\n        {\n          // NOP\n          break;\n        }\n      case 0x01:\n        {\n          // LD BC,$aabb\n          this.LDr16n16('b', 'c', this.byte2, this.byte1);\n          break;\n        }\n      case 0x04:\n        {\n          // INC B\n          this.INCr8('b');\n          break;\n        }\n      case 0x05:\n        {\n          // DEC B\n          this.DECr8('b');\n          break;\n        }\n      case 0x06:\n        {\n          // LD B,$xx\n          this.LDr8n8('b', this.byte1);\n          break;\n        }\n      case 0x0B:\n        {\n          // DEC BC\n          this.DECr16('b', 'c');\n          break;\n        }\n      case 0x0C:\n        {\n          // INC C\n          this.INCr8('c');\n          break;\n        }\n      case 0x0D:\n        {\n          // DEC C\n          this.DECr8('c');\n          break;\n        }\n      case 0x0E:\n        {\n          // LD C,$xx\n          this.LDr8n8('c', this.byte1);\n          break;\n        }\n      case 0x11:\n        {\n          // LD DE,$aabb\n          this.LDr16n16('d', 'e', this.byte2, this.byte1);\n          break;\n        }\n      case 0x13:\n        {\n          // INC DE\n          this.INCr16('d', 'e');\n          break;\n        }\n      case 0x15:\n        {\n          // DEC D\n          this.DECr8('d');\n          break;\n        }\n      case 0x16:\n        {\n          // LD D,$xx\n          this.LDr8n8('d', this.byte1);\n          break;\n        }\n      case 0x17:\n        {\n          // RLA\n          this.RLA();\n          break;\n        }\n      case 0x18:\n        {\n          // JR $xx\n          this.JRn8(this.byte1);\n          break;\n        }\n      case 0x19:\n        {\n          // ADD HL,DE\n          this.ADDr16r16('h', 'l', 'd', 'e');\n          break;\n        }\n      case 0x1A:\n        {\n          // LD A,(DE)\n          this.LDr8rr16('a', 'd', 'e');\n          break;\n        }\n      case 0x1D:\n        {\n          // DEC E\n          this.DECr8('e');\n          break;\n        }\n      case 0x1E:\n        {\n          // LD E,$xx\n          this.LDr8n8('e', this.byte1);\n          break;\n        }\n      case 0x20:\n        {\n          // JR NZ,$xx\n          this.JRNZn8(this.byte1);\n          break;\n        }\n      case 0x21:\n        {\n          // LD HL,$aabb\n          this.LDr16n16('h', 'l', this.byte2, this.byte1);\n          break;\n        }\n      case 0x22:\n        {\n          // LD (HLI),A\n          this.LDIrr16r8('h', 'l', 'a');\n          break;\n        }\n      case 0x23:\n        {\n          // INC HL\n          this.INCr16('h', 'l');\n          break;\n        }\n      case 0x24:\n        {\n          // INC H\n          this.INCr8('h');\n          break;\n        }\n      case 0x28:\n        {\n          // JR Z,$xx\n          this.JRZn8(this.byte1);\n          break;\n        }\n      case 0x2A:\n        {\n          // LD A,(HLI)\n          this.LDIr8rr16('a', 'h', 'l');\n          break;\n        }\n      case 0x2E:\n        {\n          // LD L, $xx\n          this.LDr8n8('l', this.byte1);\n          break;\n        }\n      case 0x2F:\n        {\n          // CPL\n          this.CPL();\n          break;\n        }\n      case 0x31:\n        {\n          // LD SP,$aabb\n          this.LDr16n16('s', 'p', this.byte2, this.byte1);\n          break;\n        }\n      case 0x32:\n        {\n          // LD (HLD),A\n          this.LDDrr16r8('h', 'l', 'a');\n          break;\n        }\n      case 0x36:\n        {\n          // LD (HL),$xx\n          this.LDrr16n8('h', 'l', this.byte1);\n          break;\n        }\n      case 0x3D:\n        {\n          // DEC A\n          this.DECr8('a');\n          break;\n        }\n      case 0x3E:\n        {\n          // LD A,$xx\n          this.LDr8n8('a', this.byte1);\n          break;\n        }\n      case 0x47:\n        {\n          // LD B,A\n          this.LDr8r8('b', 'a');\n          break;\n        }\n      case 0x4F:\n        {\n          // LD C,A\n          this.LDr8r8('c', 'a');\n          break;\n        }\n      case 0x56:\n        {\n          // LD D,(HL)\n          this.LDr8rr16('d', 'h', 'l');\n          break;\n        }\n      case 0x57:\n        {\n          // LD D,A\n          this.LDr8r8('d', 'a');\n          break;\n        }\n      case 0x58:\n        {\n          // LD E,B\n          this.LDr8r8('e', 'b');\n          break;\n        }\n      case 0x59:\n        {\n          // LD E,C\n          this.LDr8r8('e', 'c');\n          break;\n        }\n      case 0x5A:\n        {\n          // LD E,D\n          this.LDr8r8('e', 'd');\n          break;\n        }\n      case 0x5B:\n        {\n          // LD E,E\n          this.LDr8r8('e', 'e');\n          break;\n        }\n      case 0x5E:\n        {\n          // LD E,(HL)\n          this.LDr8rr16('e', 'h', 'l');\n          break;\n        }\n      case 0x5F:\n        {\n          // LD E,A\n          this.LDr8r8('e', 'a');\n          break;\n        }\n      case 0x67:\n        {\n          // LD H,A\n          this.LDr8r8('h', 'a');\n          break;\n        }\n      case 0x7B:\n        {\n          // LD A,E\n          this.LDr8r8('a', 'e');\n          break;\n        }\n      case 0x7C:\n        {\n          // LD A,H\n          this.LDr8r8('a', 'h');\n          break;\n        }\n      case 0x77:\n        {\n          // LD (HL),A\n          this.LDrr16r8('h', 'l', 'a');\n          break;\n        }\n      case 0x78:\n        {\n          // LD A,B\n          this.LDr8r8('a', 'b');\n          break;\n        }\n      case 0x79:\n        {\n          // LD A,C\n          this.LDr8r8('a', 'c');\n          break;\n        }\n      case 0x7D:\n        {\n          // LD A,L\n          this.LDr8r8('a', 'l');\n          break;\n        }\n      case 0x86:\n        {\n          // ADD A,(HL)\n          this.ADDr8rr16('a', 'h', 'l');\n          break;\n        }\n      case 0x87:\n        {\n          // ADD A,A\n          this.ADDr8r8('a', 'a');\n          break;\n        }\n      case 0x90:\n        {\n          // SUB B\n          this.SUBr8('b');\n          break;\n        }\n      case 0xA1:\n        {\n          // AND C\n          this.ANDr8('c');\n          break;\n        }\n      case 0xA9:\n        {\n          // XOR C\n          this.XORr8('c');\n          break;\n        }\n      case 0xAF:\n        {\n          // XOR A\n          this.XORr8('a');\n          break;\n        }\n      case 0xB0:\n        {\n          // OR B\n          this.ORr8('b');\n          break;\n        }\n      case 0xB1:\n        {\n          // OR C\n          this.ORr8('c');\n          break;\n        }\n      case 0xBE:\n        {\n          // CP (HL)\n          this.CPrr16('h', 'l');\n          break;\n        }\n      case 0xC1:\n        {\n          // POP BC\n          this.POPr16('b', 'c');\n          break;\n        }\n      case 0xC3:\n        {\n          // JP $aabb\n          this.JPn16(this.byte2, this.byte1);\n          break;\n        }\n      case 0xC9:\n        {\n          // RET\n          this.RET();\n          break;\n        }\n      case 0xC5:\n        {\n          // PUSH BC\n          this.PUSHr16('b', 'c');\n          break;\n        }\n      case 0xCB:\n        {\n          // Program should never go here\n          console.log('Something went wrong if you see this message');\n          break;\n        }\n      case 0xCD:\n        {\n          // CALL $aabb\n          this.CALLn16(this.byte2, this.byte1);\n          break;\n        }\n      case 0xD5:\n        {\n          // PUSH DE\n          this.PUSHr16('d', 'e');\n          break;\n        }\n      case 0xE0:\n        {\n          // LD ($xx),A\n          this.LDHrn8r8(this.byte1, 'a');\n          break;\n        }\n      case 0xE1:\n        {\n          // POP HL\n          this.POPr16('h', 'l');\n          break;\n        }\n      case 0xE2:\n        {\n          // LD (C),A\n          this.LDrr8r8('c', 'a');\n          break;\n        }\n      case 0xE6:\n        {\n          // AND $xx\n          this.ANDn8(this.byte1);\n          break;\n        }\n      case 0xE9:\n        {\n          // JP (HL)\n          this.JPrr16('h', 'l');\n          break;\n        }\n      case 0xEA:\n        {\n          // LD ($aabb), A\n          this.LDrn16r8(this.byte2, this.byte1, 'a');\n          break;\n        }\n      case 0xEF:\n        {\n          // RST $28\n          this.RSTf(0x28);\n          break;\n        }\n      case 0xF0:\n        {\n          // LD A,($xx)\n          this.LDHr8rn8('a', this.byte1);\n          break;\n        }\n      case 0xF3:\n        {\n          // DI\n          this.masterInteruptSwitch = false;\n          break;\n        }\n      case 0xFB:\n        {\n          // IE\n          this.masterInteruptSwitch = true;\n          break;\n        }\n      case 0xFE:\n        {\n          // CP $xx\n          this.CPn8(this.byte1);\n          break;\n        }\n      case 0xFF:\n        {\n          // RST 38H\n          this.RSTf(0x38);\n          break;\n        }\n      default:\n        {\n          console.log('Non-implemented instruction:');\n          console.log('PCHex: ', '0x' + this.originalpc.toString(16).padStart(4, '0').toUpperCase());\n          console.log('OpcodeHex: ', '0x' + this.opcode.toString(16).padStart(2, '0').toUpperCase());\n          console.log();\n          break;\n        }\n    }\n  }\n  this.currentCycle += this.instructionInfo.cycles;\n}\n\nmodule.exports = execute;\n\n//# sourceURL=webpack:///./src/gameboy/z80/execute.js?");

/***/ }),

/***/ "./src/gameboy/z80/fetch.js":
/*!**********************************!*\
  !*** ./src/gameboy/z80/fetch.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar opcodesData = __webpack_require__(/*! ./opcodes.json */ \"./src/gameboy/z80/opcodes.json\");\n\nfunction fetch() {\n  this.originalpc = this.registers.pc; // only used for debugging purposes\n\n  if (this.mainMemory[this.registers.pc] === 0xCB) {\n    this.prefix = 0xCB;\n    this.opcode = this.mainMemory[this.registers.pc + 1];\n    this.registers.pc += 2;\n  } else {\n    this.prefix = null;\n    this.opcode = this.mainMemory[this.registers.pc];\n    this.registers.pc += 1;\n  }\n\n  var opcodeInfo = this.prefix === null ? opcodesData[this.opcode] : opcodesData[this.prefix][this.opcode];\n\n  var numBytesToRead = this.prefix === 0xCB ? opcodeInfo.bytes - 2 : opcodeInfo.bytes - 1;\n\n  if (numBytesToRead === 1) {\n    this.byte1 = this.mainMemory[this.registers.pc];\n    this.byte2 = null;\n  } else if (numBytesToRead === 2) {\n    this.byte1 = this.mainMemory[this.registers.pc];\n    this.byte2 = this.mainMemory[this.registers.pc + 1];\n  } else {\n    this.byte1 = null;\n    this.byte2 = null;\n  }\n\n  this.instructionInfo = opcodeInfo;\n\n  this.registers.pc += numBytesToRead;\n}\n\nmodule.exports = fetch;\n\n//# sourceURL=webpack:///./src/gameboy/z80/fetch.js?");

/***/ }),

/***/ "./src/gameboy/z80/flagsUtil.js":
/*!**************************************!*\
  !*** ./src/gameboy/z80/flagsUtil.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction getBit(value, bitNumber) {\n  return value >> bitNumber & 0x1;\n}\n\nfunction setBit(byte, bitNumber) {\n  return (byte | 1 << bitNumber) & 0xFF;\n}\n\nfunction clearBit(byte, bitNumber) {\n  return byte & ~(1 << bitNumber) & 0xFF;\n}\n\nfunction getZeroFlagBit() {\n  return getBit(this.registers.f, 7);\n}\nfunction getSubtractFlagBit() {\n  return getBit(this.registers.f, 6);\n}\nfunction getHalfCarryFlagBit() {\n  return getBit(this.registers.f, 5);\n}\nfunction getCarryFlagBit() {\n  return getBit(this.registers.f, 4);\n}\n\nfunction setZeroFlagBit() {\n  this.registers.f = setBit(this.registers.f, 7);\n}\nfunction setSubtractFlagBit() {\n  this.registers.f = setBit(this.registers.f, 6);\n}\nfunction setHalfCarryFlagBit() {\n  this.registers.f = setBit(this.registers.f, 5);\n}\nfunction setCarryFlagBit() {\n  this.registers.f = setBit(this.registers.f, 4);\n}\n\nfunction clearZeroFlagBit() {\n  this.registers.f = clearBit(this.registers.f, 7);\n}\nfunction clearSubtractFlagBit() {\n  this.registers.f = clearBit(this.registers.f, 6);\n}\nfunction clearHalfCarryFlagBit() {\n  this.registers.f = clearBit(this.registers.f, 5);\n}\nfunction clearCarryFlagBit() {\n  this.registers.f = clearBit(this.registers.f, 4);\n}\n\nmodule.exports = {\n  getZeroFlagBit: getZeroFlagBit,\n  getSubtractFlagBit: getSubtractFlagBit,\n  getHalfCarryFlagBit: getHalfCarryFlagBit,\n  getCarryFlagBit: getCarryFlagBit,\n  setZeroFlagBit: setZeroFlagBit,\n  setSubtractFlagBit: setSubtractFlagBit,\n  setHalfCarryFlagBit: setHalfCarryFlagBit,\n  setCarryFlagBit: setCarryFlagBit,\n  clearZeroFlagBit: clearZeroFlagBit,\n  clearSubtractFlagBit: clearSubtractFlagBit,\n  clearHalfCarryFlagBit: clearHalfCarryFlagBit,\n  clearCarryFlagBit: clearCarryFlagBit\n};\n\n//# sourceURL=webpack:///./src/gameboy/z80/flagsUtil.js?");

/***/ }),

/***/ "./src/gameboy/z80/instructions/add.js":
/*!*********************************************!*\
  !*** ./src/gameboy/z80/instructions/add.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ./../bytesUtil.js */ \"./src/gameboy/z80/bytesUtil.js\"),\n    combineBytes = _require.combineBytes,\n    seperateBytes = _require.seperateBytes;\n\nfunction ADDr8r8(dstRegister, srcRegister) {\n  var addVal = this.registers[dstRegister] + this.registers[srcRegister];\n  this.registers[dstRegister] = addVal & 0xFF;\n\n  if (this.registers[dstRegister] === 0x00) {\n    this.setZeroFlagBit();\n  } else {\n    this.clearZeroFlagBit();\n  }\n  this.clearSubtractFlagBit();\n  if (addVal > 0xFF) {\n    this.setCarryFlagBit();\n  } else {\n    this.clearHalfCarryFlagBit();\n  }\n}\n\nfunction ADDr8rr16(register1, hRegister2, lRegister2) {\n  var hRegVal = this.registers[hRegister2];\n  var lRegVal = this.registers[lRegister2];\n  var address = combineBytes(hRegVal, lRegVal);\n  var additionOperand = this.mainMemory[address];\n  var addVal = this.registers[register1] + additionOperand;\n  this.registers.a = addVal & 0xFF;\n\n  this.clearSubtractFlagBit();\n  if (this.registers.a === 0) {\n    this.setZeroFlagBit();\n  } else {\n    this.clearZeroFlagBit();\n  }\n  if (addVal > 0xFF) {\n    this.setCarryFlagBit();\n  } else {\n    this.clearCarryFlagBit();\n  }\n}\n\nfunction ADDr16r16(hDstReg, lDstReg, hSrcReg, lSrcReg) {\n  var dstRegVal = combineBytes(this.registers[hDstReg], this.registers[lDstReg]);\n  var srcRegVal = combineBytes(this.registers[hSrcReg], this.registers[lSrcReg]);\n\n  var addVal = dstRegVal + srcRegVal;\n\n  var _seperateBytes = seperateBytes(addVal & 0xFFFF),\n      highByte = _seperateBytes.highByte,\n      lowByte = _seperateBytes.lowByte;\n\n  this.registers[hDstReg] = highByte;\n  this.registers[lDstReg] = lowByte;\n\n  this.clearSubtractFlagBit();\n  if (addVal > 0xFFFF) {\n    this.setCarryFlagBit();\n  } else {\n    this.clearCarryFlagBit();\n  }\n}\n\nmodule.exports = {\n  ADDr8r8: ADDr8r8,\n  ADDr8rr16: ADDr8rr16,\n  ADDr16r16: ADDr16r16\n};\n\n//# sourceURL=webpack:///./src/gameboy/z80/instructions/add.js?");

/***/ }),

/***/ "./src/gameboy/z80/instructions/and.js":
/*!*********************************************!*\
  !*** ./src/gameboy/z80/instructions/and.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction ANDn8(number) {\n  this.registers.a = this.registers.a & number;\n\n  if (this.registers.a === 0) {\n    this.setZeroFlagBit();\n  } else {\n    this.clearZeroFlagBit();\n  }\n  this.clearSubtractFlagBit();\n  this.setHalfCarryFlagBit();\n  this.clearCarryFlagBit();\n}\n\nfunction ANDr8(register) {\n  this.registers.a = this.registers.a & this.registers[register];\n\n  if (this.registers.a === 0) {\n    this.setZeroFlagBit();\n  } else {\n    this.clearZeroFlagBit();\n  }\n  this.clearSubtractFlagBit();\n  this.setHalfCarryFlagBit();\n  this.clearCarryFlagBit();\n}\n\nmodule.exports = {\n  ANDn8: ANDn8,\n  ANDr8: ANDr8\n};\n\n//# sourceURL=webpack:///./src/gameboy/z80/instructions/and.js?");

/***/ }),

/***/ "./src/gameboy/z80/instructions/bit.js":
/*!*********************************************!*\
  !*** ./src/gameboy/z80/instructions/bit.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction getBit(value, bitNumber) {\n  return value >> bitNumber & 0x1;\n}\n\nfunction BITn3r8(number, register) {\n  var sigBit = getBit(this.registers[register], number);\n\n  if (sigBit === 0) {\n    this.setZeroFlagBit();\n  } else {\n    this.clearZeroFlagBit();\n  }\n  this.clearSubtractFlagBit();\n  this.clearHalfCarryFlagBit();\n}\n\nmodule.exports = {\n  BITn3r8: BITn3r8\n};\n\n//# sourceURL=webpack:///./src/gameboy/z80/instructions/bit.js?");

/***/ }),

/***/ "./src/gameboy/z80/instructions/call.js":
/*!**********************************************!*\
  !*** ./src/gameboy/z80/instructions/call.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ./../bytesUtil.js */ \"./src/gameboy/z80/bytesUtil.js\"),\n    combineBytes = _require.combineBytes,\n    seperateBytes = _require.seperateBytes;\n\nfunction CALLn16(hNumber, lNumber) {\n  var _seperateBytes = seperateBytes(this.registers.pc),\n      pcH = _seperateBytes.highByte,\n      pcL = _seperateBytes.lowByte;\n\n  this.mainMemory[this.registers.sp - 1] = pcH;\n  this.mainMemory[this.registers.sp - 2] = pcL;\n\n  var newPc = combineBytes(hNumber, lNumber);\n\n  this.registers.pc = newPc;\n  this.registers.sp -= 2;\n}\n\nmodule.exports = {\n  CALLn16: CALLn16\n};\n\n//# sourceURL=webpack:///./src/gameboy/z80/instructions/call.js?");

/***/ }),

/***/ "./src/gameboy/z80/instructions/cp.js":
/*!********************************************!*\
  !*** ./src/gameboy/z80/instructions/cp.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ./../bytesUtil.js */ \"./src/gameboy/z80/bytesUtil.js\"),\n    combineBytes = _require.combineBytes;\n\nfunction CPn8(number) {\n  var cpValue = this.registers.a - number & 0xFF;\n\n  if (cpValue === 0) {\n    this.setZeroFlagBit();\n  } else {\n    this.clearZeroFlagBit();\n  }\n  if (this.registers.a < cpValue) {\n    this.setCarryFlagBit();\n  } else {\n    this.clearCarryFlagBit();\n  }\n  this.setSubtractFlagBit();\n}\n\nfunction CPrr16(hRegister, lRegister) {\n  var hRegVal = this.registers[hRegister];\n  var lRegVal = this.registers[lRegister];\n  var address = combineBytes(hRegVal, lRegVal);\n  var cpValue = this.registers.a - this.mainMemory[address] & 0xFF;\n\n  if (cpValue === 0) {\n    this.setZeroFlagBit();\n  } else {\n    this.clearZeroFlagBit();\n  }\n  if (this.registers.a < cpValue) {\n    this.setCarryFlagBit();\n  } else {\n    this.clearCarryFlagBit();\n  }\n  this.setSubtractFlagBit();\n}\n\nmodule.exports = {\n  CPn8: CPn8,\n  CPrr16: CPrr16\n};\n\n//# sourceURL=webpack:///./src/gameboy/z80/instructions/cp.js?");

/***/ }),

/***/ "./src/gameboy/z80/instructions/cpl.js":
/*!*********************************************!*\
  !*** ./src/gameboy/z80/instructions/cpl.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction CPL() {\n  this.registers.a = this.registers.a ^ 0xFF;\n\n  this.setCarryFlagBit();\n  this.setHalfCarryFlagBit();\n}\n\nmodule.exports = CPL;\n\n//# sourceURL=webpack:///./src/gameboy/z80/instructions/cpl.js?");

/***/ }),

/***/ "./src/gameboy/z80/instructions/dec.js":
/*!*********************************************!*\
  !*** ./src/gameboy/z80/instructions/dec.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ./../bytesUtil.js */ \"./src/gameboy/z80/bytesUtil.js\"),\n    combineBytes = _require.combineBytes,\n    seperateBytes = _require.seperateBytes;\n\nfunction DECr8(register) {\n  this.registers[register] = this.registers[register] - 1 & 0xFF;\n\n  if (this.registers[register] === 0) {\n    this.setZeroFlagBit();\n  } else {\n    this.clearZeroFlagBit();\n  }\n  this.setSubtractFlagBit();\n}\n\nfunction DECr16(hRegister, lRegister) {\n  var value = combineBytes(this.registers[hRegister], this.registers[lRegister]);\n  var decrementedVal = value - 1 & 0xFFFF;\n\n  var _seperateBytes = seperateBytes(decrementedVal),\n      highByte = _seperateBytes.highByte,\n      lowByte = _seperateBytes.lowByte;\n\n  this.registers[hRegister] = highByte;\n  this.registers[lRegister] = lowByte;\n}\n\nmodule.exports = {\n  DECr8: DECr8,\n  DECr16: DECr16\n};\n\n//# sourceURL=webpack:///./src/gameboy/z80/instructions/dec.js?");

/***/ }),

/***/ "./src/gameboy/z80/instructions/inc.js":
/*!*********************************************!*\
  !*** ./src/gameboy/z80/instructions/inc.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ./../bytesUtil.js */ \"./src/gameboy/z80/bytesUtil.js\"),\n    combineBytes = _require.combineBytes,\n    seperateBytes = _require.seperateBytes;\n\nfunction INCr8(register) {\n  this.registers[register] = this.registers[register] + 1 & 0xFF;\n\n  if (this.registers[register] === 0) {\n    this.setZeroFlagBit();\n  } else {\n    this.clearZeroFlagBit();\n  }\n  this.clearSubtractFlagBit();\n}\n\nfunction INCr16(hRegister, lRegister) {\n  var value = combineBytes(this.registers[hRegister], this.registers[lRegister]);\n  var incrementedr16 = value + 1 & 0xFFFF;\n\n  var _seperateBytes = seperateBytes(incrementedr16),\n      highByte = _seperateBytes.highByte,\n      lowByte = _seperateBytes.lowByte;\n\n  this.registers[hRegister] = highByte;\n  this.registers[lRegister] = lowByte;\n}\n\nmodule.exports = {\n  INCr8: INCr8,\n  INCr16: INCr16\n};\n\n//# sourceURL=webpack:///./src/gameboy/z80/instructions/inc.js?");

/***/ }),

/***/ "./src/gameboy/z80/instructions/jp.js":
/*!********************************************!*\
  !*** ./src/gameboy/z80/instructions/jp.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction combineBytes(highByte, lowByte) {\n  return (highByte << 8 | lowByte) & 0xFFFF;\n}\n\nfunction JPn16(hNumber, lNumber) {\n  this.registers.pc = combineBytes(hNumber, lNumber);\n}\n\nfunction JPrr16(hRegister, lRegister) {\n  var address = combineBytes(this.registers[hRegister], this.registers[lRegister]);\n  this.registers.pc = this.readMemory(address);\n}\n\nmodule.exports = {\n  JPn16: JPn16,\n  JPrr16: JPrr16\n};\n\n//# sourceURL=webpack:///./src/gameboy/z80/instructions/jp.js?");

/***/ }),

/***/ "./src/gameboy/z80/instructions/jr.js":
/*!********************************************!*\
  !*** ./src/gameboy/z80/instructions/jr.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction getTwosComplement(number, numBits) {\n  var sigBit = number >> numBits - 1;\n\n  if (sigBit === 0) {\n    return number;\n  }\n  return -1 * (~number + 1 & 0xff);\n}\n\nfunction JRn8(number) {\n  var jumpAddress = getTwosComplement(number, 8) + this.registers.pc;\n  this.registers.pc = jumpAddress;\n}\n\nfunction JRZn8(number) {\n  var zeroFlagBit = this.getZeroFlagBit();\n\n  if (zeroFlagBit === 0) {\n    return;\n  }\n\n  var jumpAddress = getTwosComplement(number, 8) + this.registers.pc;\n  this.registers.pc = jumpAddress;\n}\n\nfunction JRNZn8(number) {\n  var zeroFlagBit = this.getZeroFlagBit();\n\n  if (zeroFlagBit === 1) {\n    return;\n  }\n\n  var jumpAddress = getTwosComplement(number, 8) + this.registers.pc;\n  this.registers.pc = jumpAddress;\n}\n\nmodule.exports = {\n  JRn8: JRn8,\n  JRZn8: JRZn8,\n  JRNZn8: JRNZn8\n};\n\n//# sourceURL=webpack:///./src/gameboy/z80/instructions/jr.js?");

/***/ }),

/***/ "./src/gameboy/z80/instructions/ld.js":
/*!********************************************!*\
  !*** ./src/gameboy/z80/instructions/ld.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ./../bytesUtil.js */ \"./src/gameboy/z80/bytesUtil.js\"),\n    combineBytes = _require.combineBytes,\n    seperateBytes = _require.seperateBytes;\n\nfunction LDr8n8(register, number) {\n  this.registers[register] = number;\n}\n\nfunction LDr8r8(dstRegister, srcRegister) {\n  this.registers[dstRegister] = this.registers[srcRegister];\n}\n\nfunction LDr16n16(hRegister, lRegister, hNumber, lNumber) {\n  // Special case for stack pointer because it's stored as one 16bit rather than two 8bit\n  if (hRegister === 's' && lRegister === 'p') {\n    var spL = this.byte1;\n    var spH = this.byte2;\n    this.registers.sp = combineBytes(spH, spL);\n  } else {\n    this.registers[hRegister] = hNumber;\n    this.registers[lRegister] = lNumber;\n  }\n}\n\nfunction LDrn16r8(hDstNumber, lDstNumber, srcRegister) {\n  var address = combineBytes(hDstNumber, lDstNumber);\n  this.writeMemory(address, this.registers[srcRegister]);\n}\n\nfunction LDrr16n8(hDstRegister, lDstRegister, srcNumber) {\n  var address = combineBytes(this.registers[hDstRegister], this.registers[lDstRegister]);\n  this.writeMemory(address, srcNumber);\n}\n\nfunction LDrr16r8(hDstRegister, lDstRegister, srcRegister) {\n  var address = combineBytes(this.registers[hDstRegister], this.registers[lDstRegister]);\n  this.writeMemory(address, this.registers[srcRegister]);\n}\n\nfunction LDr8rr16(dstRegister, hSrcRegister, lSrcRegister) {\n  var hSrcRegVal = this.registers[hSrcRegister];\n  var lSrcRegVal = this.registers[lSrcRegister];\n  var address = combineBytes(hSrcRegVal, lSrcRegVal);\n\n  this.registers[dstRegister] = this.mainMemory[address];\n}\n\nfunction LDrr8r8(dstRegister, srcRegister) {\n  var address = 0xFF00 + this.registers[dstRegister] & 0xFFFF;\n  this.writeMemory(address, this.registers[srcRegister]);\n}\n\nfunction LDDrr16r8(hDstRegister, lDstRegister, srcRegister) {\n  var hDstRegVal = this.registers[hDstRegister];\n  var lDstRegVal = this.registers[lDstRegister];\n\n  var address = combineBytes(hDstRegVal, lDstRegVal);\n  this.writeMemory(address, this.registers[srcRegister]);\n\n  // Decrement\n  var decVal = address - 1 & 0xFFFF;\n\n  var _seperateBytes = seperateBytes(decVal),\n      highByte = _seperateBytes.highByte,\n      lowByte = _seperateBytes.lowByte;\n\n  this.registers[hDstRegister] = highByte;\n  this.registers[lDstRegister] = lowByte;\n}\n\nfunction LDHr8rn8(register, number) {\n  var address = 0xFF00 + number & 0xFFFF;\n  this.registers[register] = this.mainMemory[address];\n}\n\nfunction LDHrn8r8(number, register) {\n  var address = 0xFF00 + number & 0xFFFF;\n  this.writeMemory(address, this.registers[register]);\n}\n\nfunction LDIr8rr16(dstRegister, hSrcRegister, lSrcRegister) {\n  var hSrcRegVal = this.registers[hSrcRegister];\n  var lSrcRegVal = this.registers[lSrcRegister];\n\n  var srcAddress = combineBytes(hSrcRegVal, lSrcRegVal);\n  this.registers[dstRegister] = this.mainMemory[srcAddress];\n\n  // Increment\n  var incVal = srcAddress + 1 & 0xFFFF;\n\n  var _seperateBytes2 = seperateBytes(incVal),\n      highByte = _seperateBytes2.highByte,\n      lowByte = _seperateBytes2.lowByte;\n\n  this.registers[hSrcRegister] = highByte;\n  this.registers[lSrcRegister] = lowByte;\n}\n\nfunction LDIrr16r8(hDstRegister, lDstRegister, srcRegister) {\n  var hDstRegVal = this.registers[hDstRegister];\n  var lDstRegVal = this.registers[lDstRegister];\n\n  var address = combineBytes(hDstRegVal, lDstRegVal);\n  this.writeMemory(address, this.registers[srcRegister]);\n\n  // Increment\n  var incVal = address + 1 & 0xFFFF;\n\n  var _seperateBytes3 = seperateBytes(incVal),\n      highByte = _seperateBytes3.highByte,\n      lowByte = _seperateBytes3.lowByte;\n\n  this.registers[hDstRegister] = highByte;\n  this.registers[lDstRegister] = lowByte;\n}\n\nmodule.exports = {\n  LDr8n8: LDr8n8,\n  LDr8r8: LDr8r8,\n  LDr8rr16: LDr8rr16,\n  LDr16n16: LDr16n16,\n  LDrn16r8: LDrn16r8,\n  LDrr8r8: LDrr8r8,\n  LDrr16n8: LDrr16n8,\n  LDrr16r8: LDrr16r8,\n  LDDrr16r8: LDDrr16r8,\n  LDHr8rn8: LDHr8rn8,\n  LDHrn8r8: LDHrn8r8,\n  LDIr8rr16: LDIr8rr16,\n  LDIrr16r8: LDIrr16r8\n};\n\n//# sourceURL=webpack:///./src/gameboy/z80/instructions/ld.js?");

/***/ }),

/***/ "./src/gameboy/z80/instructions/or.js":
/*!********************************************!*\
  !*** ./src/gameboy/z80/instructions/or.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction ORn8(number) {\n  this.registers.a = this.registers.a | number;\n\n  if (this.registers.a === 0) {\n    this.setZeroFlagBit();\n  } else {\n    this.clearZeroFlagBit();\n  }\n  this.clearCarryFlagBit();\n  this.clearSubtractFlagBit();\n  this.clearHalfCarryFlagBit();\n}\n\nfunction ORr8(register) {\n  this.registers.a = this.registers.a | this.registers[register];\n\n  if (this.registers.a === 0) {\n    this.setZeroFlagBit();\n  } else {\n    this.clearZeroFlagBit();\n  }\n  this.clearCarryFlagBit();\n  this.clearSubtractFlagBit();\n  this.clearHalfCarryFlagBit();\n}\n\nmodule.exports = {\n  ORn8: ORn8,\n  ORr8: ORr8\n};\n\n//# sourceURL=webpack:///./src/gameboy/z80/instructions/or.js?");

/***/ }),

/***/ "./src/gameboy/z80/instructions/pop.js":
/*!*********************************************!*\
  !*** ./src/gameboy/z80/instructions/pop.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction POPr16(hRegister, lRegister) {\n  this.registers[lRegister] = this.mainMemory[this.registers.sp];\n  this.registers[hRegister] = this.mainMemory[this.registers.sp + 1];\n  this.registers.sp += 2;\n}\n\nmodule.exports = POPr16;\n\n//# sourceURL=webpack:///./src/gameboy/z80/instructions/pop.js?");

/***/ }),

/***/ "./src/gameboy/z80/instructions/push.js":
/*!**********************************************!*\
  !*** ./src/gameboy/z80/instructions/push.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction PUSHr16(hRegister, lRegister) {\n  var spVal = this.registers.sp;\n  this.mainMemory[spVal - 1] = this.registers[hRegister];\n  this.mainMemory[spVal - 2] = this.registers[lRegister];\n  this.registers.sp -= 2;\n}\n\nmodule.exports = PUSHr16;\n\n//# sourceURL=webpack:///./src/gameboy/z80/instructions/push.js?");

/***/ }),

/***/ "./src/gameboy/z80/instructions/ret.js":
/*!*********************************************!*\
  !*** ./src/gameboy/z80/instructions/ret.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ./../bytesUtil.js */ \"./src/gameboy/z80/bytesUtil.js\"),\n    combineBytes = _require.combineBytes;\n\nfunction RET() {\n  var pcL = this.mainMemory[this.registers.sp];\n  var pcH = this.mainMemory[this.registers.sp + 1];\n\n  this.registers.pc = combineBytes(pcH, pcL);\n  this.registers.sp += 2;\n}\n\nmodule.exports = {\n  RET: RET\n};\n\n//# sourceURL=webpack:///./src/gameboy/z80/instructions/ret.js?");

/***/ }),

/***/ "./src/gameboy/z80/instructions/rl.js":
/*!********************************************!*\
  !*** ./src/gameboy/z80/instructions/rl.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction setBit(byte, bitNumber) {\n  return (byte | 1 << bitNumber) & 0xFF;\n}\n\nfunction getBit(value, bitNumber) {\n  return value >> bitNumber & 0x1;\n}\n\nfunction clearBit(byte, bitNumber) {\n  return byte & ~(1 << bitNumber) & 0xFF;\n}\n\nfunction rotateLeft(byte, carryFlag) {\n  var newCarryFlag = getBit(byte, 7);\n  var newByte = carryFlag === 1 ? setBit(byte << 1, 0) : clearBit(byte << 1, 0);\n  return { byte: newByte, carryFlag: newCarryFlag };\n}\n\nfunction RLA() {\n  var carryFlag = this.getCarryFlagBit();\n\n  var _rotateLeft = rotateLeft(this.registers.a, carryFlag),\n      newAReg = _rotateLeft.byte,\n      newCarryFlag = _rotateLeft.carryFlag;\n\n  this.registers.a = newAReg;\n\n  this.clearZeroFlagBit();\n  this.clearSubtractFlagBit();\n  this.clearHalfCarryFlagBit();\n  if (newCarryFlag === 0) {\n    this.clearCarryFlagBit();\n  } else {\n    this.setCarryFlagBit();\n  }\n}\n\nfunction RLr8(register) {\n  var carryFlag = this.getCarryFlagBit();\n\n  var _rotateLeft2 = rotateLeft(this.registers[register], carryFlag),\n      newReg = _rotateLeft2.byte,\n      newCarryFlag = _rotateLeft2.carryFlag;\n\n  this.registers[register] = newReg;\n\n  if (this.registers[register] === 0) {\n    this.setZeroFlagBit();\n  } else {\n    this.clearZeroFlagBit();\n  }\n  if (newCarryFlag === 0) {\n    this.clearCarryFlagBit();\n  } else {\n    this.setCarryFlagBit();\n  }\n  this.clearSubtractFlagBit();\n  this.clearHalfCarryFlagBit();\n}\n\nmodule.exports = {\n  RLA: RLA,\n  RLr8: RLr8\n};\n\n//# sourceURL=webpack:///./src/gameboy/z80/instructions/rl.js?");

/***/ }),

/***/ "./src/gameboy/z80/instructions/rst.js":
/*!*********************************************!*\
  !*** ./src/gameboy/z80/instructions/rst.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ./../bytesUtil.js */ \"./src/gameboy/z80/bytesUtil.js\"),\n    seperateBytes = _require.seperateBytes;\n\nfunction RSTf(address) {\n  var _seperateBytes = seperateBytes(this.registers.pc),\n      pcHighByte = _seperateBytes.highByte,\n      pcLowByte = _seperateBytes.lowByte;\n\n  this.writeMemory(this.registers.sp - 1, pcHighByte);\n  this.writeMemory(this.registers.sp - 2, pcLowByte);\n\n  this.registers.pc = address;\n  this.registers.sp -= 2;\n}\n\nmodule.exports = RSTf;\n\n//# sourceURL=webpack:///./src/gameboy/z80/instructions/rst.js?");

/***/ }),

/***/ "./src/gameboy/z80/instructions/sub.js":
/*!*********************************************!*\
  !*** ./src/gameboy/z80/instructions/sub.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction SUBr8(register) {\n  var subVal = this.registers.a - this.registers[register];\n  this.registers.a = subVal & 0xFF;\n\n  this.setSubtractFlagBit();\n  if (this.registers.a === 0) {\n    this.setZeroFlagBit();\n  } else {\n    this.clearZeroFlagBit();\n  }\n  if (subVal > 0) {\n    this.setCarryFlagBit();\n  } else {\n    this.clearCarryFlagBit();\n  }\n}\n\nmodule.exports = {\n  SUBr8: SUBr8\n};\n\n//# sourceURL=webpack:///./src/gameboy/z80/instructions/sub.js?");

/***/ }),

/***/ "./src/gameboy/z80/instructions/swap.js":
/*!**********************************************!*\
  !*** ./src/gameboy/z80/instructions/swap.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction SWAPr8(register) {\n  var regByte = this.registers[register];\n  var swappedByte = (regByte & 0x0F) << 4 | (regByte & 0xF0) >> 4;\n  this.registers[register] = swappedByte;\n\n  if (this.registers[register] === 0) {\n    this.setZeroFlagBit();\n  } else {\n    this.clearZeroFlagBit();\n  }\n  this.clearSubtractFlagBit();\n  this.clearHalfCarryFlagBit();\n  this.clearCarryFlagBit();\n}\n\nmodule.exports = {\n  SWAPr8: SWAPr8\n};\n\n//# sourceURL=webpack:///./src/gameboy/z80/instructions/swap.js?");

/***/ }),

/***/ "./src/gameboy/z80/instructions/xor.js":
/*!*********************************************!*\
  !*** ./src/gameboy/z80/instructions/xor.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction XORr8(register) {\n  this.registers.a = this.registers.a ^ this.registers[register];\n\n  if (this.registers.a === 0) {\n    this.setZeroFlagBit();\n  } else {\n    this.clearZeroFlagBit();\n  }\n  this.clearSubtractFlagBit();\n  this.clearHalfCarryFlagBit();\n  this.clearCarryFlagBit();\n}\n\nmodule.exports = {\n  XORr8: XORr8\n};\n\n//# sourceURL=webpack:///./src/gameboy/z80/instructions/xor.js?");

/***/ }),

/***/ "./src/gameboy/z80/opcodes.json":
/*!**************************************!*\
  !*** ./src/gameboy/z80/opcodes.json ***!
  \**************************************/
/*! exports provided: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 254, 255, default */
/***/ (function(module) {

eval("module.exports = {\"0\":{\"opcode\":\"0x0\",\"mnemonic\":\"NOP\",\"operands\":[],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"1\":{\"opcode\":\"0x1\",\"mnemonic\":\"LD\",\"operands\":[\"BC\",\"d16\"],\"bytes\":3,\"cycles\":12,\"flagsZNHC\":[\"-\",\".-\",\"-\",\"-\"]},\"2\":{\"opcode\":\"0x2\",\"mnemonic\":\"LD\",\"operands\":[\"(BC)\",\"A\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"3\":{\"opcode\":\"0x3\",\"mnemonic\":\"INC\",\"operands\":[\"BC\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"4\":{\"opcode\":\"0x4\",\"mnemonic\":\"INC\",\"operands\":[\"B\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"H\",\"-\"]},\"5\":{\"opcode\":\"0x5\",\"mnemonic\":\"DEC\",\"operands\":[\"B\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"-\"]},\"6\":{\"opcode\":\"0x6\",\"mnemonic\":\"LD\",\"operands\":[\"B\",\"d8\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"7\":{\"opcode\":\"0x7\",\"mnemonic\":\"RLCA\",\"operands\":[],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"0\",\"0\",\"0\",\"C\"]},\"8\":{\"opcode\":\"0x8\",\"mnemonic\":\"LD\",\"operands\":[\"(a16)\",\"SP\"],\"bytes\":3,\"cycles\":20,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"9\":{\"opcode\":\"0x9\",\"mnemonic\":\"ADD\",\"operands\":[\"HL\",\"BC\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"0\",\"H\",\"C\"]},\"10\":{\"opcode\":\"0xa\",\"mnemonic\":\"LD\",\"operands\":[\"A\",\"(BC)\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"11\":{\"opcode\":\"0xb\",\"mnemonic\":\"DEC\",\"operands\":[\"BC\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"12\":{\"opcode\":\"0xc\",\"mnemonic\":\"INC\",\"operands\":[\"C\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"H\",\"-\"]},\"13\":{\"opcode\":\"0xd\",\"mnemonic\":\"DEC\",\"operands\":[\"C\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"-\"]},\"14\":{\"opcode\":\"0xe\",\"mnemonic\":\"LD\",\"operands\":[\"C\",\"d8\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"15\":{\"opcode\":\"0xf\",\"mnemonic\":\"RRCA\",\"operands\":[],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"0\",\"0\",\"0\",\"C\"]},\"16\":{\"opcode\":\"0x10\",\"mnemonic\":\"STOP\",\"operands\":[\"0\"],\"bytes\":2,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"17\":{\"opcode\":\"0x11\",\"mnemonic\":\"LD\",\"operands\":[\"DE\",\"d16\"],\"bytes\":3,\"cycles\":12,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"18\":{\"opcode\":\"0x12\",\"mnemonic\":\"LD\",\"operands\":[\"(DE)\",\"A\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"19\":{\"opcode\":\"0x13\",\"mnemonic\":\"INC\",\"operands\":[\"DE\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"20\":{\"opcode\":\"0x14\",\"mnemonic\":\"INC\",\"operands\":[\"D\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"H\",\"-\"]},\"21\":{\"opcode\":\"0x15\",\"mnemonic\":\"DEC\",\"operands\":[\"D\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"-\"]},\"22\":{\"opcode\":\"0x16\",\"mnemonic\":\"LD\",\"operands\":[\"D\",\"d8\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"23\":{\"opcode\":\"0x17\",\"mnemonic\":\"RLA\",\"operands\":[],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"0\",\"0\",\"0\",\"C\"]},\"24\":{\"opcode\":\"0x18\",\"mnemonic\":\"JR\",\"operands\":[\"r8\"],\"bytes\":2,\"cycles\":12,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"25\":{\"opcode\":\"0x19\",\"mnemonic\":\"ADD\",\"operands\":[\"HL\",\"DE\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"0\",\"H\",\"C\"]},\"26\":{\"opcode\":\"0x1a\",\"mnemonic\":\"LD\",\"operands\":[\"A\",\"(DE)\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"27\":{\"opcode\":\"0x1b\",\"mnemonic\":\"DEC\",\"operands\":[\"DE\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"28\":{\"opcode\":\"0x1c\",\"mnemonic\":\"INC\",\"operands\":[\"E\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"H\",\"-\"]},\"29\":{\"opcode\":\"0x1d\",\"mnemonic\":\"DEC\",\"operands\":[\"E\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"-\"]},\"30\":{\"opcode\":\"0x1e\",\"mnemonic\":\"LD\",\"operands\":[\"E\",\"d8\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"31\":{\"opcode\":\"0x1f\",\"mnemonic\":\"RRA\",\"operands\":[],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"0\",\"0\",\"0\",\"C\"]},\"32\":{\"opcode\":\"0x20\",\"mnemonic\":\"JR\",\"operands\":[\"NZ\",\"r8\"],\"bytes\":2,\"cycles\":12,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"33\":{\"opcode\":\"0x21\",\"mnemonic\":\"LD\",\"operands\":[\"HL\",\"d16\"],\"bytes\":3,\"cycles\":12,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"34\":{\"opcode\":\"0x22\",\"mnemonic\":\"LD\",\"operands\":[\"(HL+)\",\"A\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"35\":{\"opcode\":\"0x23\",\"mnemonic\":\"INC\",\"operands\":[\"HL\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"36\":{\"opcode\":\"0x24\",\"mnemonic\":\"INC\",\"operands\":[\"H\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"H\",\"-\"]},\"37\":{\"opcode\":\"0x25\",\"mnemonic\":\"DEC\",\"operands\":[\"H\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"-\"]},\"38\":{\"opcode\":\"0x26\",\"mnemonic\":\"LD\",\"operands\":[\"H\",\"d8\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"39\":{\"opcode\":\"0x27\",\"mnemonic\":\"DAA\",\"operands\":[],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"-\",\"0\",\"C\"]},\"40\":{\"opcode\":\"0x28\",\"mnemonic\":\"JR\",\"operands\":[\"Z\",\"r8\"],\"bytes\":2,\"cycles\":12,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"41\":{\"opcode\":\"0x29\",\"mnemonic\":\"ADD\",\"operands\":[\"HL\",\"HL\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"0\",\"H\",\"C\"]},\"42\":{\"opcode\":\"0x2a\",\"mnemonic\":\"LD\",\"operands\":[\"A\",\"(HL+)\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"43\":{\"opcode\":\"0x2b\",\"mnemonic\":\"DEC\",\"operands\":[\"HL\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"44\":{\"opcode\":\"0x2c\",\"mnemonic\":\"INC\",\"operands\":[\"L\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"H\",\"-\"]},\"45\":{\"opcode\":\"0x2d\",\"mnemonic\":\"DEC\",\"operands\":[\"L\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"-\"]},\"46\":{\"opcode\":\"0x2e\",\"mnemonic\":\"LD\",\"operands\":[\"L\",\"d8\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"47\":{\"opcode\":\"0x2f\",\"mnemonic\":\"CPL\",\"operands\":[],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"1\",\"1\",\"-\"]},\"48\":{\"opcode\":\"0x30\",\"mnemonic\":\"JR\",\"operands\":[\"NC\",\"r8\"],\"bytes\":2,\"cycles\":12,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"49\":{\"opcode\":\"0x31\",\"mnemonic\":\"LD\",\"operands\":[\"SP\",\"d16\"],\"bytes\":3,\"cycles\":12,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"50\":{\"opcode\":\"0x32\",\"mnemonic\":\"LD\",\"operands\":[\"(HL-)\",\"A\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"51\":{\"opcode\":\"0x33\",\"mnemonic\":\"INC\",\"operands\":[\"SP\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"52\":{\"opcode\":\"0x34\",\"mnemonic\":\"INC\",\"operands\":[\"(HL)\"],\"bytes\":1,\"cycles\":12,\"flagsZNHC\":[\"Z\",\"0\",\"H\",\"-\"]},\"53\":{\"opcode\":\"0x35\",\"mnemonic\":\"DEC\",\"operands\":[\"(HL)\"],\"bytes\":1,\"cycles\":12,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"-\"]},\"54\":{\"opcode\":\"0x36\",\"mnemonic\":\"LD\",\"operands\":[\"(HL)\",\"d8\"],\"bytes\":2,\"cycles\":12,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"55\":{\"opcode\":\"0x37\",\"mnemonic\":\"SCF\",\"operands\":[],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"0\",\"0\",\"1\"]},\"56\":{\"opcode\":\"0x38\",\"mnemonic\":\"JR\",\"operands\":[\"C\",\"r8\"],\"bytes\":2,\"cycles\":12,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"57\":{\"opcode\":\"0x39\",\"mnemonic\":\"ADD\",\"operands\":[\"HL\",\"SP\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"0\",\"H\",\"C\"]},\"58\":{\"opcode\":\"0x3a\",\"mnemonic\":\"LD\",\"operands\":[\"A\",\"(HL-)\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"59\":{\"opcode\":\"0x3b\",\"mnemonic\":\"DEC\",\"operands\":[\"SP\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"60\":{\"opcode\":\"0x3c\",\"mnemonic\":\"INC\",\"operands\":[\"A\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"H\",\"-\"]},\"61\":{\"opcode\":\"0x3d\",\"mnemonic\":\"DEC\",\"operands\":[\"A\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"-\"]},\"62\":{\"opcode\":\"0x3e\",\"mnemonic\":\"LD\",\"operands\":[\"A\",\"d8\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"63\":{\"opcode\":\"0x3f\",\"mnemonic\":\"CCF\",\"operands\":[],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"0\",\"0\",\"C\"]},\"64\":{\"opcode\":\"0x40\",\"mnemonic\":\"LD\",\"operands\":[\"B\",\"B\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"65\":{\"opcode\":\"0x41\",\"mnemonic\":\"LD\",\"operands\":[\"B\",\"C\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"66\":{\"opcode\":\"0x42\",\"mnemonic\":\"LD\",\"operands\":[\"B\",\"D\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"67\":{\"opcode\":\"0x43\",\"mnemonic\":\"LD\",\"operands\":[\"B\",\"E\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"68\":{\"opcode\":\"0x44\",\"mnemonic\":\"LD\",\"operands\":[\"B\",\"H\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"69\":{\"opcode\":\"0x45\",\"mnemonic\":\"LD\",\"operands\":[\"B\",\"L\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"70\":{\"opcode\":\"0x46\",\"mnemonic\":\"LD\",\"operands\":[\"B\",\"(HL)\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"71\":{\"opcode\":\"0x47\",\"mnemonic\":\"LD\",\"operands\":[\"B\",\"A\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"72\":{\"opcode\":\"0x48\",\"mnemonic\":\"LD\",\"operands\":[\"C\",\"B\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"73\":{\"opcode\":\"0x49\",\"mnemonic\":\"LD\",\"operands\":[\"C\",\"C\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"74\":{\"opcode\":\"0x4a\",\"mnemonic\":\"LD\",\"operands\":[\"C\",\"D\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"75\":{\"opcode\":\"0x4b\",\"mnemonic\":\"LD\",\"operands\":[\"C\",\"E\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"76\":{\"opcode\":\"0x4c\",\"mnemonic\":\"LD\",\"operands\":[\"C\",\"H\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"77\":{\"opcode\":\"0x4d\",\"mnemonic\":\"LD\",\"operands\":[\"C\",\"L\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"78\":{\"opcode\":\"0x4e\",\"mnemonic\":\"LD\",\"operands\":[\"C\",\"(HL)\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"79\":{\"opcode\":\"0x4f\",\"mnemonic\":\"LD\",\"operands\":[\"C\",\"A\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"80\":{\"opcode\":\"0x50\",\"mnemonic\":\"LD\",\"operands\":[\"D\",\"B\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"81\":{\"opcode\":\"0x51\",\"mnemonic\":\"LD\",\"operands\":[\"D\",\"C\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"82\":{\"opcode\":\"0x52\",\"mnemonic\":\"LD\",\"operands\":[\"D\",\"D\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"83\":{\"opcode\":\"0x53\",\"mnemonic\":\"LD\",\"operands\":[\"D\",\"E\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"84\":{\"opcode\":\"0x54\",\"mnemonic\":\"LD\",\"operands\":[\"D\",\"H\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"85\":{\"opcode\":\"0x55\",\"mnemonic\":\"LD\",\"operands\":[\"D\",\"L\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"86\":{\"opcode\":\"0x56\",\"mnemonic\":\"LD\",\"operands\":[\"D\",\"(HL)\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"87\":{\"opcode\":\"0x57\",\"mnemonic\":\"LD\",\"operands\":[\"D\",\"A\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"88\":{\"opcode\":\"0x58\",\"mnemonic\":\"LD\",\"operands\":[\"E\",\"B\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"89\":{\"opcode\":\"0x59\",\"mnemonic\":\"LD\",\"operands\":[\"E\",\"C\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"90\":{\"opcode\":\"0x5a\",\"mnemonic\":\"LD\",\"operands\":[\"E\",\"D\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"91\":{\"opcode\":\"0x5b\",\"mnemonic\":\"LD\",\"operands\":[\"E\",\"E\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"92\":{\"opcode\":\"0x5c\",\"mnemonic\":\"LD\",\"operands\":[\"E\",\"H\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"93\":{\"opcode\":\"0x5d\",\"mnemonic\":\"LD\",\"operands\":[\"E\",\"L\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"94\":{\"opcode\":\"0x5e\",\"mnemonic\":\"LD\",\"operands\":[\"E\",\"(HL)\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"95\":{\"opcode\":\"0x5f\",\"mnemonic\":\"LD\",\"operands\":[\"E\",\"A\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"96\":{\"opcode\":\"0x60\",\"mnemonic\":\"LD\",\"operands\":[\"H\",\"B\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"97\":{\"opcode\":\"0x61\",\"mnemonic\":\"LD\",\"operands\":[\"H\",\"C\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"98\":{\"opcode\":\"0x62\",\"mnemonic\":\"LD\",\"operands\":[\"H\",\"D\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"99\":{\"opcode\":\"0x63\",\"mnemonic\":\"LD\",\"operands\":[\"H\",\"E\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"100\":{\"opcode\":\"0x64\",\"mnemonic\":\"LD\",\"operands\":[\"H\",\"H\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"101\":{\"opcode\":\"0x65\",\"mnemonic\":\"LD\",\"operands\":[\"H\",\"L\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"102\":{\"opcode\":\"0x66\",\"mnemonic\":\"LD\",\"operands\":[\"H\",\"(HL)\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"103\":{\"opcode\":\"0x67\",\"mnemonic\":\"LD\",\"operands\":[\"H\",\"A\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"104\":{\"opcode\":\"0x68\",\"mnemonic\":\"LD\",\"operands\":[\"L\",\"B\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"105\":{\"opcode\":\"0x69\",\"mnemonic\":\"LD\",\"operands\":[\"L\",\"C\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"106\":{\"opcode\":\"0x6a\",\"mnemonic\":\"LD\",\"operands\":[\"L\",\"D\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"107\":{\"opcode\":\"0x6b\",\"mnemonic\":\"LD\",\"operands\":[\"L\",\"E\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"108\":{\"opcode\":\"0x6c\",\"mnemonic\":\"LD\",\"operands\":[\"L\",\"H\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"109\":{\"opcode\":\"0x6d\",\"mnemonic\":\"LD\",\"operands\":[\"L\",\"L\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"110\":{\"opcode\":\"0x6e\",\"mnemonic\":\"LD\",\"operands\":[\"L\",\"(HL)\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"111\":{\"opcode\":\"0x6f\",\"mnemonic\":\"LD\",\"operands\":[\"L\",\"A\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"112\":{\"opcode\":\"0x70\",\"mnemonic\":\"LD\",\"operands\":[\"(HL)\",\"B\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"113\":{\"opcode\":\"0x71\",\"mnemonic\":\"LD\",\"operands\":[\"(HL)\",\"C\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"114\":{\"opcode\":\"0x72\",\"mnemonic\":\"LD\",\"operands\":[\"(HL)\",\"D\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"115\":{\"opcode\":\"0x73\",\"mnemonic\":\"LD\",\"operands\":[\"(HL)\",\"E\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"116\":{\"opcode\":\"0x74\",\"mnemonic\":\"LD\",\"operands\":[\"(HL)\",\"H\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"117\":{\"opcode\":\"0x75\",\"mnemonic\":\"LD\",\"operands\":[\"(HL)\",\"L\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"118\":{\"opcode\":\"0x76\",\"mnemonic\":\"HALT\",\"operands\":[],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"119\":{\"opcode\":\"0x77\",\"mnemonic\":\"LD\",\"operands\":[\"(HL)\",\"A\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"120\":{\"opcode\":\"0x78\",\"mnemonic\":\"LD\",\"operands\":[\"A\",\"B\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"121\":{\"opcode\":\"0x79\",\"mnemonic\":\"LD\",\"operands\":[\"A\",\"C\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"122\":{\"opcode\":\"0x7a\",\"mnemonic\":\"LD\",\"operands\":[\"A\",\"D\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"123\":{\"opcode\":\"0x7b\",\"mnemonic\":\"LD\",\"operands\":[\"A\",\"E\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"124\":{\"opcode\":\"0x7c\",\"mnemonic\":\"LD\",\"operands\":[\"A\",\"H\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"125\":{\"opcode\":\"0x7d\",\"mnemonic\":\"LD\",\"operands\":[\"A\",\"L\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"126\":{\"opcode\":\"0x7e\",\"mnemonic\":\"LD\",\"operands\":[\"A\",\"(HL)\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"127\":{\"opcode\":\"0x7f\",\"mnemonic\":\"LD\",\"operands\":[\"A\",\"A\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"128\":{\"opcode\":\"0x80\",\"mnemonic\":\"ADD\",\"operands\":[\"A\",\"B\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"H\",\"C\"]},\"129\":{\"opcode\":\"0x81\",\"mnemonic\":\"ADD\",\"operands\":[\"A\",\"C\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"H\",\"C\"]},\"130\":{\"opcode\":\"0x82\",\"mnemonic\":\"ADD\",\"operands\":[\"A\",\"D\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"H\",\"C\"]},\"131\":{\"opcode\":\"0x83\",\"mnemonic\":\"ADD\",\"operands\":[\"A\",\"E\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"H\",\"C\"]},\"132\":{\"opcode\":\"0x84\",\"mnemonic\":\"ADD\",\"operands\":[\"A\",\"H\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"H\",\"C\"]},\"133\":{\"opcode\":\"0x85\",\"mnemonic\":\"ADD\",\"operands\":[\"A\",\"L\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"H\",\"C\"]},\"134\":{\"opcode\":\"0x86\",\"mnemonic\":\"ADD\",\"operands\":[\"A\",\"(HL)\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"H\",\"C\"]},\"135\":{\"opcode\":\"0x87\",\"mnemonic\":\"ADD\",\"operands\":[\"A\",\"A\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"H\",\"C\"]},\"136\":{\"opcode\":\"0x88\",\"mnemonic\":\"ADC\",\"operands\":[\"A\",\"B\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"H\",\"C\"]},\"137\":{\"opcode\":\"0x89\",\"mnemonic\":\"ADC\",\"operands\":[\"A\",\"C\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"H\",\"C\"]},\"138\":{\"opcode\":\"0x8a\",\"mnemonic\":\"ADC\",\"operands\":[\"A\",\"D\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"H\",\"C\"]},\"139\":{\"opcode\":\"0x8b\",\"mnemonic\":\"ADC\",\"operands\":[\"A\",\"E\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"H\",\"C\"]},\"140\":{\"opcode\":\"0x8c\",\"mnemonic\":\"ADC\",\"operands\":[\"A\",\"H\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"H\",\"C\"]},\"141\":{\"opcode\":\"0x8d\",\"mnemonic\":\"ADC\",\"operands\":[\"A\",\"L\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"H\",\"C\"]},\"142\":{\"opcode\":\"0x8e\",\"mnemonic\":\"ADC\",\"operands\":[\"A\",\"(HL)\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"H\",\"C\"]},\"143\":{\"opcode\":\"0x8f\",\"mnemonic\":\"ADC\",\"operands\":[\"A\",\"A\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"H\",\"C\"]},\"144\":{\"opcode\":\"0x90\",\"mnemonic\":\"SUB\",\"operands\":[\"B\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"145\":{\"opcode\":\"0x91\",\"mnemonic\":\"SUB\",\"operands\":[\"C\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"146\":{\"opcode\":\"0x92\",\"mnemonic\":\"SUB\",\"operands\":[\"D\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"147\":{\"opcode\":\"0x93\",\"mnemonic\":\"SUB\",\"operands\":[\"E\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"148\":{\"opcode\":\"0x94\",\"mnemonic\":\"SUB\",\"operands\":[\"H\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"149\":{\"opcode\":\"0x95\",\"mnemonic\":\"SUB\",\"operands\":[\"L\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"150\":{\"opcode\":\"0x96\",\"mnemonic\":\"SUB\",\"operands\":[\"(HL)\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"151\":{\"opcode\":\"0x97\",\"mnemonic\":\"SUB\",\"operands\":[\"A\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"152\":{\"opcode\":\"0x98\",\"mnemonic\":\"SBC\",\"operands\":[\"A\",\"B\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"153\":{\"opcode\":\"0x99\",\"mnemonic\":\"SBC\",\"operands\":[\"A\",\"C\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"154\":{\"opcode\":\"0x9a\",\"mnemonic\":\"SBC\",\"operands\":[\"A\",\"D\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"155\":{\"opcode\":\"0x9b\",\"mnemonic\":\"SBC\",\"operands\":[\"A\",\"E\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"156\":{\"opcode\":\"0x9c\",\"mnemonic\":\"SBC\",\"operands\":[\"A\",\"H\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"157\":{\"opcode\":\"0x9d\",\"mnemonic\":\"SBC\",\"operands\":[\"A\",\"L\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"158\":{\"opcode\":\"0x9e\",\"mnemonic\":\"SBC\",\"operands\":[\"A\",\"(HL)\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"159\":{\"opcode\":\"0x9f\",\"mnemonic\":\"SBC\",\"operands\":[\"A\",\"A\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"160\":{\"opcode\":\"0xa0\",\"mnemonic\":\"AND\",\"operands\":[\"B\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"0\"]},\"161\":{\"opcode\":\"0xa1\",\"mnemonic\":\"AND\",\"operands\":[\"C\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"0\"]},\"162\":{\"opcode\":\"0xa2\",\"mnemonic\":\"AND\",\"operands\":[\"D\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"0\"]},\"163\":{\"opcode\":\"0xa3\",\"mnemonic\":\"AND\",\"operands\":[\"E\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"0\"]},\"164\":{\"opcode\":\"0xa4\",\"mnemonic\":\"AND\",\"operands\":[\"H\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"0\"]},\"165\":{\"opcode\":\"0xa5\",\"mnemonic\":\"AND\",\"operands\":[\"L\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"0\"]},\"166\":{\"opcode\":\"0xa6\",\"mnemonic\":\"AND\",\"operands\":[\"(HL)\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"0\"]},\"167\":{\"opcode\":\"0xa7\",\"mnemonic\":\"AND\",\"operands\":[\"A\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"0\"]},\"168\":{\"opcode\":\"0xa8\",\"mnemonic\":\"XOR\",\"operands\":[\"B\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"169\":{\"opcode\":\"0xa9\",\"mnemonic\":\"XOR\",\"operands\":[\"C\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"170\":{\"opcode\":\"0xaa\",\"mnemonic\":\"XOR\",\"operands\":[\"D\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"171\":{\"opcode\":\"0xab\",\"mnemonic\":\"XOR\",\"operands\":[\"E\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"172\":{\"opcode\":\"0xac\",\"mnemonic\":\"XOR\",\"operands\":[\"H\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"173\":{\"opcode\":\"0xad\",\"mnemonic\":\"XOR\",\"operands\":[\"L\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"174\":{\"opcode\":\"0xae\",\"mnemonic\":\"XOR\",\"operands\":[\"(HL)\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"175\":{\"opcode\":\"0xaf\",\"mnemonic\":\"XOR\",\"operands\":[\"A\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"176\":{\"opcode\":\"0xb0\",\"mnemonic\":\"OR\",\"operands\":[\"B\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"177\":{\"opcode\":\"0xb1\",\"mnemonic\":\"OR\",\"operands\":[\"C\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"178\":{\"opcode\":\"0xb2\",\"mnemonic\":\"OR\",\"operands\":[\"D\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"179\":{\"opcode\":\"0xb3\",\"mnemonic\":\"OR\",\"operands\":[\"E\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"180\":{\"opcode\":\"0xb4\",\"mnemonic\":\"OR\",\"operands\":[\"H\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"181\":{\"opcode\":\"0xb5\",\"mnemonic\":\"OR\",\"operands\":[\"L\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"182\":{\"opcode\":\"0xb6\",\"mnemonic\":\"OR\",\"operands\":[\"(HL)\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"183\":{\"opcode\":\"0xb7\",\"mnemonic\":\"OR\",\"operands\":[\"A\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"184\":{\"opcode\":\"0xb8\",\"mnemonic\":\"CP\",\"operands\":[\"B\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"185\":{\"opcode\":\"0xb9\",\"mnemonic\":\"CP\",\"operands\":[\"C\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"186\":{\"opcode\":\"0xba\",\"mnemonic\":\"CP\",\"operands\":[\"D\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"187\":{\"opcode\":\"0xbb\",\"mnemonic\":\"CP\",\"operands\":[\"E\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"188\":{\"opcode\":\"0xbc\",\"mnemonic\":\"CP\",\"operands\":[\"H\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"189\":{\"opcode\":\"0xbd\",\"mnemonic\":\"CP\",\"operands\":[\"L\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"190\":{\"opcode\":\"0xbe\",\"mnemonic\":\"CP\",\"operands\":[\"(HL)\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"191\":{\"opcode\":\"0xbf\",\"mnemonic\":\"CP\",\"operands\":[\"A\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"192\":{\"opcode\":\"0xc0\",\"mnemonic\":\"RET\",\"operands\":[\"NZ\"],\"bytes\":1,\"cycles\":20,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"193\":{\"opcode\":\"0xc1\",\"mnemonic\":\"POP\",\"operands\":[\"BC\"],\"bytes\":1,\"cycles\":12,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"194\":{\"opcode\":\"0xc2\",\"mnemonic\":\"JP\",\"operands\":[\"NZ\",\"a16\"],\"bytes\":3,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"195\":{\"opcode\":\"0xc3\",\"mnemonic\":\"JP\",\"operands\":[\"a16\"],\"bytes\":3,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"196\":{\"opcode\":\"0xc4\",\"mnemonic\":\"CALL\",\"operands\":[\"NZ\",\"a16\"],\"bytes\":3,\"cycles\":24,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"197\":{\"opcode\":\"0xc5\",\"mnemonic\":\"PUSH\",\"operands\":[\"BC\"],\"bytes\":1,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"198\":{\"opcode\":\"0xc6\",\"mnemonic\":\"ADD\",\"operands\":[\"A\",\"d8\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"H\",\"C\"]},\"199\":{\"opcode\":\"0xc7\",\"mnemonic\":\"RST\",\"operands\":[\"00H\"],\"bytes\":1,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"200\":{\"opcode\":\"0xc8\",\"mnemonic\":\"RET\",\"operands\":[\"Z\"],\"bytes\":1,\"cycles\":20,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"201\":{\"opcode\":\"0xc9\",\"mnemonic\":\"RET\",\"operands\":[],\"bytes\":1,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"202\":{\"opcode\":\"0xca\",\"mnemonic\":\"JP\",\"operands\":[\"Z\",\"a16\"],\"bytes\":3,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"203\":{\"0\":{\"prefix\":\"0xcb\",\"opcode\":\"0x0\",\"mnemonic\":\"RLC\",\"operands\":[\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"1\":{\"prefix\":\"0xcb\",\"opcode\":\"0x1\",\"mnemonic\":\"RLC\",\"operands\":[\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"2\":{\"prefix\":\"0xcb\",\"opcode\":\"0x2\",\"mnemonic\":\"RLC\",\"operands\":[\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"3\":{\"prefix\":\"0xcb\",\"opcode\":\"0x3\",\"mnemonic\":\"RLC\",\"operands\":[\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"4\":{\"prefix\":\"0xcb\",\"opcode\":\"0x4\",\"mnemonic\":\"RLC\",\"operands\":[\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"5\":{\"prefix\":\"0xcb\",\"opcode\":\"0x5\",\"mnemonic\":\"RLC\",\"operands\":[\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"6\":{\"prefix\":\"0xcb\",\"opcode\":\"0x6\",\"mnemonic\":\"RLC\",\"operands\":[\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"7\":{\"prefix\":\"0xcb\",\"opcode\":\"0x7\",\"mnemonic\":\"RLC\",\"operands\":[\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"8\":{\"prefix\":\"0xcb\",\"opcode\":\"0x8\",\"mnemonic\":\"RRC\",\"operands\":[\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"9\":{\"prefix\":\"0xcb\",\"opcode\":\"0x9\",\"mnemonic\":\"RRC\",\"operands\":[\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"10\":{\"prefix\":\"0xcb\",\"opcode\":\"0xa\",\"mnemonic\":\"RRC\",\"operands\":[\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"11\":{\"prefix\":\"0xcb\",\"opcode\":\"0xb\",\"mnemonic\":\"RRC\",\"operands\":[\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"12\":{\"prefix\":\"0xcb\",\"opcode\":\"0xc\",\"mnemonic\":\"RRC\",\"operands\":[\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"13\":{\"prefix\":\"0xcb\",\"opcode\":\"0xd\",\"mnemonic\":\"RRC\",\"operands\":[\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"14\":{\"prefix\":\"0xcb\",\"opcode\":\"0xe\",\"mnemonic\":\"RRC\",\"operands\":[\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"15\":{\"prefix\":\"0xcb\",\"opcode\":\"0xf\",\"mnemonic\":\"RRC\",\"operands\":[\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"16\":{\"prefix\":\"0xcb\",\"opcode\":\"0x10\",\"mnemonic\":\"RL\",\"operands\":[\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"17\":{\"prefix\":\"0xcb\",\"opcode\":\"0x11\",\"mnemonic\":\"RL\",\"operands\":[\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"18\":{\"prefix\":\"0xcb\",\"opcode\":\"0x12\",\"mnemonic\":\"RL\",\"operands\":[\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"19\":{\"prefix\":\"0xcb\",\"opcode\":\"0x13\",\"mnemonic\":\"RL\",\"operands\":[\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"20\":{\"prefix\":\"0xcb\",\"opcode\":\"0x14\",\"mnemonic\":\"RL\",\"operands\":[\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"21\":{\"prefix\":\"0xcb\",\"opcode\":\"0x15\",\"mnemonic\":\"RL\",\"operands\":[\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"22\":{\"prefix\":\"0xcb\",\"opcode\":\"0x16\",\"mnemonic\":\"RL\",\"operands\":[\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"23\":{\"prefix\":\"0xcb\",\"opcode\":\"0x17\",\"mnemonic\":\"RL\",\"operands\":[\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"24\":{\"prefix\":\"0xcb\",\"opcode\":\"0x18\",\"mnemonic\":\"RR\",\"operands\":[\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"25\":{\"prefix\":\"0xcb\",\"opcode\":\"0x19\",\"mnemonic\":\"RR\",\"operands\":[\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"26\":{\"prefix\":\"0xcb\",\"opcode\":\"0x1a\",\"mnemonic\":\"RR\",\"operands\":[\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"27\":{\"prefix\":\"0xcb\",\"opcode\":\"0x1b\",\"mnemonic\":\"RR\",\"operands\":[\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"28\":{\"prefix\":\"0xcb\",\"opcode\":\"0x1c\",\"mnemonic\":\"RR\",\"operands\":[\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"29\":{\"prefix\":\"0xcb\",\"opcode\":\"0x1d\",\"mnemonic\":\"RR\",\"operands\":[\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"30\":{\"prefix\":\"0xcb\",\"opcode\":\"0x1e\",\"mnemonic\":\"RR\",\"operands\":[\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"31\":{\"prefix\":\"0xcb\",\"opcode\":\"0x1f\",\"mnemonic\":\"RR\",\"operands\":[\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"32\":{\"prefix\":\"0xcb\",\"opcode\":\"0x20\",\"mnemonic\":\"SLA\",\"operands\":[\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"33\":{\"prefix\":\"0xcb\",\"opcode\":\"0x21\",\"mnemonic\":\"SLA\",\"operands\":[\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"34\":{\"prefix\":\"0xcb\",\"opcode\":\"0x22\",\"mnemonic\":\"SLA\",\"operands\":[\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"35\":{\"prefix\":\"0xcb\",\"opcode\":\"0x23\",\"mnemonic\":\"SLA\",\"operands\":[\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"36\":{\"prefix\":\"0xcb\",\"opcode\":\"0x24\",\"mnemonic\":\"SLA\",\"operands\":[\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"37\":{\"prefix\":\"0xcb\",\"opcode\":\"0x25\",\"mnemonic\":\"SLA\",\"operands\":[\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"38\":{\"prefix\":\"0xcb\",\"opcode\":\"0x26\",\"mnemonic\":\"SLA\",\"operands\":[\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"39\":{\"prefix\":\"0xcb\",\"opcode\":\"0x27\",\"mnemonic\":\"SLA\",\"operands\":[\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"40\":{\"prefix\":\"0xcb\",\"opcode\":\"0x28\",\"mnemonic\":\"SRA\",\"operands\":[\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"41\":{\"prefix\":\"0xcb\",\"opcode\":\"0x29\",\"mnemonic\":\"SRA\",\"operands\":[\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"42\":{\"prefix\":\"0xcb\",\"opcode\":\"0x2a\",\"mnemonic\":\"SRA\",\"operands\":[\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"43\":{\"prefix\":\"0xcb\",\"opcode\":\"0x2b\",\"mnemonic\":\"SRA\",\"operands\":[\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"44\":{\"prefix\":\"0xcb\",\"opcode\":\"0x2c\",\"mnemonic\":\"SRA\",\"operands\":[\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"45\":{\"prefix\":\"0xcb\",\"opcode\":\"0x2d\",\"mnemonic\":\"SRA\",\"operands\":[\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"46\":{\"prefix\":\"0xcb\",\"opcode\":\"0x2e\",\"mnemonic\":\"SRA\",\"operands\":[\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"47\":{\"prefix\":\"0xcb\",\"opcode\":\"0x2f\",\"mnemonic\":\"SRA\",\"operands\":[\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"48\":{\"prefix\":\"0xcb\",\"opcode\":\"0x30\",\"mnemonic\":\"SWAP\",\"operands\":[\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"49\":{\"prefix\":\"0xcb\",\"opcode\":\"0x31\",\"mnemonic\":\"SWAP\",\"operands\":[\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"50\":{\"prefix\":\"0xcb\",\"opcode\":\"0x32\",\"mnemonic\":\"SWAP\",\"operands\":[\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"51\":{\"prefix\":\"0xcb\",\"opcode\":\"0x33\",\"mnemonic\":\"SWAP\",\"operands\":[\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"52\":{\"prefix\":\"0xcb\",\"opcode\":\"0x34\",\"mnemonic\":\"SWAP\",\"operands\":[\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"53\":{\"prefix\":\"0xcb\",\"opcode\":\"0x35\",\"mnemonic\":\"SWAP\",\"operands\":[\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"54\":{\"prefix\":\"0xcb\",\"opcode\":\"0x36\",\"mnemonic\":\"SWAP\",\"operands\":[\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"55\":{\"prefix\":\"0xcb\",\"opcode\":\"0x37\",\"mnemonic\":\"SWAP\",\"operands\":[\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"56\":{\"prefix\":\"0xcb\",\"opcode\":\"0x38\",\"mnemonic\":\"SRL\",\"operands\":[\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"57\":{\"prefix\":\"0xcb\",\"opcode\":\"0x39\",\"mnemonic\":\"SRL\",\"operands\":[\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"58\":{\"prefix\":\"0xcb\",\"opcode\":\"0x3a\",\"mnemonic\":\"SRL\",\"operands\":[\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"59\":{\"prefix\":\"0xcb\",\"opcode\":\"0x3b\",\"mnemonic\":\"SRL\",\"operands\":[\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"60\":{\"prefix\":\"0xcb\",\"opcode\":\"0x3c\",\"mnemonic\":\"SRL\",\"operands\":[\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"61\":{\"prefix\":\"0xcb\",\"opcode\":\"0x3d\",\"mnemonic\":\"SRL\",\"operands\":[\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"62\":{\"prefix\":\"0xcb\",\"opcode\":\"0x3e\",\"mnemonic\":\"SRL\",\"operands\":[\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"63\":{\"prefix\":\"0xcb\",\"opcode\":\"0x3f\",\"mnemonic\":\"SRL\",\"operands\":[\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"C\"]},\"64\":{\"prefix\":\"0xcb\",\"opcode\":\"0x40\",\"mnemonic\":\"BIT\",\"operands\":[\"0\",\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"65\":{\"prefix\":\"0xcb\",\"opcode\":\"0x41\",\"mnemonic\":\"BIT\",\"operands\":[\"0\",\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"66\":{\"prefix\":\"0xcb\",\"opcode\":\"0x42\",\"mnemonic\":\"BIT\",\"operands\":[\"0\",\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"67\":{\"prefix\":\"0xcb\",\"opcode\":\"0x43\",\"mnemonic\":\"BIT\",\"operands\":[\"0\",\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"68\":{\"prefix\":\"0xcb\",\"opcode\":\"0x44\",\"mnemonic\":\"BIT\",\"operands\":[\"0\",\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"69\":{\"prefix\":\"0xcb\",\"opcode\":\"0x45\",\"mnemonic\":\"BIT\",\"operands\":[\"0\",\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"70\":{\"prefix\":\"0xcb\",\"opcode\":\"0x46\",\"mnemonic\":\"BIT\",\"operands\":[\"0\",\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"71\":{\"prefix\":\"0xcb\",\"opcode\":\"0x47\",\"mnemonic\":\"BIT\",\"operands\":[\"0\",\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"72\":{\"prefix\":\"0xcb\",\"opcode\":\"0x48\",\"mnemonic\":\"BIT\",\"operands\":[\"1\",\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"73\":{\"prefix\":\"0xcb\",\"opcode\":\"0x49\",\"mnemonic\":\"BIT\",\"operands\":[\"1\",\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"74\":{\"prefix\":\"0xcb\",\"opcode\":\"0x4a\",\"mnemonic\":\"BIT\",\"operands\":[\"1\",\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"75\":{\"prefix\":\"0xcb\",\"opcode\":\"0x4b\",\"mnemonic\":\"BIT\",\"operands\":[\"1\",\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"76\":{\"prefix\":\"0xcb\",\"opcode\":\"0x4c\",\"mnemonic\":\"BIT\",\"operands\":[\"1\",\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"77\":{\"prefix\":\"0xcb\",\"opcode\":\"0x4d\",\"mnemonic\":\"BIT\",\"operands\":[\"1\",\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"78\":{\"prefix\":\"0xcb\",\"opcode\":\"0x4e\",\"mnemonic\":\"BIT\",\"operands\":[\"1\",\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"79\":{\"prefix\":\"0xcb\",\"opcode\":\"0x4f\",\"mnemonic\":\"BIT\",\"operands\":[\"1\",\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"80\":{\"prefix\":\"0xcb\",\"opcode\":\"0x50\",\"mnemonic\":\"BIT\",\"operands\":[\"2\",\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"81\":{\"prefix\":\"0xcb\",\"opcode\":\"0x51\",\"mnemonic\":\"BIT\",\"operands\":[\"2\",\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"82\":{\"prefix\":\"0xcb\",\"opcode\":\"0x52\",\"mnemonic\":\"BIT\",\"operands\":[\"2\",\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"83\":{\"prefix\":\"0xcb\",\"opcode\":\"0x53\",\"mnemonic\":\"BIT\",\"operands\":[\"2\",\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"84\":{\"prefix\":\"0xcb\",\"opcode\":\"0x54\",\"mnemonic\":\"BIT\",\"operands\":[\"2\",\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"85\":{\"prefix\":\"0xcb\",\"opcode\":\"0x55\",\"mnemonic\":\"BIT\",\"operands\":[\"2\",\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"86\":{\"prefix\":\"0xcb\",\"opcode\":\"0x56\",\"mnemonic\":\"BIT\",\"operands\":[\"2\",\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"87\":{\"prefix\":\"0xcb\",\"opcode\":\"0x57\",\"mnemonic\":\"BIT\",\"operands\":[\"2\",\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"88\":{\"prefix\":\"0xcb\",\"opcode\":\"0x58\",\"mnemonic\":\"BIT\",\"operands\":[\"3\",\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"89\":{\"prefix\":\"0xcb\",\"opcode\":\"0x59\",\"mnemonic\":\"BIT\",\"operands\":[\"3\",\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"90\":{\"prefix\":\"0xcb\",\"opcode\":\"0x5a\",\"mnemonic\":\"BIT\",\"operands\":[\"3\",\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"91\":{\"prefix\":\"0xcb\",\"opcode\":\"0x5b\",\"mnemonic\":\"BIT\",\"operands\":[\"3\",\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"92\":{\"prefix\":\"0xcb\",\"opcode\":\"0x5c\",\"mnemonic\":\"BIT\",\"operands\":[\"3\",\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"93\":{\"prefix\":\"0xcb\",\"opcode\":\"0x5d\",\"mnemonic\":\"BIT\",\"operands\":[\"3\",\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"94\":{\"prefix\":\"0xcb\",\"opcode\":\"0x5e\",\"mnemonic\":\"BIT\",\"operands\":[\"3\",\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"95\":{\"prefix\":\"0xcb\",\"opcode\":\"0x5f\",\"mnemonic\":\"BIT\",\"operands\":[\"3\",\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"96\":{\"prefix\":\"0xcb\",\"opcode\":\"0x60\",\"mnemonic\":\"BIT\",\"operands\":[\"4\",\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"97\":{\"prefix\":\"0xcb\",\"opcode\":\"0x61\",\"mnemonic\":\"BIT\",\"operands\":[\"4\",\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"98\":{\"prefix\":\"0xcb\",\"opcode\":\"0x62\",\"mnemonic\":\"BIT\",\"operands\":[\"4\",\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"99\":{\"prefix\":\"0xcb\",\"opcode\":\"0x63\",\"mnemonic\":\"BIT\",\"operands\":[\"4\",\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"100\":{\"prefix\":\"0xcb\",\"opcode\":\"0x64\",\"mnemonic\":\"BIT\",\"operands\":[\"4\",\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"101\":{\"prefix\":\"0xcb\",\"opcode\":\"0x65\",\"mnemonic\":\"BIT\",\"operands\":[\"4\",\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"102\":{\"prefix\":\"0xcb\",\"opcode\":\"0x66\",\"mnemonic\":\"BIT\",\"operands\":[\"4\",\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"103\":{\"prefix\":\"0xcb\",\"opcode\":\"0x67\",\"mnemonic\":\"BIT\",\"operands\":[\"4\",\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"104\":{\"prefix\":\"0xcb\",\"opcode\":\"0x68\",\"mnemonic\":\"BIT\",\"operands\":[\"5\",\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"105\":{\"prefix\":\"0xcb\",\"opcode\":\"0x69\",\"mnemonic\":\"BIT\",\"operands\":[\"5\",\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"106\":{\"prefix\":\"0xcb\",\"opcode\":\"0x6a\",\"mnemonic\":\"BIT\",\"operands\":[\"5\",\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"107\":{\"prefix\":\"0xcb\",\"opcode\":\"0x6b\",\"mnemonic\":\"BIT\",\"operands\":[\"5\",\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"108\":{\"prefix\":\"0xcb\",\"opcode\":\"0x6c\",\"mnemonic\":\"BIT\",\"operands\":[\"5\",\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"109\":{\"prefix\":\"0xcb\",\"opcode\":\"0x6d\",\"mnemonic\":\"BIT\",\"operands\":[\"5\",\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"110\":{\"prefix\":\"0xcb\",\"opcode\":\"0x6e\",\"mnemonic\":\"BIT\",\"operands\":[\"5\",\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"111\":{\"prefix\":\"0xcb\",\"opcode\":\"0x6f\",\"mnemonic\":\"BIT\",\"operands\":[\"5\",\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"112\":{\"prefix\":\"0xcb\",\"opcode\":\"0x70\",\"mnemonic\":\"BIT\",\"operands\":[\"6\",\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"113\":{\"prefix\":\"0xcb\",\"opcode\":\"0x71\",\"mnemonic\":\"BIT\",\"operands\":[\"6\",\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"114\":{\"prefix\":\"0xcb\",\"opcode\":\"0x72\",\"mnemonic\":\"BIT\",\"operands\":[\"6\",\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"115\":{\"prefix\":\"0xcb\",\"opcode\":\"0x73\",\"mnemonic\":\"BIT\",\"operands\":[\"6\",\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"116\":{\"prefix\":\"0xcb\",\"opcode\":\"0x74\",\"mnemonic\":\"BIT\",\"operands\":[\"6\",\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"117\":{\"prefix\":\"0xcb\",\"opcode\":\"0x75\",\"mnemonic\":\"BIT\",\"operands\":[\"6\",\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"118\":{\"prefix\":\"0xcb\",\"opcode\":\"0x76\",\"mnemonic\":\"BIT\",\"operands\":[\"6\",\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"119\":{\"prefix\":\"0xcb\",\"opcode\":\"0x77\",\"mnemonic\":\"BIT\",\"operands\":[\"6\",\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"120\":{\"prefix\":\"0xcb\",\"opcode\":\"0x78\",\"mnemonic\":\"BIT\",\"operands\":[\"7\",\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"121\":{\"prefix\":\"0xcb\",\"opcode\":\"0x79\",\"mnemonic\":\"BIT\",\"operands\":[\"7\",\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"122\":{\"prefix\":\"0xcb\",\"opcode\":\"0x7a\",\"mnemonic\":\"BIT\",\"operands\":[\"7\",\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"123\":{\"prefix\":\"0xcb\",\"opcode\":\"0x7b\",\"mnemonic\":\"BIT\",\"operands\":[\"7\",\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"124\":{\"prefix\":\"0xcb\",\"opcode\":\"0x7c\",\"mnemonic\":\"BIT\",\"operands\":[\"7\",\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"125\":{\"prefix\":\"0xcb\",\"opcode\":\"0x7d\",\"mnemonic\":\"BIT\",\"operands\":[\"7\",\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"126\":{\"prefix\":\"0xcb\",\"opcode\":\"0x7e\",\"mnemonic\":\"BIT\",\"operands\":[\"7\",\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"127\":{\"prefix\":\"0xcb\",\"opcode\":\"0x7f\",\"mnemonic\":\"BIT\",\"operands\":[\"7\",\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"-\"]},\"128\":{\"prefix\":\"0xcb\",\"opcode\":\"0x80\",\"mnemonic\":\"RES\",\"operands\":[\"0\",\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"129\":{\"prefix\":\"0xcb\",\"opcode\":\"0x81\",\"mnemonic\":\"RES\",\"operands\":[\"0\",\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"130\":{\"prefix\":\"0xcb\",\"opcode\":\"0x82\",\"mnemonic\":\"RES\",\"operands\":[\"0\",\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"131\":{\"prefix\":\"0xcb\",\"opcode\":\"0x83\",\"mnemonic\":\"RES\",\"operands\":[\"0\",\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"132\":{\"prefix\":\"0xcb\",\"opcode\":\"0x84\",\"mnemonic\":\"RES\",\"operands\":[\"0\",\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"133\":{\"prefix\":\"0xcb\",\"opcode\":\"0x85\",\"mnemonic\":\"RES\",\"operands\":[\"0\",\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"134\":{\"prefix\":\"0xcb\",\"opcode\":\"0x86\",\"mnemonic\":\"RES\",\"operands\":[\"0\",\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"135\":{\"prefix\":\"0xcb\",\"opcode\":\"0x87\",\"mnemonic\":\"RES\",\"operands\":[\"0\",\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"136\":{\"prefix\":\"0xcb\",\"opcode\":\"0x88\",\"mnemonic\":\"RES\",\"operands\":[\"1\",\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"137\":{\"prefix\":\"0xcb\",\"opcode\":\"0x89\",\"mnemonic\":\"RES\",\"operands\":[\"1\",\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"138\":{\"prefix\":\"0xcb\",\"opcode\":\"0x8a\",\"mnemonic\":\"RES\",\"operands\":[\"1\",\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"139\":{\"prefix\":\"0xcb\",\"opcode\":\"0x8b\",\"mnemonic\":\"RES\",\"operands\":[\"1\",\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"140\":{\"prefix\":\"0xcb\",\"opcode\":\"0x8c\",\"mnemonic\":\"RES\",\"operands\":[\"1\",\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"141\":{\"prefix\":\"0xcb\",\"opcode\":\"0x8d\",\"mnemonic\":\"RES\",\"operands\":[\"1\",\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"142\":{\"prefix\":\"0xcb\",\"opcode\":\"0x8e\",\"mnemonic\":\"RES\",\"operands\":[\"1\",\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"143\":{\"prefix\":\"0xcb\",\"opcode\":\"0x8f\",\"mnemonic\":\"RES\",\"operands\":[\"1\",\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"144\":{\"prefix\":\"0xcb\",\"opcode\":\"0x90\",\"mnemonic\":\"RES\",\"operands\":[\"2\",\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"145\":{\"prefix\":\"0xcb\",\"opcode\":\"0x91\",\"mnemonic\":\"RES\",\"operands\":[\"2\",\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"146\":{\"prefix\":\"0xcb\",\"opcode\":\"0x92\",\"mnemonic\":\"RES\",\"operands\":[\"2\",\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"147\":{\"prefix\":\"0xcb\",\"opcode\":\"0x93\",\"mnemonic\":\"RES\",\"operands\":[\"2\",\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"148\":{\"prefix\":\"0xcb\",\"opcode\":\"0x94\",\"mnemonic\":\"RES\",\"operands\":[\"2\",\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"149\":{\"prefix\":\"0xcb\",\"opcode\":\"0x95\",\"mnemonic\":\"RES\",\"operands\":[\"2\",\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"150\":{\"prefix\":\"0xcb\",\"opcode\":\"0x96\",\"mnemonic\":\"RES\",\"operands\":[\"2\",\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"151\":{\"prefix\":\"0xcb\",\"opcode\":\"0x97\",\"mnemonic\":\"RES\",\"operands\":[\"2\",\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"152\":{\"prefix\":\"0xcb\",\"opcode\":\"0x98\",\"mnemonic\":\"RES\",\"operands\":[\"3\",\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"153\":{\"prefix\":\"0xcb\",\"opcode\":\"0x99\",\"mnemonic\":\"RES\",\"operands\":[\"3\",\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"154\":{\"prefix\":\"0xcb\",\"opcode\":\"0x9a\",\"mnemonic\":\"RES\",\"operands\":[\"3\",\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"155\":{\"prefix\":\"0xcb\",\"opcode\":\"0x9b\",\"mnemonic\":\"RES\",\"operands\":[\"3\",\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"156\":{\"prefix\":\"0xcb\",\"opcode\":\"0x9c\",\"mnemonic\":\"RES\",\"operands\":[\"3\",\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"157\":{\"prefix\":\"0xcb\",\"opcode\":\"0x9d\",\"mnemonic\":\"RES\",\"operands\":[\"3\",\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"158\":{\"prefix\":\"0xcb\",\"opcode\":\"0x9e\",\"mnemonic\":\"RES\",\"operands\":[\"3\",\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"159\":{\"prefix\":\"0xcb\",\"opcode\":\"0x9f\",\"mnemonic\":\"RES\",\"operands\":[\"3\",\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"160\":{\"prefix\":\"0xcb\",\"opcode\":\"0xa0\",\"mnemonic\":\"RES\",\"operands\":[\"4\",\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"161\":{\"prefix\":\"0xcb\",\"opcode\":\"0xa1\",\"mnemonic\":\"RES\",\"operands\":[\"4\",\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"162\":{\"prefix\":\"0xcb\",\"opcode\":\"0xa2\",\"mnemonic\":\"RES\",\"operands\":[\"4\",\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"163\":{\"prefix\":\"0xcb\",\"opcode\":\"0xa3\",\"mnemonic\":\"RES\",\"operands\":[\"4\",\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"164\":{\"prefix\":\"0xcb\",\"opcode\":\"0xa4\",\"mnemonic\":\"RES\",\"operands\":[\"4\",\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"165\":{\"prefix\":\"0xcb\",\"opcode\":\"0xa5\",\"mnemonic\":\"RES\",\"operands\":[\"4\",\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"166\":{\"prefix\":\"0xcb\",\"opcode\":\"0xa6\",\"mnemonic\":\"RES\",\"operands\":[\"4\",\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"167\":{\"prefix\":\"0xcb\",\"opcode\":\"0xa7\",\"mnemonic\":\"RES\",\"operands\":[\"4\",\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"168\":{\"prefix\":\"0xcb\",\"opcode\":\"0xa8\",\"mnemonic\":\"RES\",\"operands\":[\"5\",\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"169\":{\"prefix\":\"0xcb\",\"opcode\":\"0xa9\",\"mnemonic\":\"RES\",\"operands\":[\"5\",\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"170\":{\"prefix\":\"0xcb\",\"opcode\":\"0xaa\",\"mnemonic\":\"RES\",\"operands\":[\"5\",\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"171\":{\"prefix\":\"0xcb\",\"opcode\":\"0xab\",\"mnemonic\":\"RES\",\"operands\":[\"5\",\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"172\":{\"prefix\":\"0xcb\",\"opcode\":\"0xac\",\"mnemonic\":\"RES\",\"operands\":[\"5\",\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"173\":{\"prefix\":\"0xcb\",\"opcode\":\"0xad\",\"mnemonic\":\"RES\",\"operands\":[\"5\",\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"174\":{\"prefix\":\"0xcb\",\"opcode\":\"0xae\",\"mnemonic\":\"RES\",\"operands\":[\"5\",\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"175\":{\"prefix\":\"0xcb\",\"opcode\":\"0xaf\",\"mnemonic\":\"RES\",\"operands\":[\"5\",\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"176\":{\"prefix\":\"0xcb\",\"opcode\":\"0xb0\",\"mnemonic\":\"RES\",\"operands\":[\"6\",\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"177\":{\"prefix\":\"0xcb\",\"opcode\":\"0xb1\",\"mnemonic\":\"RES\",\"operands\":[\"6\",\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"178\":{\"prefix\":\"0xcb\",\"opcode\":\"0xb2\",\"mnemonic\":\"RES\",\"operands\":[\"6\",\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"179\":{\"prefix\":\"0xcb\",\"opcode\":\"0xb3\",\"mnemonic\":\"RES\",\"operands\":[\"6\",\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"180\":{\"prefix\":\"0xcb\",\"opcode\":\"0xb4\",\"mnemonic\":\"RES\",\"operands\":[\"6\",\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"181\":{\"prefix\":\"0xcb\",\"opcode\":\"0xb5\",\"mnemonic\":\"RES\",\"operands\":[\"6\",\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"182\":{\"prefix\":\"0xcb\",\"opcode\":\"0xb6\",\"mnemonic\":\"RES\",\"operands\":[\"6\",\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"183\":{\"prefix\":\"0xcb\",\"opcode\":\"0xb7\",\"mnemonic\":\"RES\",\"operands\":[\"6\",\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"184\":{\"prefix\":\"0xcb\",\"opcode\":\"0xb8\",\"mnemonic\":\"RES\",\"operands\":[\"7\",\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"185\":{\"prefix\":\"0xcb\",\"opcode\":\"0xb9\",\"mnemonic\":\"RES\",\"operands\":[\"7\",\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"186\":{\"prefix\":\"0xcb\",\"opcode\":\"0xba\",\"mnemonic\":\"RES\",\"operands\":[\"7\",\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"187\":{\"prefix\":\"0xcb\",\"opcode\":\"0xbb\",\"mnemonic\":\"RES\",\"operands\":[\"7\",\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"188\":{\"prefix\":\"0xcb\",\"opcode\":\"0xbc\",\"mnemonic\":\"RES\",\"operands\":[\"7\",\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"189\":{\"prefix\":\"0xcb\",\"opcode\":\"0xbd\",\"mnemonic\":\"RES\",\"operands\":[\"7\",\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"190\":{\"prefix\":\"0xcb\",\"opcode\":\"0xbe\",\"mnemonic\":\"RES\",\"operands\":[\"7\",\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"191\":{\"prefix\":\"0xcb\",\"opcode\":\"0xbf\",\"mnemonic\":\"RES\",\"operands\":[\"7\",\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"192\":{\"prefix\":\"0xcb\",\"opcode\":\"0xc0\",\"mnemonic\":\"SET\",\"operands\":[\"0\",\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"193\":{\"prefix\":\"0xcb\",\"opcode\":\"0xc1\",\"mnemonic\":\"SET\",\"operands\":[\"0\",\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"194\":{\"prefix\":\"0xcb\",\"opcode\":\"0xc2\",\"mnemonic\":\"SET\",\"operands\":[\"0\",\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"195\":{\"prefix\":\"0xcb\",\"opcode\":\"0xc3\",\"mnemonic\":\"SET\",\"operands\":[\"0\",\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"196\":{\"prefix\":\"0xcb\",\"opcode\":\"0xc4\",\"mnemonic\":\"SET\",\"operands\":[\"0\",\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"197\":{\"prefix\":\"0xcb\",\"opcode\":\"0xc5\",\"mnemonic\":\"SET\",\"operands\":[\"0\",\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"198\":{\"prefix\":\"0xcb\",\"opcode\":\"0xc6\",\"mnemonic\":\"SET\",\"operands\":[\"0\",\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"199\":{\"prefix\":\"0xcb\",\"opcode\":\"0xc7\",\"mnemonic\":\"SET\",\"operands\":[\"0\",\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"200\":{\"prefix\":\"0xcb\",\"opcode\":\"0xc8\",\"mnemonic\":\"SET\",\"operands\":[\"1\",\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"201\":{\"prefix\":\"0xcb\",\"opcode\":\"0xc9\",\"mnemonic\":\"SET\",\"operands\":[\"1\",\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"202\":{\"prefix\":\"0xcb\",\"opcode\":\"0xca\",\"mnemonic\":\"SET\",\"operands\":[\"1\",\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"203\":{\"prefix\":\"0xcb\",\"opcode\":\"0xcb\",\"mnemonic\":\"SET\",\"operands\":[\"1\",\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"204\":{\"prefix\":\"0xcb\",\"opcode\":\"0xcc\",\"mnemonic\":\"SET\",\"operands\":[\"1\",\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"205\":{\"prefix\":\"0xcb\",\"opcode\":\"0xcd\",\"mnemonic\":\"SET\",\"operands\":[\"1\",\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"206\":{\"prefix\":\"0xcb\",\"opcode\":\"0xce\",\"mnemonic\":\"SET\",\"operands\":[\"1\",\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"207\":{\"prefix\":\"0xcb\",\"opcode\":\"0xcf\",\"mnemonic\":\"SET\",\"operands\":[\"1\",\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"208\":{\"prefix\":\"0xcb\",\"opcode\":\"0xd0\",\"mnemonic\":\"SET\",\"operands\":[\"2\",\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"209\":{\"prefix\":\"0xcb\",\"opcode\":\"0xd1\",\"mnemonic\":\"SET\",\"operands\":[\"2\",\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"210\":{\"prefix\":\"0xcb\",\"opcode\":\"0xd2\",\"mnemonic\":\"SET\",\"operands\":[\"2\",\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"211\":{\"prefix\":\"0xcb\",\"opcode\":\"0xd3\",\"mnemonic\":\"SET\",\"operands\":[\"2\",\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"212\":{\"prefix\":\"0xcb\",\"opcode\":\"0xd4\",\"mnemonic\":\"SET\",\"operands\":[\"2\",\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"213\":{\"prefix\":\"0xcb\",\"opcode\":\"0xd5\",\"mnemonic\":\"SET\",\"operands\":[\"2\",\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"214\":{\"prefix\":\"0xcb\",\"opcode\":\"0xd6\",\"mnemonic\":\"SET\",\"operands\":[\"2\",\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"215\":{\"prefix\":\"0xcb\",\"opcode\":\"0xd7\",\"mnemonic\":\"SET\",\"operands\":[\"2\",\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"216\":{\"prefix\":\"0xcb\",\"opcode\":\"0xd8\",\"mnemonic\":\"SET\",\"operands\":[\"3\",\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"217\":{\"prefix\":\"0xcb\",\"opcode\":\"0xd9\",\"mnemonic\":\"SET\",\"operands\":[\"3\",\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"218\":{\"prefix\":\"0xcb\",\"opcode\":\"0xda\",\"mnemonic\":\"SET\",\"operands\":[\"3\",\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"219\":{\"prefix\":\"0xcb\",\"opcode\":\"0xdb\",\"mnemonic\":\"SET\",\"operands\":[\"3\",\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"220\":{\"prefix\":\"0xcb\",\"opcode\":\"0xdc\",\"mnemonic\":\"SET\",\"operands\":[\"3\",\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"221\":{\"prefix\":\"0xcb\",\"opcode\":\"0xdd\",\"mnemonic\":\"SET\",\"operands\":[\"3\",\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"222\":{\"prefix\":\"0xcb\",\"opcode\":\"0xde\",\"mnemonic\":\"SET\",\"operands\":[\"3\",\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"223\":{\"prefix\":\"0xcb\",\"opcode\":\"0xdf\",\"mnemonic\":\"SET\",\"operands\":[\"3\",\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"224\":{\"prefix\":\"0xcb\",\"opcode\":\"0xe0\",\"mnemonic\":\"SET\",\"operands\":[\"4\",\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"225\":{\"prefix\":\"0xcb\",\"opcode\":\"0xe1\",\"mnemonic\":\"SET\",\"operands\":[\"4\",\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"226\":{\"prefix\":\"0xcb\",\"opcode\":\"0xe2\",\"mnemonic\":\"SET\",\"operands\":[\"4\",\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"227\":{\"prefix\":\"0xcb\",\"opcode\":\"0xe3\",\"mnemonic\":\"SET\",\"operands\":[\"4\",\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"228\":{\"prefix\":\"0xcb\",\"opcode\":\"0xe4\",\"mnemonic\":\"SET\",\"operands\":[\"4\",\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"229\":{\"prefix\":\"0xcb\",\"opcode\":\"0xe5\",\"mnemonic\":\"SET\",\"operands\":[\"4\",\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"230\":{\"prefix\":\"0xcb\",\"opcode\":\"0xe6\",\"mnemonic\":\"SET\",\"operands\":[\"4\",\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"231\":{\"prefix\":\"0xcb\",\"opcode\":\"0xe7\",\"mnemonic\":\"SET\",\"operands\":[\"4\",\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"232\":{\"prefix\":\"0xcb\",\"opcode\":\"0xe8\",\"mnemonic\":\"SET\",\"operands\":[\"5\",\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"233\":{\"prefix\":\"0xcb\",\"opcode\":\"0xe9\",\"mnemonic\":\"SET\",\"operands\":[\"5\",\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"234\":{\"prefix\":\"0xcb\",\"opcode\":\"0xea\",\"mnemonic\":\"SET\",\"operands\":[\"5\",\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"235\":{\"prefix\":\"0xcb\",\"opcode\":\"0xeb\",\"mnemonic\":\"SET\",\"operands\":[\"5\",\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"236\":{\"prefix\":\"0xcb\",\"opcode\":\"0xec\",\"mnemonic\":\"SET\",\"operands\":[\"5\",\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"237\":{\"prefix\":\"0xcb\",\"opcode\":\"0xed\",\"mnemonic\":\"SET\",\"operands\":[\"5\",\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"238\":{\"prefix\":\"0xcb\",\"opcode\":\"0xee\",\"mnemonic\":\"SET\",\"operands\":[\"5\",\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"239\":{\"prefix\":\"0xcb\",\"opcode\":\"0xef\",\"mnemonic\":\"SET\",\"operands\":[\"5\",\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"240\":{\"prefix\":\"0xcb\",\"opcode\":\"0xf0\",\"mnemonic\":\"SET\",\"operands\":[\"6\",\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"241\":{\"prefix\":\"0xcb\",\"opcode\":\"0xf1\",\"mnemonic\":\"SET\",\"operands\":[\"6\",\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"242\":{\"prefix\":\"0xcb\",\"opcode\":\"0xf2\",\"mnemonic\":\"SET\",\"operands\":[\"6\",\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"243\":{\"prefix\":\"0xcb\",\"opcode\":\"0xf3\",\"mnemonic\":\"SET\",\"operands\":[\"6\",\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"244\":{\"prefix\":\"0xcb\",\"opcode\":\"0xf4\",\"mnemonic\":\"SET\",\"operands\":[\"6\",\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"245\":{\"prefix\":\"0xcb\",\"opcode\":\"0xf5\",\"mnemonic\":\"SET\",\"operands\":[\"6\",\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"246\":{\"prefix\":\"0xcb\",\"opcode\":\"0xf6\",\"mnemonic\":\"SET\",\"operands\":[\"6\",\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"247\":{\"prefix\":\"0xcb\",\"opcode\":\"0xf7\",\"mnemonic\":\"SET\",\"operands\":[\"6\",\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"248\":{\"prefix\":\"0xcb\",\"opcode\":\"0xf8\",\"mnemonic\":\"SET\",\"operands\":[\"7\",\"B\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"249\":{\"prefix\":\"0xcb\",\"opcode\":\"0xf9\",\"mnemonic\":\"SET\",\"operands\":[\"7\",\"C\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"250\":{\"prefix\":\"0xcb\",\"opcode\":\"0xfa\",\"mnemonic\":\"SET\",\"operands\":[\"7\",\"D\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"251\":{\"prefix\":\"0xcb\",\"opcode\":\"0xfb\",\"mnemonic\":\"SET\",\"operands\":[\"7\",\"E\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"252\":{\"prefix\":\"0xcb\",\"opcode\":\"0xfc\",\"mnemonic\":\"SET\",\"operands\":[\"7\",\"H\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"253\":{\"prefix\":\"0xcb\",\"opcode\":\"0xfd\",\"mnemonic\":\"SET\",\"operands\":[\"7\",\"L\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"254\":{\"prefix\":\"0xcb\",\"opcode\":\"0xfe\",\"mnemonic\":\"SET\",\"operands\":[\"7\",\"(HL)\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"255\":{\"prefix\":\"0xcb\",\"opcode\":\"0xff\",\"mnemonic\":\"SET\",\"operands\":[\"7\",\"A\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"opcode\":\"0xcb\",\"mnemonic\":\"PREFIX\",\"operands\":[\"CB\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"204\":{\"opcode\":\"0xcc\",\"mnemonic\":\"CALL\",\"operands\":[\"Z\",\"a16\"],\"bytes\":3,\"cycles\":24,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"205\":{\"opcode\":\"0xcd\",\"mnemonic\":\"CALL\",\"operands\":[\"a16\"],\"bytes\":3,\"cycles\":24,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"206\":{\"opcode\":\"0xce\",\"mnemonic\":\"ADC\",\"operands\":[\"A\",\"d8\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"H\",\"C\"]},\"207\":{\"opcode\":\"0xcf\",\"mnemonic\":\"RST\",\"operands\":[\"08H\"],\"bytes\":1,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"208\":{\"opcode\":\"0xd0\",\"mnemonic\":\"RET\",\"operands\":[\"NC\"],\"bytes\":1,\"cycles\":20,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"209\":{\"opcode\":\"0xd1\",\"mnemonic\":\"POP\",\"operands\":[\"DE\"],\"bytes\":1,\"cycles\":12,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"210\":{\"opcode\":\"0xd2\",\"mnemonic\":\"JP\",\"operands\":[\"NC\",\"a16\"],\"bytes\":3,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"212\":{\"opcode\":\"0xd4\",\"mnemonic\":\"CALL\",\"operands\":[\"NC\",\"a16\"],\"bytes\":3,\"cycles\":24,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"213\":{\"opcode\":\"0xd5\",\"mnemonic\":\"PUSH\",\"operands\":[\"DE\"],\"bytes\":1,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"214\":{\"opcode\":\"0xd6\",\"mnemonic\":\"SUB\",\"operands\":[\"d8\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"215\":{\"opcode\":\"0xd7\",\"mnemonic\":\"RST\",\"operands\":[\"10H\"],\"bytes\":1,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"216\":{\"opcode\":\"0xd8\",\"mnemonic\":\"RET\",\"operands\":[\"C\"],\"bytes\":1,\"cycles\":20,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"217\":{\"opcode\":\"0xd9\",\"mnemonic\":\"RETI\",\"operands\":[],\"bytes\":1,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"218\":{\"opcode\":\"0xda\",\"mnemonic\":\"JP\",\"operands\":[\"C\",\"a16\"],\"bytes\":3,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"220\":{\"opcode\":\"0xdc\",\"mnemonic\":\"CALL\",\"operands\":[\"C\",\"a16\"],\"bytes\":3,\"cycles\":24,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"222\":{\"opcode\":\"0xde\",\"mnemonic\":\"SBC\",\"operands\":[\"A\",\"d8\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"223\":{\"opcode\":\"0xdf\",\"mnemonic\":\"RST\",\"operands\":[\"18H\"],\"bytes\":1,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"224\":{\"opcode\":\"0xe0\",\"mnemonic\":\"LDH\",\"operands\":[\"(a8)\",\"A\"],\"bytes\":2,\"cycles\":12,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"225\":{\"opcode\":\"0xe1\",\"mnemonic\":\"POP\",\"operands\":[\"HL\"],\"bytes\":1,\"cycles\":12,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"226\":{\"opcode\":\"0xe2\",\"mnemonic\":\"LD\",\"operands\":[\"(C)\",\"A\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"229\":{\"opcode\":\"0xe5\",\"mnemonic\":\"PUSH\",\"operands\":[\"HL\"],\"bytes\":1,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"230\":{\"opcode\":\"0xe6\",\"mnemonic\":\"AND\",\"operands\":[\"d8\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"1\",\"0\"]},\"231\":{\"opcode\":\"0xe7\",\"mnemonic\":\"RST\",\"operands\":[\"20H\"],\"bytes\":1,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"232\":{\"opcode\":\"0xe8\",\"mnemonic\":\"ADD\",\"operands\":[\"SP\",\"r8\"],\"bytes\":2,\"cycles\":16,\"flagsZNHC\":[\"0\",\"0\",\"H\",\"C\"]},\"233\":{\"opcode\":\"0xe9\",\"mnemonic\":\"JP\",\"operands\":[\"(HL)\"],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"234\":{\"opcode\":\"0xea\",\"mnemonic\":\"LD\",\"operands\":[\"(a16)\",\"A\"],\"bytes\":3,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"238\":{\"opcode\":\"0xee\",\"mnemonic\":\"XOR\",\"operands\":[\"d8\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"239\":{\"opcode\":\"0xef\",\"mnemonic\":\"RST\",\"operands\":[\"28H\"],\"bytes\":1,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"240\":{\"opcode\":\"0xf0\",\"mnemonic\":\"LDH\",\"operands\":[\"A\",\"(a8)\"],\"bytes\":2,\"cycles\":12,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"241\":{\"opcode\":\"0xf1\",\"mnemonic\":\"POP\",\"operands\":[\"AF\"],\"bytes\":1,\"cycles\":12,\"flagsZNHC\":[\"Z\",\"N\",\"H\",\"C\"]},\"242\":{\"opcode\":\"0xf2\",\"mnemonic\":\"LD\",\"operands\":[\"A\",\"(C)\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"243\":{\"opcode\":\"0xf3\",\"mnemonic\":\"DI\",\"operands\":[],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"245\":{\"opcode\":\"0xf5\",\"mnemonic\":\"PUSH\",\"operands\":[\"AF\"],\"bytes\":1,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"246\":{\"opcode\":\"0xf6\",\"mnemonic\":\"OR\",\"operands\":[\"d8\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"0\",\"0\",\"0\"]},\"247\":{\"opcode\":\"0xf7\",\"mnemonic\":\"RST\",\"operands\":[\"30H\"],\"bytes\":1,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"248\":{\"opcode\":\"0xf8\",\"mnemonic\":\"LD\",\"operands\":[\"HL\",\"SP+r8\"],\"bytes\":2,\"cycles\":12,\"flagsZNHC\":[\"0\",\"0\",\"H\",\"C\"]},\"249\":{\"opcode\":\"0xf9\",\"mnemonic\":\"LD\",\"operands\":[\"SP\",\"HL\"],\"bytes\":1,\"cycles\":8,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"250\":{\"opcode\":\"0xfa\",\"mnemonic\":\"LD\",\"operands\":[\"A\",\"(a16)\"],\"bytes\":3,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"251\":{\"opcode\":\"0xfb\",\"mnemonic\":\"EI\",\"operands\":[],\"bytes\":1,\"cycles\":4,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]},\"254\":{\"opcode\":\"0xfe\",\"mnemonic\":\"CP\",\"operands\":[\"d8\"],\"bytes\":2,\"cycles\":8,\"flagsZNHC\":[\"Z\",\"1\",\"H\",\"C\"]},\"255\":{\"opcode\":\"0xff\",\"mnemonic\":\"RST\",\"operands\":[\"38H\"],\"bytes\":1,\"cycles\":16,\"flagsZNHC\":[\"-\",\"-\",\"-\",\"-\"]}};\n\n//# sourceURL=webpack:///./src/gameboy/z80/opcodes.json?");

/***/ }),

/***/ "./src/gameboy/z80/z80.js":
/*!********************************!*\
  !*** ./src/gameboy/z80/z80.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar fetch = __webpack_require__(/*! ./fetch.js */ \"./src/gameboy/z80/fetch.js\");\nvar execute = __webpack_require__(/*! ./execute.js */ \"./src/gameboy/z80/execute.js\");\n\nvar _require = __webpack_require__(/*! ./flagsUtil.js */ \"./src/gameboy/z80/flagsUtil.js\"),\n    getZeroFlagBit = _require.getZeroFlagBit,\n    getCarryFlagBit = _require.getCarryFlagBit,\n    getSubtractFlagBit = _require.getSubtractFlagBit,\n    getHalfCarryFlagBit = _require.getHalfCarryFlagBit,\n    setZeroFlagBit = _require.setZeroFlagBit,\n    setCarryFlagBit = _require.setCarryFlagBit,\n    setSubtractFlagBit = _require.setSubtractFlagBit,\n    setHalfCarryFlagBit = _require.setHalfCarryFlagBit,\n    clearZeroFlagBit = _require.clearZeroFlagBit,\n    clearCarryFlagBit = _require.clearCarryFlagBit,\n    clearSubtractFlagBit = _require.clearSubtractFlagBit,\n    clearHalfCarryFlagBit = _require.clearHalfCarryFlagBit;\n\nvar _require2 = __webpack_require__(/*! ./instructions/add.js */ \"./src/gameboy/z80/instructions/add.js\"),\n    ADDr8r8 = _require2.ADDr8r8,\n    ADDr8rr16 = _require2.ADDr8rr16,\n    ADDr16r16 = _require2.ADDr16r16;\n\nvar _require3 = __webpack_require__(/*! ./instructions/and.js */ \"./src/gameboy/z80/instructions/and.js\"),\n    ANDn8 = _require3.ANDn8,\n    ANDr8 = _require3.ANDr8;\n\nvar _require4 = __webpack_require__(/*! ./instructions/bit.js */ \"./src/gameboy/z80/instructions/bit.js\"),\n    BITn3r8 = _require4.BITn3r8;\n\nvar _require5 = __webpack_require__(/*! ./instructions/call.js */ \"./src/gameboy/z80/instructions/call.js\"),\n    CALLn16 = _require5.CALLn16;\n\nvar _require6 = __webpack_require__(/*! ./instructions/cp.js */ \"./src/gameboy/z80/instructions/cp.js\"),\n    CPn8 = _require6.CPn8,\n    CPrr16 = _require6.CPrr16;\n\nvar CPL = __webpack_require__(/*! ./instructions/cpl.js */ \"./src/gameboy/z80/instructions/cpl.js\");\n\nvar _require7 = __webpack_require__(/*! ./instructions/inc.js */ \"./src/gameboy/z80/instructions/inc.js\"),\n    INCr8 = _require7.INCr8,\n    INCr16 = _require7.INCr16;\n\nvar _require8 = __webpack_require__(/*! ./instructions/dec.js */ \"./src/gameboy/z80/instructions/dec.js\"),\n    DECr8 = _require8.DECr8,\n    DECr16 = _require8.DECr16;\n\nvar _require9 = __webpack_require__(/*! ./instructions/jp.js */ \"./src/gameboy/z80/instructions/jp.js\"),\n    JPn16 = _require9.JPn16,\n    JPrr16 = _require9.JPrr16;\n\nvar _require10 = __webpack_require__(/*! ./instructions/jr.js */ \"./src/gameboy/z80/instructions/jr.js\"),\n    JRn8 = _require10.JRn8,\n    JRZn8 = _require10.JRZn8,\n    JRNZn8 = _require10.JRNZn8;\n\nvar _require11 = __webpack_require__(/*! ./instructions/ld.js */ \"./src/gameboy/z80/instructions/ld.js\"),\n    LDr8n8 = _require11.LDr8n8,\n    LDr8r8 = _require11.LDr8r8,\n    LDr8rr16 = _require11.LDr8rr16,\n    LDr16n16 = _require11.LDr16n16,\n    LDrn16r8 = _require11.LDrn16r8,\n    LDrr8r8 = _require11.LDrr8r8,\n    LDrr16n8 = _require11.LDrr16n8,\n    LDrr16r8 = _require11.LDrr16r8,\n    LDDrr16r8 = _require11.LDDrr16r8,\n    LDHr8rn8 = _require11.LDHr8rn8,\n    LDHrn8r8 = _require11.LDHrn8r8,\n    LDIr8rr16 = _require11.LDIr8rr16,\n    LDIrr16r8 = _require11.LDIrr16r8;\n\nvar _require12 = __webpack_require__(/*! ./instructions/or.js */ \"./src/gameboy/z80/instructions/or.js\"),\n    ORn8 = _require12.ORn8,\n    ORr8 = _require12.ORr8;\n\nvar POPr16 = __webpack_require__(/*! ./instructions/pop.js */ \"./src/gameboy/z80/instructions/pop.js\");\nvar PUSHr16 = __webpack_require__(/*! ./instructions/push.js */ \"./src/gameboy/z80/instructions/push.js\");\n\nvar _require13 = __webpack_require__(/*! ./instructions/ret.js */ \"./src/gameboy/z80/instructions/ret.js\"),\n    RET = _require13.RET;\n\nvar _require14 = __webpack_require__(/*! ./instructions/rl.js */ \"./src/gameboy/z80/instructions/rl.js\"),\n    RLA = _require14.RLA,\n    RLr8 = _require14.RLr8;\n\nvar RSTf = __webpack_require__(/*! ./instructions/rst.js */ \"./src/gameboy/z80/instructions/rst.js\");\n\nvar _require15 = __webpack_require__(/*! ./instructions/sub.js */ \"./src/gameboy/z80/instructions/sub.js\"),\n    SUBr8 = _require15.SUBr8;\n\nvar _require16 = __webpack_require__(/*! ./instructions/swap.js */ \"./src/gameboy/z80/instructions/swap.js\"),\n    SWAPr8 = _require16.SWAPr8;\n\nvar _require17 = __webpack_require__(/*! ./instructions/xor.js */ \"./src/gameboy/z80/instructions/xor.js\"),\n    XORr8 = _require17.XORr8;\n\nvar Z80 = function () {\n  function Z80() {\n    _classCallCheck(this, Z80);\n\n    this.MAIN_MEMORY_SIZE = 0x10000; // 65536\n    this.MAX_INSTRUCTION_SIZE = 0x200000; // 2097152\n    this.CYCLES_PER_SEC = 4194304;\n    this.CYCLES_PER_SCREEN_RENDER = 69905;\n\n    this.currentCycle = 0;\n    this.mainMemory = new Array(this.MAIN_MEMORY_SIZE);\n    this.bootstrap = new Array(0x100);\n    this.masterInteruptSwitch = false;\n    this.cartridge = null;\n    this.registers = {\n      // accumulator, 8-bit\n      a: 0,\n      // flags, 8-bit\n      f: 0,\n      // general-purpose, 8-bit\n      b: 0, c: 0, d: 0, e: 0, h: 0, l: 0,\n      // program counter, 16-bit\n      pc: 0,\n      // stack pointer, 16-bit\n      sp: 0,\n      // instruction, 8-bit\n      ir: 0\n    };\n    this.prefix = null;\n    this.opcode = null;\n    this.operand1 = null;\n    this.operand2 = null;\n    this.byte1 = null;\n    this.byte2 = null;\n    this.originalpc = null;\n    this.instructionInfo = null;\n  }\n\n  _createClass(Z80, [{\n    key: 'printRegisters',\n    value: function printRegisters() {\n      console.log('af= ' + this.registers.a.toString(16).padStart(2, '0') + this.registers.f.toString(16).padStart(2, '0'));\n      console.log('bc= ' + this.registers.b.toString(16).padStart(2, '0') + this.registers.c.toString(16).padStart(2, '0'));\n      console.log('de= ' + this.registers.d.toString(16).padStart(2, '0') + this.registers.e.toString(16).padStart(2, '0'));\n      console.log('hl= ' + this.registers.h.toString(16).padStart(2, '0') + this.registers.l.toString(16).padStart(2, '0'));\n      console.log('sp= ' + this.registers.sp.toString(16).padStart(4, '0'));\n      console.log('pc= ' + this.registers.pc.toString(16).padStart(4, '0'));\n\n      console.log('z= ' + this.getZeroFlagBit());\n      console.log('n= ' + this.getSubtractFlagBit());\n      console.log('h= ' + this.getHalfCarryFlagBit());\n      console.log('c= ' + this.getCarryFlagBit());\n    }\n  }, {\n    key: 'loadBootstrap',\n    value: function loadBootstrap(instructions) {\n      var _this = this;\n\n      instructions.forEach(function (instruction, index) {\n        _this.bootstrap[index] = instruction;\n        _this.mainMemory[index] = instruction;\n      });\n    }\n  }, {\n    key: 'loadCartridge',\n    value: function loadCartridge(instructions) {\n      var _this2 = this;\n\n      this.cartridge = instructions;\n      instructions.forEach(function (instruction, index) {\n        if (index > 0x7FFF) {\n          return;\n        }\n        if (index >= 0x100) {\n          _this2.bootstrap[index] = instruction;\n          _this2.mainMemory[index] = instruction;\n        }\n      });\n    }\n  }, {\n    key: 'initializeMemory',\n    value: function initializeMemory() {\n      this.mainMemory.fill(0);\n    }\n  }, {\n    key: 'readMemory',\n    value: function readMemory(address) {\n      return this.mainMemory[address];\n    }\n  }, {\n    key: 'writeMemory',\n    value: function writeMemory(address, data) {\n      if (address === 0xFF50 && data !== 0x00) {\n        for (var i = 0; i < 0x100; i += 1) {\n          this.mainMemory[i] = this.cartridge[i];\n        }\n      }\n      this.mainMemory[address] = data;\n    }\n  }, {\n    key: 'getCurrentCycle',\n    value: function getCurrentCycle() {\n      return this.currentCycle;\n    }\n  }, {\n    key: 'resetCurrentCycle',\n    value: function resetCurrentCycle() {\n      this.currentCycle = 0;\n    }\n  }]);\n\n  return Z80;\n}();\n\nZ80.prototype.fetch = fetch;\nZ80.prototype.execute = execute;\n\nZ80.prototype.ADDr8r8 = ADDr8r8;\nZ80.prototype.ADDr8rr16 = ADDr8rr16;\nZ80.prototype.ADDr16r16 = ADDr16r16;\n\nZ80.prototype.ANDn8 = ANDn8;\nZ80.prototype.ANDr8 = ANDr8;\n\nZ80.prototype.BITn3r8 = BITn3r8;\n\nZ80.prototype.CALLn16 = CALLn16;\n\nZ80.prototype.CPn8 = CPn8;\nZ80.prototype.CPrr16 = CPrr16;\n\nZ80.prototype.CPL = CPL;\n\nZ80.prototype.INCr8 = INCr8;\nZ80.prototype.INCr16 = INCr16;\n\nZ80.prototype.DECr8 = DECr8;\nZ80.prototype.DECr16 = DECr16;\n\nZ80.prototype.JPn16 = JPn16;\nZ80.prototype.JPrr16 = JPrr16;\n\nZ80.prototype.JRn8 = JRn8;\nZ80.prototype.JRZn8 = JRZn8;\nZ80.prototype.JRNZn8 = JRNZn8;\n\nZ80.prototype.LDr8n8 = LDr8n8;\nZ80.prototype.LDr8r8 = LDr8r8;\nZ80.prototype.LDr8rr16 = LDr8rr16;\nZ80.prototype.LDr16n16 = LDr16n16;\nZ80.prototype.LDrn16r8 = LDrn16r8;\nZ80.prototype.LDrr8r8 = LDrr8r8;\nZ80.prototype.LDrr16n8 = LDrr16n8;\nZ80.prototype.LDrr16r8 = LDrr16r8;\nZ80.prototype.LDDrr16r8 = LDDrr16r8;\nZ80.prototype.LDHr8rn8 = LDHr8rn8;\nZ80.prototype.LDHrn8r8 = LDHrn8r8;\nZ80.prototype.LDIr8rr16 = LDIr8rr16;\nZ80.prototype.LDIrr16r8 = LDIrr16r8;\n\nZ80.prototype.ORn8 = ORn8;\nZ80.prototype.ORr8 = ORr8;\n\nZ80.prototype.POPr16 = POPr16;\nZ80.prototype.PUSHr16 = PUSHr16;\n\nZ80.prototype.RET = RET;\n\nZ80.prototype.RLA = RLA;\nZ80.prototype.RLr8 = RLr8;\n\nZ80.prototype.RSTf = RSTf;\n\nZ80.prototype.SUBr8 = SUBr8;\n\nZ80.prototype.SWAPr8 = SWAPr8;\n\nZ80.prototype.XORr8 = XORr8;\n\nZ80.prototype.getZeroFlagBit = getZeroFlagBit;\nZ80.prototype.getCarryFlagBit = getCarryFlagBit;\nZ80.prototype.getSubtractFlagBit = getSubtractFlagBit;\nZ80.prototype.getHalfCarryFlagBit = getHalfCarryFlagBit;\nZ80.prototype.setZeroFlagBit = setZeroFlagBit;\nZ80.prototype.setCarryFlagBit = setCarryFlagBit;\nZ80.prototype.setSubtractFlagBit = setSubtractFlagBit;\nZ80.prototype.setHalfCarryFlagBit = setHalfCarryFlagBit;\nZ80.prototype.clearZeroFlagBit = clearZeroFlagBit;\nZ80.prototype.clearCarryFlagBit = clearCarryFlagBit;\nZ80.prototype.clearSubtractFlagBit = clearSubtractFlagBit;\nZ80.prototype.clearHalfCarryFlagBit = clearHalfCarryFlagBit;\n\nmodule.exports = Z80;\n\n//# sourceURL=webpack:///./src/gameboy/z80/z80.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _gameboy = __webpack_require__(/*! ./gameboy/gameboy */ \"./src/gameboy/gameboy.js\");\n\nvar _gameboy2 = _interopRequireDefault(_gameboy);\n\nvar _TetrisWorld = __webpack_require__(/*! ./gameboy/Tetris (World).gb */ \"./src/gameboy/Tetris (World).gb\");\n\nvar _TetrisWorld2 = _interopRequireDefault(_TetrisWorld);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar gameBoy = new _gameboy2.default();\ngameBoy.loadCartridge(_TetrisWorld2.default);\ngameBoy.start();\n\nvar canvas = document.querySelector('#main-canvas');\nvar ctx = canvas.getContext('2d');\n\nvar imgData = ctx.createImageData(160, 144);\nvar data = imgData.data;\n\ngameBoy.on('screen-update', function () {\n  for (var i = 0, len = 160 * 144 * 4; i < len; i += 4) {\n    data[i] = gameBoy.lcd.screen[i / 4];\n    data[i + 1] = gameBoy.lcd.screen[i / 4];\n    data[i + 2] = gameBoy.lcd.screen[i / 4];\n    data[i + 3] = 255;\n  }\n  ctx.putImageData(imgData, 0, 0);\n});\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ })

/******/ });